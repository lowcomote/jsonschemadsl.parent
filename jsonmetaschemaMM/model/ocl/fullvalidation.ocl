import 'http://at.jku.bise/jsonMetaschemaMM'
 
package jsonMetaschemaMM

context NonNegativeInteger
inv Minimum0 ('The value must be >= 0'):
if value <0 then null else true endif

context NonNegativeInteger
inv IsInteger ('The value must be an Integer'):
if value.floor() = value then true else null endif

context NonNegativeIntegerDefault0
inv MinimumDefault0 ('The value must be >= 0'):
if value <0 then null else true endif

context NonNegativeIntegerDefault0
inv IsInteger ('The value must be an Integer'):
if value.floor() = value then true else null endif



context ObjectSchema
inv missingType ('The keyword "type" should be present'):
	if keywordDefinition->select(k|k.oclIsTypeOf(RefSchemaDefinition))->size()=0
	then
		keywordDefinition->select(k|k.oclIsTypeOf(TypeSchemaDefinition))->size()>0
	else true
	endif
	



context ObjectSchema
inv missingAdditionalProperties ('The keyword "additionalProperties" should be specified explicitly'):
	if not type.oclIsUndefined() then 
		if type.anyOf.oclIsTypeOf(TypeAnyOf1) then 
			if type.anyOf.oclAsType(TypeAnyOf1).type = SimpleTypes::object then not additionalProperties.oclIsUndefined()
			else true
			endif
		else true --- TODO manage case of array of types containing "object"
		endif	
	else true --- TODO manage case of array of types with all types
	endif




	

context ObjectSchema
inv RepeatedKeywords ('Keywords can not be repeated at the same nested level'):
if keywordDefinition->select(k|k.oclType()<> SchemaObjectAdditionalProperties)->isUnique(k|k.oclType()) then true  else null endif


context PropertiesSchemaDefinition
inv RepeatedKeysInProperties ('The same key cannot be repeated under the same properties keyword'):
if keySchemaPairs->isUnique(k | k.key) then true  else null endif

context PatternPropertiesSchemaDefinition
inv RepeatedKeysInPatternProperties ('The same key cannot be repeated under the same patternProperties keyword'):
if keySchemaPairs->isUnique(k | k.key) then true  else null endif

context DefinitionsSchemaDefinition
inv RepeatedKeysInDefinitions ('The same key cannot be repeated under the same definitions keyword'):
if keySchemaPairs->isUnique(k | k.key) then true  else null endif

context RefSchemaDefinition
inv UnsolvableReference ('The reference '+self.ref+' does not point to a schema'):
if true = self.isOnlyFragment() then
	let jsonPointer : Sequence(String) = self.getJsonPointerAsList() in
	if jsonPointer=null then null
	else
		if JsonSchema.allInstances()->asSequence()->first().findSchemaByJsonPointer(jsonPointer)<>null then true
		else null
		endif
	endif
else true
endif

context PatternSchemaDefinition
inv IsValidPattern ('The pattern '+self.pattern+' is not a valid regular expression'):
if self.isValidPattern() then true  else null endif


context RefSchemaDefinition
inv BadUriReference ('The reference '+self.ref+' is not a valid uri-reference'):
if self.isFormatUriReference() then true else null endif



endpackage