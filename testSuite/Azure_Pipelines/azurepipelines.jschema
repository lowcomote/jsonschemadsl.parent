{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/Microsoft/azure-pipelines-vscode/blob/main/service-schema.json",
  "$comment": "v1.206.0",
  "title": "Pipeline schema",
  "description": "A pipeline definition",
  "oneOf": [
    {
      "$ref": "#/definitions/pipeline"
    },
    {
      "type": "string",
      "pattern": "^$"
    }
  ],
  "definitions": {
    "string": {
      "type": "string"
    },
    "sequence": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/any"
      }
    },
    "mapping": {
      "type": "object",
      "additionalProperties": true
    },
    "any": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/any"
          }
        },
        {
          "type": "object",
          "additionalProperties": true
        }
      ]
    },
    "pipeline": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "stages": {
              "description": "Stages are groups of jobs that can run without human intervention",
              "$ref": "#/definitions/stages"
            },
            "pool": {
              "description": "Pool where jobs in this pipeline will run unless otherwise specified",
              "$ref": "#/definitions/pool"
            },
            "name": {
              "description": "Pipeline name",
              "$ref": "#/definitions/string_allowExpressions"
            },
            "trigger": {
              "description": "Continuous integration triggers",
              "$ref": "#/definitions/trigger"
            },
            "parameters": {
              "description": "Pipeline template parameters",
              "$ref": "#/definitions/pipelineTemplateParameters"
            },
            "pr": {
              "description": "Pull request triggers",
              "$ref": "#/definitions/pr"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "resources": {
              "description": "Containers and repositories used in the build",
              "$ref": "#/definitions/resources"
            },
            "variables": {
              "description": "Variables for this pipeline",
              "$ref": "#/definitions/variables"
            },
            "lockBehavior": {
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
              "$ref": "#/definitions/lockBehavior"
            }
          },
          "additionalProperties": false,
          "required": [
            "stages"
          ]
        },
        {
          "type": "object",
          "properties": {
            "extends": {
              "description": "Extends a template",
              "$ref": "#/definitions/extends"
            },
            "pool": {
              "description": "Pool where jobs in this pipeline will run unless otherwise specified",
              "$ref": "#/definitions/pool"
            },
            "name": {
              "description": "Pipeline name",
              "$ref": "#/definitions/string_allowExpressions"
            },
            "trigger": {
              "description": "Continuous integration triggers",
              "$ref": "#/definitions/trigger"
            },
            "parameters": {
              "description": "Pipeline template parameters",
              "$ref": "#/definitions/pipelineTemplateParameters"
            },
            "pr": {
              "description": "Pull request triggers",
              "$ref": "#/definitions/pr"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "resources": {
              "description": "Containers and repositories used in the build",
              "$ref": "#/definitions/resources"
            },
            "variables": {
              "description": "Variables for this pipeline",
              "$ref": "#/definitions/variables"
            },
            "lockBehavior": {
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
              "$ref": "#/definitions/lockBehavior"
            }
          },
          "additionalProperties": false,
          "required": [
            "extends"
          ]
        },
        {
          "type": "object",
          "properties": {
            "jobs": {
              "description": "Jobs represent units of work which can be assigned to a single agent or server",
              "$ref": "#/definitions/jobs"
            },
            "pool": {
              "description": "Pool where jobs in this pipeline will run unless otherwise specified",
              "$ref": "#/definitions/pool"
            },
            "name": {
              "description": "Pipeline name",
              "$ref": "#/definitions/string_allowExpressions"
            },
            "trigger": {
              "description": "Continuous integration triggers",
              "$ref": "#/definitions/trigger"
            },
            "parameters": {
              "description": "Pipeline template parameters",
              "$ref": "#/definitions/pipelineTemplateParameters"
            },
            "pr": {
              "description": "Pull request triggers",
              "$ref": "#/definitions/pr"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "resources": {
              "description": "Containers and repositories used in the build",
              "$ref": "#/definitions/resources"
            },
            "variables": {
              "description": "Variables for this pipeline",
              "$ref": "#/definitions/variables"
            },
            "lockBehavior": {
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
              "$ref": "#/definitions/lockBehavior"
            }
          },
          "additionalProperties": false,
          "required": [
            "jobs"
          ]
        },
        {
          "type": "object",
          "properties": {
            "phases": {
              "description": "Phases which make up the pipeline",
              "$comment": "This option is deprecated, use `jobs` instead",
              "doNotSuggest": true,
              "$ref": "#/definitions/phases"
            },
            "name": {
              "description": "Pipeline name",
              "$ref": "#/definitions/string_allowExpressions"
            },
            "trigger": {
              "description": "Continuous integration triggers",
              "$ref": "#/definitions/trigger"
            },
            "parameters": {
              "description": "Pipeline template parameters",
              "$ref": "#/definitions/pipelineTemplateParameters"
            },
            "pr": {
              "description": "Pull request triggers",
              "$ref": "#/definitions/pr"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "resources": {
              "description": "Containers and repositories used in the build",
              "$ref": "#/definitions/resources"
            },
            "variables": {
              "description": "Variables for this pipeline",
              "$ref": "#/definitions/variables"
            },
            "lockBehavior": {
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
              "$ref": "#/definitions/lockBehavior"
            }
          },
          "additionalProperties": false,
          "required": [
            "phases"
          ]
        },
        {
          "type": "object",
          "properties": {
            "strategy": {
              "description": "Execution strategy for this job",
              "$ref": "#/definitions/jobStrategy"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/jobContinueOnError"
            },
            "pool": {
              "description": "Pool where this job will run",
              "$ref": "#/definitions/pool"
            },
            "container": {
              "description": "Container resource name",
              "$ref": "#/definitions/jobContainer"
            },
            "services": {
              "$ref": "#/definitions/jobServices"
            },
            "workspace": {
              "$ref": "#/definitions/jobWorkspace"
            },
            "steps": {
              "description": "A list of steps to run in this job",
              "$ref": "#/definitions/steps"
            },
            "name": {
              "description": "Pipeline name",
              "$ref": "#/definitions/string_allowExpressions"
            },
            "trigger": {
              "description": "Continuous integration triggers",
              "$ref": "#/definitions/trigger"
            },
            "parameters": {
              "description": "Pipeline template parameters",
              "$ref": "#/definitions/pipelineTemplateParameters"
            },
            "pr": {
              "description": "Pull request triggers",
              "$ref": "#/definitions/pr"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "resources": {
              "description": "Containers and repositories used in the build",
              "$ref": "#/definitions/resources"
            },
            "variables": {
              "description": "Variables for this pipeline",
              "$ref": "#/definitions/variables"
            },
            "lockBehavior": {
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
              "$ref": "#/definitions/lockBehavior"
            }
          },
          "additionalProperties": false,
          "required": [
            "steps"
          ]
        },
        {
          "type": "object",
          "properties": {
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/jobContinueOnError"
            },
            "queue": {
              "description": "Queue where this phase will run",
              "$comment": "This option is deprecated, use pool instead",
              "doNotSuggest": true,
              "$ref": "#/definitions/phaseQueueTarget"
            },
            "steps": {
              "description": "A list of steps to run in this phase",
              "$ref": "#/definitions/steps"
            },
            "name": {
              "description": "Pipeline name",
              "$ref": "#/definitions/string_allowExpressions"
            },
            "trigger": {
              "description": "Continuous integration triggers",
              "$ref": "#/definitions/trigger"
            },
            "parameters": {
              "description": "Pipeline template parameters",
              "$ref": "#/definitions/pipelineTemplateParameters"
            },
            "pr": {
              "description": "Pull request triggers",
              "$ref": "#/definitions/pr"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "resources": {
              "description": "Containers and repositories used in the build",
              "$ref": "#/definitions/resources"
            },
            "variables": {
              "description": "Variables for this pipeline",
              "$ref": "#/definitions/variables"
            },
            "lockBehavior": {
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
              "$ref": "#/definitions/lockBehavior"
            }
          },
          "additionalProperties": false,
          "$comment": "This option is deprecated, use `job` (inside `jobs`) instead",
          "required": [
            "steps"
          ]
        },
        {
          "type": "object",
          "properties": {
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/jobContinueOnError"
            },
            "server": {
              "description": "True if this is an agent-less phase (runs on server)",
              "$comment": "This option is deprecated, use pool:server instead",
              "doNotSuggest": true,
              "$ref": "#/definitions/phaseServerTarget"
            },
            "steps": {
              "description": "A list of steps to run in this phase",
              "$ref": "#/definitions/steps"
            },
            "name": {
              "description": "Pipeline name",
              "$ref": "#/definitions/string_allowExpressions"
            },
            "trigger": {
              "description": "Continuous integration triggers",
              "$ref": "#/definitions/trigger"
            },
            "parameters": {
              "description": "Pipeline template parameters",
              "$ref": "#/definitions/pipelineTemplateParameters"
            },
            "pr": {
              "description": "Pull request triggers",
              "$ref": "#/definitions/pr"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "resources": {
              "description": "Containers and repositories used in the build",
              "$ref": "#/definitions/resources"
            },
            "variables": {
              "description": "Variables for this pipeline",
              "$ref": "#/definitions/variables"
            },
            "lockBehavior": {
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
              "$ref": "#/definitions/lockBehavior"
            }
          },
          "additionalProperties": false,
          "$comment": "This option is deprecated, use `job` (inside `jobs`) instead",
          "required": [
            "steps"
          ]
        }
      ]
    },
    "pipelineBase": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Pipeline name",
          "$ref": "#/definitions/string_allowExpressions"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/trigger"
        },
        "parameters": {
          "description": "Pipeline template parameters",
          "$ref": "#/definitions/pipelineTemplateParameters"
        },
        "pr": {
          "description": "Pull request triggers",
          "$ref": "#/definitions/pr"
        },
        "schedules": {
          "$ref": "#/definitions/schedules"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/resources"
        },
        "variables": {
          "description": "Variables for this pipeline",
          "$ref": "#/definitions/variables"
        },
        "lockBehavior": {
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
          "$ref": "#/definitions/lockBehavior"
        }
      },
      "additionalProperties": false
    },
    "pipelineTrigger": {
      "type": "object",
      "properties": {
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/trigger"
        },
        "name": {
          "description": "Pipeline name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "parameters": {
          "description": "Pipeline template parameters",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "pr": {
          "description": "Pull request triggers",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "schedules": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "variables": {
          "description": "Variables for the entire pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "jobs": {
          "description": "Jobs which make up the pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "extends": {
          "description": "Extends a template",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "phases": {
          "description": "Phases which make up the pipeline",
          "$comment": "This option is deprecated, use `jobs` instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "strategy": {
          "description": "Execution strategy for the job",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "continueOnError": {
          "description": "Continue running even on failure?",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "pool": {
          "description": "Pool where this job will run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "container": {
          "description": "Container resource name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "queue": {
          "description": "Queue where this phase will run",
          "$comment": "This option is deprecated, use pool instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "server": {
          "description": "True if this is an agent-less phase (runs on server)",
          "$comment": "This option is deprecated, use pool:server instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "lockBehavior": {
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
          "$ref": "#/definitions/lockBehavior"
        }
      },
      "additionalProperties": false
    },
    "pipelineParameters": {
      "type": "object",
      "properties": {
        "parameters": {
          "description": "Pipeline template parameters",
          "$ref": "#/definitions/pipelineTemplateParameters"
        },
        "name": {
          "description": "Pipeline name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "pr": {
          "description": "Pull request triggers",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "schedules": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "variables": {
          "description": "Variables for the entire pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "jobs": {
          "description": "Jobs which make up the pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "extends": {
          "description": "Extends a template",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "phases": {
          "description": "Phases which make up the pipeline",
          "$comment": "This option is deprecated, use `jobs` instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "strategy": {
          "description": "Execution strategy for the job",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "continueOnError": {
          "description": "Continue running even on failure?",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "pool": {
          "description": "Pool where this job will run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "container": {
          "description": "Container resource name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "queue": {
          "description": "Queue where this phase will run",
          "$comment": "This option is deprecated, use pool instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "server": {
          "description": "True if this is an agent-less phase (runs on server)",
          "$comment": "This option is deprecated, use pool:server instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "lockBehavior": {
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
          "$ref": "#/definitions/lockBehavior"
        }
      },
      "additionalProperties": false
    },
    "pipelinePR": {
      "type": "object",
      "properties": {
        "pr": {
          "description": "Pull request triggers",
          "$ref": "#/definitions/pr"
        },
        "name": {
          "description": "Pipeline name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "parameters": {
          "description": "Pipeline template parameters",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "schedules": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "variables": {
          "description": "Variables for the entire pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "jobs": {
          "description": "Jobs which make up the pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "extends": {
          "description": "Extends a template",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "phases": {
          "description": "Phases which make up the pipeline",
          "$comment": "This option is deprecated, use `jobs` instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "strategy": {
          "description": "Execution strategy for the job",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "continueOnError": {
          "description": "Continue running even on failure?",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "pool": {
          "description": "Pool where this job will run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "container": {
          "description": "Container resource name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "queue": {
          "description": "Queue where this phase will run",
          "$comment": "This option is deprecated, use pool instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "server": {
          "description": "True if this is an agent-less phase (runs on server)",
          "$comment": "This option is deprecated, use pool:server instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "lockBehavior": {
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
          "$ref": "#/definitions/lockBehavior"
        }
      },
      "additionalProperties": false
    },
    "pipelineSchedules": {
      "type": "object",
      "properties": {
        "schedules": {
          "$ref": "#/definitions/schedules"
        },
        "name": {
          "description": "Pipeline name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "parameters": {
          "description": "Pipeline template parameters",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "pr": {
          "description": "Pull request triggers",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "variables": {
          "description": "Variables for the entire pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "jobs": {
          "description": "Jobs which make up the pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "extends": {
          "description": "Extends a template",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "phases": {
          "description": "Phases which make up the pipeline",
          "$comment": "This option is deprecated, use `jobs` instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "strategy": {
          "description": "Execution strategy for the job",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "continueOnError": {
          "description": "Continue running even on failure?",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "pool": {
          "description": "Pool where this job will run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "container": {
          "description": "Container resource name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "queue": {
          "description": "Queue where this phase will run",
          "$comment": "This option is deprecated, use pool instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "server": {
          "description": "True if this is an agent-less phase (runs on server)",
          "$comment": "This option is deprecated, use pool:server instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "lockBehavior": {
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
          "$ref": "#/definitions/lockBehavior"
        }
      },
      "additionalProperties": false
    },
    "pipelineAnyBase": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Pipeline name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "parameters": {
          "description": "Pipeline template parameters",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "pr": {
          "description": "Pull request triggers",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "schedules": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "variables": {
          "description": "Variables for the entire pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "jobs": {
          "description": "Jobs which make up the pipeline",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "extends": {
          "description": "Extends a template",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "phases": {
          "description": "Phases which make up the pipeline",
          "$comment": "This option is deprecated, use `jobs` instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "strategy": {
          "description": "Execution strategy for the job",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "continueOnError": {
          "description": "Continue running even on failure?",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "pool": {
          "description": "Pool where this job will run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "container": {
          "description": "Container resource name",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/any_allowExpressions"
        },
        "queue": {
          "description": "Queue where this phase will run",
          "$comment": "This option is deprecated, use pool instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "server": {
          "description": "True if this is an agent-less phase (runs on server)",
          "$comment": "This option is deprecated, use pool:server instead",
          "doNotSuggest": true,
          "$ref": "#/definitions/any_allowExpressions"
        },
        "lockBehavior": {
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
          "$ref": "#/definitions/lockBehavior"
        }
      },
      "additionalProperties": false
    },
    "pr": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^none$"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/branchFilter"
          }
        },
        {
          "type": "object",
          "properties": {
            "autoCancel": {
              "description": "Whether to cancel running PR builds when a new commit lands in the branch",
              "$ref": "#/definitions/boolean"
            },
            "branches": {
              "$ref": "#/definitions/includeExcludeFilters"
            },
            "paths": {
              "$ref": "#/definitions/includeExcludeFilters"
            },
            "drafts": {
              "description": "Whether to start a run when a draft PR is created",
              "$ref": "#/definitions/boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "trigger": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^none$"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/branchFilter"
          }
        },
        {
          "type": "object",
          "properties": {
            "batch": {
              "description": "Whether to batch changes per branch",
              "$ref": "#/definitions/boolean"
            },
            "branches": {
              "$ref": "#/definitions/includeExcludeFilters"
            },
            "paths": {
              "$ref": "#/definitions/includeExcludeFilters"
            },
            "tags": {
              "$ref": "#/definitions/includeExcludeFilters"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "includeExcludeFilters": {
      "type": "object",
      "properties": {
        "include": {
          "$ref": "#/definitions/branchFilterArray"
        },
        "exclude": {
          "$ref": "#/definitions/branchFilterArray"
        }
      },
      "additionalProperties": false
    },
    "includeExcludeStringFilters": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nonEmptyString"
          }
        },
        {
          "type": "object",
          "properties": {
            "include": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            },
            "exclude": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "branchFilterArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/branchFilter"
      }
    },
    "branchFilter": {
      "type": "string",
      "description": "branch name or prefix filter",
      "pattern": "^[^\\/~\\^\\: \\[\\]\\\\]+(\\/[^\\/~\\^\\: \\[\\]\\\\]+)*$"
    },
    "templateParameters": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/templateParameter"
          }
        },
        {
          "type": "object",
          "additionalProperties": true
        }
      ]
    },
    "templateParameter": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "displayName": {
          "description": "Human-readable name for the parameter",
          "$ref": "#/definitions/string"
        },
        "type": {
          "$ref": "#/definitions/templateParameterType"
        },
        "default": {
          "$ref": "#/definitions/any"
        },
        "values": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        }
      },
      "additionalProperties": false
    },
    "templateParameterType": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^boolean$"
        },
        {
          "type": "string",
          "pattern": "^container$"
        },
        {
          "type": "string",
          "pattern": "^containerList$"
        },
        {
          "type": "string",
          "pattern": "^deployment$"
        },
        {
          "type": "string",
          "pattern": "^deploymentList$"
        },
        {
          "type": "string",
          "pattern": "^job$"
        },
        {
          "type": "string",
          "pattern": "^jobList$"
        },
        {
          "type": "string",
          "pattern": "^legacyObject$"
        },
        {
          "type": "string",
          "pattern": "^number$"
        },
        {
          "type": "string",
          "pattern": "^object$"
        },
        {
          "type": "string",
          "pattern": "^stage$"
        },
        {
          "type": "string",
          "pattern": "^stageList$"
        },
        {
          "type": "string",
          "pattern": "^step$"
        },
        {
          "type": "string",
          "pattern": "^stepList$"
        },
        {
          "type": "string",
          "pattern": "^string$"
        }
      ]
    },
    "pipelineTemplateParameters": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/pipelineTemplateParameter"
      }
    },
    "pipelineTemplateParameter": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "displayName": {
          "description": "Human-readable name for the parameter",
          "$ref": "#/definitions/string"
        },
        "type": {
          "$ref": "#/definitions/pipelineTemplateParameterType"
        },
        "default": {
          "$ref": "#/definitions/any"
        },
        "values": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        }
      },
      "additionalProperties": false
    },
    "pipelineTemplateParameterType": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^boolean$"
        },
        {
          "type": "string",
          "pattern": "^container$"
        },
        {
          "type": "string",
          "pattern": "^containerList$"
        },
        {
          "type": "string",
          "pattern": "^deployment$"
        },
        {
          "type": "string",
          "pattern": "^deploymentList$"
        },
        {
          "type": "string",
          "pattern": "^environment$"
        },
        {
          "type": "string",
          "pattern": "^filePath$"
        },
        {
          "type": "string",
          "pattern": "^job$"
        },
        {
          "type": "string",
          "pattern": "^jobList$"
        },
        {
          "type": "string",
          "pattern": "^number$"
        },
        {
          "type": "string",
          "pattern": "^object$"
        },
        {
          "type": "string",
          "pattern": "^pool$"
        },
        {
          "type": "string",
          "pattern": "^secureFile$"
        },
        {
          "type": "string",
          "pattern": "^serviceConnection$"
        },
        {
          "type": "string",
          "pattern": "^stage$"
        },
        {
          "type": "string",
          "pattern": "^stageList$"
        },
        {
          "type": "string",
          "pattern": "^step$"
        },
        {
          "type": "string",
          "pattern": "^stepList$"
        },
        {
          "type": "string",
          "pattern": "^string$"
        }
      ]
    },
    "schedules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/schedule"
      }
    },
    "schedule": {
      "type": "object",
      "properties": {
        "cron": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "displayName": {
          "$ref": "#/definitions/string"
        },
        "branches": {
          "$ref": "#/definitions/includeExcludeFilters"
        },
        "batch": {
          "$ref": "#/definitions/boolean"
        },
        "always": {
          "$ref": "#/definitions/boolean"
        }
      },
      "additionalProperties": false
    },
    "resources": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "builds": {
              "description": "List of external build resources",
              "$ref": "#/definitions/buildResources"
            },
            "containers": {
              "description": "List of container images",
              "$ref": "#/definitions/containerResources"
            },
            "pipelines": {
              "$ref": "#/definitions/pipelineResources"
            },
            "repositories": {
              "description": "List of external repositories",
              "$ref": "#/definitions/repositoryResources"
            },
            "webhooks": {
              "description": "List of webhooks",
              "$ref": "#/definitions/webhookResources"
            },
            "packages": {
              "description": "List of external packages",
              "$ref": "#/definitions/packageResources"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/legacyResource"
          }
        }
      ]
    },
    "buildResources": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/buildResource"
      }
    },
    "buildResource": {
      "type": "object",
      "properties": {
        "build": {
          "description": "Alias or name of build artifact",
          "$ref": "#/definitions/referenceName"
        },
        "type": {
          "description": "Name of the artifact type",
          "$ref": "#/definitions/nonEmptyString"
        },
        "connection": {
          "description": "Name of the connection. This connection will be used for all the communication related to this artifact.",
          "$ref": "#/definitions/nonEmptyString"
        },
        "source": {
          "description": "Name of the source definition/build/job",
          "$ref": "#/definitions/nonEmptyString"
        },
        "version": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "branch": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "trigger": {
          "description": "When the artifact mentioned in this build resource completes a build, its allowed to trigger this pipeline.",
          "$ref": "#/definitions/buildResourceTrigger"
        }
      },
      "additionalProperties": false,
      "required": [
        "build",
        "type",
        "connection",
        "source"
      ]
    },
    "buildResourceTrigger": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^none$"
        },
        {
          "type": "string",
          "pattern": "^true$"
        }
      ]
    },
    "packageResources": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/packageResource"
      }
    },
    "packageResource": {
      "type": "object",
      "properties": {
        "package": {
          "description": "Alias of package artifact",
          "$ref": "#/definitions/referenceName"
        },
        "type": {
          "description": "Type of the package. Ex - NuGet, NPM etc.",
          "$ref": "#/definitions/nonEmptyString"
        },
        "connection": {
          "description": "Name of the connection. This connection will be used for all the communication related to this artifact.",
          "$ref": "#/definitions/nonEmptyString"
        },
        "name": {
          "description": "Name of the package",
          "$ref": "#/definitions/nonEmptyString"
        },
        "version": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "tag": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "trigger": {
          "description": "Trigger a new pipeline run when a new version of this package is available.",
          "$ref": "#/definitions/packageResourceTrigger"
        }
      },
      "additionalProperties": false,
      "required": [
        "package",
        "type",
        "connection",
        "name"
      ]
    },
    "packageResourceTrigger": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^none$"
        },
        {
          "type": "string",
          "pattern": "^true$"
        }
      ]
    },
    "containerResources": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/containerResource"
      }
    },
    "containerResource": {
      "type": "object",
      "properties": {
        "container": {
          "description": "ID for the container",
          "$ref": "#/definitions/referenceName"
        },
        "type": {
          "$ref": "#/definitions/containerArtifactType"
        },
        "trigger": {
          "$ref": "#/definitions/containerResourceTrigger"
        },
        "endpoint": {
          "description": "ID of the service endpoint connecting to a private container registry",
          "$ref": "#/definitions/string"
        },
        "env": {
          "description": "Variables to map into the container's environment",
          "$ref": "#/definitions/mappingOfStringString"
        },
        "image": {
          "description": "Container image tag",
          "$ref": "#/definitions/string",
          "examples": [
            "ubuntu:16.04",
            "windows:1803"
          ]
        },
        "mapDockerSocket": {
          "description": "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs",
          "$ref": "#/definitions/boolean"
        },
        "options": {
          "description": "Options to pass into container host",
          "$ref": "#/definitions/string"
        },
        "ports": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        },
        "volumes": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        },
        "mountReadOnly": {
          "$ref": "#/definitions/readOnlyMounts"
        }
      },
      "additionalProperties": true,
      "required": [
        "container",
        "image"
      ]
    },
    "containerArtifactType": {
      "anyOf": [
        {
          "type": "string",
          
          "pattern": "^ACR$"
        },
        {
          "type": "string"
        }
      ]
    },
    "containerResourceTrigger": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^none$"
        },
        {
          "type": "string",
          "pattern": "^true$"
        },
        {
          "type": "object",
          "properties": {
            "enabled": {
              "$ref": "#/definitions/boolean"
            },
            "tags": {
              "$ref": "#/definitions/includeExcludeStringFilters"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "pipelineResources": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/pipelineResource"
      }
    },
    "pipelineResource": {
      "type": "object",
      "properties": {
        "pipeline": {
          "description": "ID of the pipeline resource",
          "$ref": "#/definitions/referenceName"
        },
        "project": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "source": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "version": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "branch": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "tags": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        },
        "trigger": {
          "$ref": "#/definitions/pipelineResourceTrigger"
        }
      },
      "additionalProperties": false,
      "required": [
        "pipeline"
      ]
    },
    "pipelineResourceTrigger": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^none$"
        },
        {
          "type": "string",
          "pattern": "^true$"
        },
        {
          "type": "object",
          "properties": {
            "enabled": {
              "$ref": "#/definitions/boolean"
            },
            "branches": {
              "$ref": "#/definitions/triggerBranchFilter"
            },
            "stages": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            },
            "tags": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "triggerBranchFilter": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "include": {
              "$ref": "#/definitions/branchFilterArray"
            },
            "exclude": {
              "$ref": "#/definitions/branchFilterArray"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/branchFilter"
          }
        }
      ]
    },
    "repositoryResources": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/repositoryResource"
      }
    },
    "repositoryResource": {
      "type": "object",
      "properties": {
        "repository": {
          "description": "ID of the external repository",
          "$ref": "#/definitions/referenceName"
        },
        "endpoint": {
          "description": "ID of the service endpoint connecting to this repository",
          "$ref": "#/definitions/nonEmptyString"
        },
        "trigger": {
          "$ref": "#/definitions/trigger"
        },
        "checkoutOptions": {
          "$comment": "This location is deprecated, `checkoutOptions` should be a peer of the `repository` keyword.",
          "doNotSuggest": true,
          "$ref": "#/definitions/repositoryCheckoutOptions"
        }
      },
      "additionalProperties": true,
      "required": [
        "repository"
      ]
    },
    "repositoryCheckoutOptions": {
      "type": "object",
      "properties": {
        "clean": {
          "description": "Scorch the repo before fetching?",
          "enum": [
            "true",
            "false"
          ],
          "$ref": "#/definitions/string"
        },
        "fetchDepth": {
          "description": "Depth of Git graph to fetch",
          "$ref": "#/definitions/string"
        },
        "lfs": {
          "description": "Fetch and checkout Git LFS objects?",
          "$ref": "#/definitions/string"
        },
        "submodules": {
          "description": "Fetch and checkout submodules?",
          "$ref": "#/definitions/string"
        },
        "persistCredentials": {
          "description": "Keep credentials available for later use?",
          "$ref": "#/definitions/string"
        }
      },
      "additionalProperties": false
    },
    "legacyResource": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/legacyRepoResourceAlias"
        },
        "clean": {
          "description": "Scorch the repo before fetching?",
          "enum": [
            "true",
            "false"
          ],
          "$ref": "#/definitions/string"
        },
        "fetchDepth": {
          "description": "Depth of Git graph to fetch",
          "$ref": "#/definitions/string"
        },
        "lfs": {
          "description": "Fetch and checkout Git LFS objects?",
          "$ref": "#/definitions/string"
        }
      },
      "additionalProperties": false
    },
    "legacyRepoResourceAlias": {
      "type": "string",
      "pattern": "^self$"
    },
    "webhookResources": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/webhookResource"
      }
    },
    "webhookResource": {
      "type": "object",
      "properties": {
        "webhook": {
          "description": "Name of the webhook",
          "$ref": "#/definitions/referenceName"
        },
        "connection": {
          "description": "Name of the connection. In case of offline webhook this will be the type of Incoming Webhook otherwise it will be the type of the webhook extension.",
          "$ref": "#/definitions/nonEmptyString"
        },
        "type": {
          "description": "Name of the webhook extension. leave this empty if its offline webhook.",
          "$ref": "#/definitions/nonEmptyString"
        },
        "filters": {
          "description": "List of trigger filters.",
          "$ref": "#/definitions/webhookFilters"
        }
      },
      "additionalProperties": false,
      "required": [
        "webhook",
        "connection"
      ]
    },
    "webhookFilters": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/webhookFilter"
      }
    },
    "webhookFilter": {
      "type": "object",
      "properties": {
        "path": {
          "description": "json path to select data from event payload",
          "$ref": "#/definitions/nonEmptyString"
        },
        "value": {
          "description": "Expected value for the filter to match",
          "$ref": "#/definitions/nonEmptyString"
        }
      },
      "additionalProperties": false,
      "required": [
        "path",
        "value"
      ]
    },
    "variablesTemplate": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/templateParameters"
        },
        "variables": {
          "$ref": "#/definitions/variables"
        }
      },
      "additionalProperties": false
    },
    "variables": {
      "anyOf": [
        {
          "type": "object",
          "additionalProperties": true
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/variable"
          }
        }
      ]
    },
    "variable": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/nonEmptyString"
            },
            "value": {
              "$ref": "#/definitions/string"
            },
            "readonly": {
              "$ref": "#/definitions/boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "group": {
              "$ref": "#/definitions/nonEmptyString"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "template": {
              "$ref": "#/definitions/nonEmptyString"
            },
            "parameters": {
              "$ref": "#/definitions/mapping"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "stagesTemplate": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/templateParameters"
        },
        "stages": {
          "$ref": "#/definitions/stages"
        }
      },
      "additionalProperties": false
    },
    "stages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/stage"
      }
    },
    "stage": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "stage": {
              "description": "ID of the stage",
              "$ref": "#/definitions/string"
            },
            "displayName": {
              "description": "Human-readable name for the stage",
              "$ref": "#/definitions/string"
            },
            "pool": {
              "description": "Pool where jobs in this stage will run unless otherwise specified",
              "$ref": "#/definitions/pool"
            },
            "dependsOn": {
              "description": "Any stages which must complete before this one",
              "$ref": "#/definitions/jobDependsOn"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this stage",
              "$ref": "#/definitions/string"
            },
            "variables": {
              "description": "Stage-specific variables",
              "$ref": "#/definitions/variables"
            },
            "jobs": {
              "description": "Jobs which make up the stage",
              "$ref": "#/definitions/jobs"
            },
            "lockBehavior": {
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests",
              "$ref": "#/definitions/lockBehavior"
            },
            "templateContext": {
              "$ref": "#/definitions/templateContext"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "template": {
              "description": "Reference to a template for this stage",
              "$ref": "#/definitions/nonEmptyString"
            },
            "parameters": {
              "description": "Parameters used in a stage template",
              "$ref": "#/definitions/mapping"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "lockBehavior": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^sequential$"
        },
        {
          "type": "string",
          "pattern": "^runLatest$"
        }
      ]
    },
    "extendsParameters": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/templateParameter"
      }
    },
    "extendsTemplate": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "stages": {
              "$ref": "#/definitions/stages"
            },
            "trigger": {
              "$ref": "#/definitions/trigger"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "parameters": {
              "$ref": "#/definitions/extendsParameters"
            },
            "variables": {
              "$ref": "#/definitions/variables"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "jobs": {
              "$ref": "#/definitions/jobs"
            },
            "trigger": {
              "$ref": "#/definitions/trigger"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "parameters": {
              "$ref": "#/definitions/extendsParameters"
            },
            "variables": {
              "$ref": "#/definitions/variables"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "steps": {
              "$ref": "#/definitions/steps"
            },
            "trigger": {
              "$ref": "#/definitions/trigger"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "parameters": {
              "$ref": "#/definitions/extendsParameters"
            },
            "variables": {
              "$ref": "#/definitions/variables"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "trigger": {
              "$ref": "#/definitions/trigger"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "parameters": {
              "$ref": "#/definitions/extendsParameters"
            },
            "extends": {
              "$ref": "#/definitions/extends"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "extendsTemplateBase": {
      "type": "object",
      "properties": {
        "trigger": {
          "$ref": "#/definitions/trigger"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "parameters": {
          "$ref": "#/definitions/extendsParameters"
        },
        "variables": {
          "$ref": "#/definitions/variables"
        }
      },
      "additionalProperties": false
    },
    "parametersTemplate": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "parameters": {
              "description": "Step-specific parameters",
              "$ref": "#/definitions/templateParameters"
            },
            "steps": {
              "description": "A list of steps to run",
              "$ref": "#/definitions/steps"
            }
          },
          "additionalProperties": false,
          "required": [
            "steps"
          ]
        },
        {
          "type": "object",
          "properties": {
            "parameters": {
              "description": "Parameters used in a job template",
              "$ref": "#/definitions/templateParameters"
            },
            "jobs": {
              "description": "Jobs which make up the pipeline",
              "$ref": "#/definitions/jobs"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "parameters": {
              "$ref": "#/definitions/templateParameters"
            },
            "stages": {
              "$ref": "#/definitions/stages"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "parameters": {
              "$ref": "#/definitions/templateParameters"
            },
            "extends": {
              "description": "Extends a template",
              "$ref": "#/definitions/extends"
            }
          },
          "additionalProperties": false,
          "required": [
            "extends"
          ]
        }
      ]
    },
    "extends": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "parameters": {
          "description": "Parameters used in the extend",
          "$ref": "#/definitions/mapping"
        }
      },
      "additionalProperties": false
    },
    "jobsTemplate": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "parameters": {
              "description": "Parameters used in a job template",
              "$ref": "#/definitions/templateParameters"
            },
            "jobs": {
              "description": "Jobs which make up the pipeline",
              "$ref": "#/definitions/jobs"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "parameters": {
              "description": "Parameters used in a phase template",
              "$ref": "#/definitions/templateParameters"
            },
            "phases": {
              "description": "Phases which make up the pipeline",
              "$comment": "This option is deprecated, use `jobs` instead",
              "doNotSuggest": true,
              "$ref": "#/definitions/phases"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "jobs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/job"
      }
    },
    "job": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "job": {
              "description": "ID of the job",
              "$ref": "#/definitions/referenceName"
            },
            "displayName": {
              "description": "Human-readable name for the job",
              "$ref": "#/definitions/string"
            },
            "dependsOn": {
              "description": "Any jobs which must complete before this one",
              "$ref": "#/definitions/jobDependsOn"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this job",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/jobContinueOnError"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this job to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "cancelTimeoutInMinutes": {
              "description": "Time to wait for the job to cancel before forcibly terminating it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "variables": {
              "description": "Job-specific variables",
              "$ref": "#/definitions/variables"
            },
            "strategy": {
              "description": "Execution strategy for this job",
              "$ref": "#/definitions/jobStrategy"
            },
            "pool": {
              "description": "Pool where this job will run",
              "$ref": "#/definitions/pool"
            },
            "container": {
              "description": "Container resource name",
              "$ref": "#/definitions/jobContainer"
            },
            "services": {
              "$ref": "#/definitions/jobServices"
            },
            "workspace": {
              "$ref": "#/definitions/jobWorkspace"
            },
            "uses": {
              "description": "Any resources required by this job that are not already referenced",
              "$ref": "#/definitions/explicitResources"
            },
            "steps": {
              "description": "A list of steps to run",
              "$ref": "#/definitions/steps"
            },
            "templateContext": {
              "$ref": "#/definitions/templateContext"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "deployment": {
              "$ref": "#/definitions/string"
            },
            "displayName": {
              "description": "Human-readable name for the deployment",
              "$ref": "#/definitions/string"
            },
            "dependsOn": {
              "description": "Any jobs which must complete before this one",
              "$ref": "#/definitions/jobDependsOn"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this deployment",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/jobContinueOnError"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this job to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "cancelTimeoutInMinutes": {
              "description": "Time to wait for the job to cancel before forcibly terminating it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "variables": {
              "description": "Deployment-specific variables",
              "$ref": "#/definitions/variables"
            },
            "pool": {
              "description": "Pool where this job will run",
              "$ref": "#/definitions/pool"
            },
            "environment": {
              "$ref": "#/definitions/deploymentEnvironment"
            },
            "strategy": {
              "description": "Execution strategy for this deployment",
              "$ref": "#/definitions/deploymentStrategy"
            },
            "workspace": {
              "description": "What to clean up before the job runs",
              "$ref": "#/definitions/jobWorkspace"
            },
            "uses": {
              "description": "Any resources required by this job that are not already referenced",
              "$ref": "#/definitions/explicitResources"
            },
            "container": {
              "description": "Container resource name",
              "$ref": "#/definitions/jobContainer"
            },
            "services": {
              "description": "Container resources to run as a service container",
              "$ref": "#/definitions/jobServices"
            },
            "templateContext": {
              "$ref": "#/definitions/templateContext"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "template": {
              "description": "Reference to a template for this deployment",
              "$ref": "#/definitions/nonEmptyString"
            },
            "parameters": {
              "description": "Parameters used in a deployment template",
              "$ref": "#/definitions/mapping"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "explicitResources": {
      "type": "object",
      "properties": {
        "repositories": {
          "description": "Repository references",
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        },
        "pools": {
          "description": "Pool references",
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        }
      },
      "additionalProperties": false
    },
    "pool": {
      "description": "Pool details",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of a pool",
              "$ref": "#/definitions/nonEmptyString"
            },
            "demands": {
              "description": "List of demands (for a private pool)",
              "$ref": "#/definitions/poolDemands"
            }
          },
          "additionalProperties": true
        }
      ]
    },
    "poolDemands": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nonEmptyString"
          }
        }
      ]
    },
    "jobContainer": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "alias": {
              "description": "The alias of the container resource",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "endpoint": {
              "description": "ID of the service endpoint connecting to a private container registry",
              "$ref": "#/definitions/string"
            },
            "env": {
              "description": "Variables to map into the container's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "image": {
              "description": "Container image tag",
              "$ref": "#/definitions/string",
              "examples": [
                "ubuntu:16.04",
                "windows:1803"
              ]
            },
            "mapDockerSocket": {
              "description": "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs",
              "$ref": "#/definitions/boolean"
            },
            "options": {
              "description": "Options to pass into container host",
              "$ref": "#/definitions/string"
            },
            "ports": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            },
            "volumes": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            },
            "mountReadOnly": {
              "$ref": "#/definitions/readOnlyMounts"
            }
          },
          "required": [
            "image"
          ]
        }
      ]
    },
    "containerBase": {
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "ID of the service endpoint connecting to a private container registry",
          "$ref": "#/definitions/string"
        },
        "env": {
          "description": "Variables to map into the container's environment",
          "$ref": "#/definitions/mappingOfStringString"
        },
        "image": {
          "description": "Container image tag",
          "$ref": "#/definitions/string",
          "examples": [
            "ubuntu:16.04",
            "windows:1803"
          ]
        },
        "mapDockerSocket": {
          "description": "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs",
          "$ref": "#/definitions/boolean"
        },
        "options": {
          "description": "Options to pass into container host",
          "$ref": "#/definitions/string"
        },
        "ports": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        },
        "volumes": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        },
        "mountReadOnly": {
          "$ref": "#/definitions/readOnlyMounts"
        }
      },
      "additionalProperties": false,
      "required": [
        "image"
      ]
    },
    "readOnlyMounts": {
      "type": "object",
      "properties": {
        "work": {
          "description": "Mount the work directory as readonly",
          "$ref": "#/definitions/boolean"
        },
        "externals": {
          "description": "Mount the externals directory as readonly",
          "$ref": "#/definitions/boolean"
        },
        "tools": {
          "description": "Mount the tools directory as readonly",
          "$ref": "#/definitions/boolean"
        },
        "tasks": {
          "description": "Mount the tasks directory as readonly",
          "$ref": "#/definitions/boolean"
        }
      },
      "additionalProperties": false
    },
    "jobServices": {
      "type": "object",
      "additionalProperties": true
    },
    "jobWorkspace": {
      "type": "object",
      "properties": {
        "clean": {
          "description": "Which parts of the workspace should be scorched before fetching",
          "enum": [
            "outputs",
            "resources",
            "all"
          ],
          "$ref": "#/definitions/string"
        }
      },
      "additionalProperties": false
    },
    "jobStrategy": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "matrix": {
              "$ref": "#/definitions/jobMatrix"
            },
            "maxParallel": {
              "description": "Maximum number of jobs running in parallel",
              "$ref": "#/definitions/nonEmptyString"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "parallel": {
              "description": "Run the job this many times",
              "$ref": "#/definitions/nonEmptyString"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "jobMatrix": {
      "anyOf": [
        {
          "type": "object",
          "additionalProperties": true,
          "minProperties": 1,
          "patternProperties": {
            "^[A-Za-z0-9_]+$": {
              "$ref": "#/definitions/matrixProperties"
            }
          }
        },
        {
          "type": "string"
        }
      ]
    },
    "matrixProperties": {
      "type": "object",
      "description": "Variable-value pair to pass in this matrix instance",
      "additionalProperties": true
    },
    "deploymentEnvironment": {
      "description": "Environment details",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of environment",
              "$ref": "#/definitions/nonEmptyString"
            },
            "resourceName": {
              "description": "Name of resource",
              "$ref": "#/definitions/nonEmptyString"
            },
            "resourceId": {
              "description": "Id of resource",
              "$ref": "#/definitions/nonEmptyString"
            },
            "resourceType": {
              "description": "Type of environment resource",
              "$ref": "#/definitions/nonEmptyString"
            },
            "tags": {
              "description": "List of tag filters",
              "$ref": "#/definitions/nonEmptyString"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "deploymentStrategy": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "runOnce": {
              "description": "RunOnce Deployment strategy",
              "$ref": "#/definitions/runOnceDeploymentStrategy"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "rolling": {
              "description": "Rolling Deployment strategy",
              "$ref": "#/definitions/rollingDeploymentStrategy"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "canary": {
              "description": "Canary Deployment strategy",
              "$ref": "#/definitions/canaryDeploymentStrategy"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "preDeployHook": {
      "type": "object",
      "properties": {
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/steps"
        },
        "pool": {
          "description": "Pool where pre deploy steps will run",
          "$ref": "#/definitions/pool"
        }
      },
      "additionalProperties": false
    },
    "deployHook": {
      "type": "object",
      "properties": {
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/steps"
        },
        "pool": {
          "description": "Pool where deploy steps will run",
          "$ref": "#/definitions/pool"
        }
      },
      "additionalProperties": false
    },
    "routeTrafficHook": {
      "type": "object",
      "properties": {
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/steps"
        },
        "pool": {
          "description": "Pool where route traffic steps will run",
          "$ref": "#/definitions/pool"
        }
      },
      "additionalProperties": false
    },
    "postRouteTrafficHook": {
      "type": "object",
      "properties": {
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/steps"
        },
        "pool": {
          "description": "Pool where post route traffic steps will run",
          "$ref": "#/definitions/pool"
        }
      },
      "additionalProperties": false
    },
    "onSuccessOrFailureHook": {
      "type": "object",
      "properties": {
        "failure": {
          "description": "Runs on failure of any step",
          "$ref": "#/definitions/onFailureHook"
        },
        "success": {
          "description": "Runs on success of all of the steps",
          "$ref": "#/definitions/onSuccessHook"
        }
      },
      "additionalProperties": false
    },
    "onFailureHook": {
      "type": "object",
      "properties": {
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/steps"
        },
        "pool": {
          "description": "Pool where post on failure steps will run",
          "$ref": "#/definitions/pool"
        }
      },
      "additionalProperties": false
    },
    "onSuccessHook": {
      "type": "object",
      "properties": {
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/steps"
        },
        "pool": {
          "description": "Pool where on success steps will run",
          "$ref": "#/definitions/pool"
        }
      },
      "additionalProperties": false
    },
    "runOnceDeploymentStrategy": {
      "type": "object",
      "properties": {
        "preDeploy": {
          "description": "Pre deploy hook for runOnce deployment strategy",
          "$ref": "#/definitions/preDeployHook"
        },
        "deploy": {
          "description": "Deploy hook for runOnce deployment strategy",
          "$ref": "#/definitions/deployHook"
        },
        "routeTraffic": {
          "description": "Route traffic hook for runOnce deployment strategy",
          "$ref": "#/definitions/routeTrafficHook"
        },
        "postRouteTraffic": {
          "description": "Post route traffic hook for runOnce deployment strategy",
          "$ref": "#/definitions/postRouteTrafficHook"
        },
        "on": {
          "description": "On success or failure hook for runOnce deployment strategy",
          "$ref": "#/definitions/onSuccessOrFailureHook"
        }
      },
      "additionalProperties": false
    },
    "rollingDeploymentStrategy": {
      "type": "object",
      "properties": {
        "maxParallel": {
          "description": "Maximum number of jobs running in parallel",
          "$ref": "#/definitions/nonEmptyString"
        },
        "preDeploy": {
          "description": "Pre deploy hook for rolling deployment strategy",
          "$ref": "#/definitions/preDeployHook"
        },
        "deploy": {
          "description": "Deploy hook for rolling deployment strategy",
          "$ref": "#/definitions/deployHook"
        },
        "routeTraffic": {
          "description": "Route traffic hook for rolling deployment strategy",
          "$ref": "#/definitions/routeTrafficHook"
        },
        "postRouteTraffic": {
          "description": "Post route traffic hook for rolling deployment strategy",
          "$ref": "#/definitions/postRouteTrafficHook"
        },
        "on": {
          "description": "On success or failure hook for rolling deployment strategy",
          "$ref": "#/definitions/onSuccessOrFailureHook"
        }
      },
      "additionalProperties": false
    },
    "canaryDeploymentStrategy": {
      "type": "object",
      "properties": {
        "increments": {
          "description": "Maximum batch size for deployment",
          "$ref": "#/definitions/canaryDeploymentIncrements"
        },
        "preDeploy": {
          "description": "Pre deploy hook for canary deployment strategy",
          "$ref": "#/definitions/preDeployHook"
        },
        "deploy": {
          "description": "Deploy hook for canary deployment strategy",
          "$ref": "#/definitions/deployHook"
        },
        "routeTraffic": {
          "description": "Route traffic hook for canary deployment strategy",
          "$ref": "#/definitions/routeTrafficHook"
        },
        "postRouteTraffic": {
          "description": "Post route traffic hook for canary deployment strategy",
          "$ref": "#/definitions/postRouteTrafficHook"
        },
        "on": {
          "description": "On success or failure hook for canary deployment strategy",
          "$ref": "#/definitions/onSuccessOrFailureHook"
        }
      },
      "additionalProperties": false
    },
    "canaryDeploymentIncrements": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/nonEmptyString"
      }
    },
    "phases": {
      "type": "array",
      "$comment": "This option is deprecated, use `jobs` instead",
      "items": {
        "$ref": "#/definitions/phase"
      }
    },
    "phase": {
      "$comment": "This option is deprecated, use `job` (inside `jobs`) instead",
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "phase": {
              "description": "ID of the phase",
              "$ref": "#/definitions/referenceName"
            },
            "dependsOn": {
              "description": "Any phases which must complete before this one",
              "$ref": "#/definitions/jobDependsOn"
            },
            "displayName": {
              "description": "Human-readable name of the phase",
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this phase",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/jobContinueOnError"
            },
            "queue": {
              "description": "Queue where this phase will run",
              "$comment": "This option is deprecated, use pool instead",
              "doNotSuggest": true,
              "$ref": "#/definitions/phaseQueueTarget"
            },
            "variables": {
              "description": "Phase-specific variables",
              "$ref": "#/definitions/variables"
            },
            "steps": {
              "description": "A list of steps to run in this phase",
              "$ref": "#/definitions/steps"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "phase": {
              "description": "ID of the phase",
              "$ref": "#/definitions/referenceName"
            },
            "dependsOn": {
              "description": "Any phases which must complete before this one",
              "$ref": "#/definitions/jobDependsOn"
            },
            "displayName": {
              "description": "Human-readable name of the phase",
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this phase",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/jobContinueOnError"
            },
            "server": {
              "description": "True if this is an agent-less phase (runs on server)",
              "$comment": "This option is deprecated, use pool:server instead",
              "doNotSuggest": true,
              "$ref": "#/definitions/phaseServerTarget"
            },
            "variables": {
              "description": "Phase-specific variables",
              "$ref": "#/definitions/variables"
            },
            "steps": {
              "description": "A list of steps to run in this phase",
              "$ref": "#/definitions/steps"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "template": {
              "description": "Reference to a template for this phase",
              "$ref": "#/definitions/nonEmptyString"
            },
            "parameters": {
              "description": "Parameters used in a phase template",
              "$ref": "#/definitions/mapping"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "phaseQueueTarget": {
      "description": "Queue details",
      "$comment": "This option is deprecated, use `pool` under `jobs` instead",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "cancelTimeoutInMinutes": {
              "description": "Time to wait for the phase to cancel before forcibly terminating it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "container": {
              "description": "Container resource name",
              "$ref": "#/definitions/nonEmptyString"
            },
            "demands": {
              "description": "List of demands (for a private queue)",
              "$ref": "#/definitions/phaseTargetDemands"
            },
            "matrix": {
              "$ref": "#/definitions/phaseTargetMatrix"
            },
            "name": {
              "description": "Name of a queue",
              "$ref": "#/definitions/string"
            },
            "parallel": {
              "description": "Maximum number of parallel agent executions",
              "$ref": "#/definitions/nonEmptyString"
            },
            "timeoutInMinutes": {
              "description": "Time to wait before cancelling the phase",
              "$ref": "#/definitions/nonEmptyString"
            },
            "workspace": {
              "$ref": "#/definitions/phaseTargetWorkspace"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "phaseServerTarget": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "cancelTimeoutInMinutes": {
              "description": "Time to wait for the job to cancel before forcibly terminating it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "matrix": {
              "$ref": "#/definitions/phaseTargetMatrix"
            },
            "parallel": {
              "description": "Maximum number of parallel agent executions",
              "$ref": "#/definitions/nonEmptyString"
            },
            "timeoutInMinutes": {
              "description": "Time to wait before cancelling the job",
              "$ref": "#/definitions/nonEmptyString"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "phaseTargetDemands": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nonEmptyString"
          }
        }
      ]
    },
    "phaseTargetWorkspace": {
      "type": "object",
      "properties": {
        "clean": {
          "description": "Scorch the repo before fetching?",
          "enum": [
            "outputs",
            "resources",
            "all"
          ],
          "$ref": "#/definitions/string"
        }
      },
      "additionalProperties": false
    },
    "phaseTargetMatrix": {
      "description": "List of permutations of variable values to run",
      "anyOf": [
        {
          "type": "object",
          "additionalProperties": true
        },
        {
          "type": "string"
        }
      ],
      "minProperties": 1,
      "patternProperties": {
        "^[A-Za-z0-9_]+$": {
          "$ref": "#/definitions/matrixProperties"
        }
      }
    },
    "stepsTemplate": {
      "type": "object",
      "properties": {
        "parameters": {
          "description": "Step-specific parameters",
          "$ref": "#/definitions/templateParameters"
        },
        "steps": {
          "description": "A list of steps to run",
          "$ref": "#/definitions/steps"
        }
      },
      "additionalProperties": false
    },
    "steps": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/step"
      }
    },
    "step": {
      "anyOf": [
        {
          "type": "object",
          "$ref": "#/definitions/task"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "description": "An inline script",
              "$ref": "#/definitions/string"
            },
            "failOnStderr": {
              "description": "Fail the task if output is sent to Stderr?",
              "$ref": "#/definitions/string"
            },
            "workingDirectory": {
              "description": "Start the script with this working directory",
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false,
          "required": [
            "script"
          ]
        },
        {
          "type": "object",
          "properties": {
            "powershell": {
              "description": "Inline PowerShell or reference to a PowerShell file",
              "$ref": "#/definitions/string"
            },
            "errorActionPreference": {
              "$ref": "#/definitions/string"
            },
            "failOnStderr": {
              "description": "Fail the task if output is sent to Stderr?",
              "$ref": "#/definitions/string"
            },
            "ignoreLASTEXITCODE": {
              "description": "Check the final exit code of the script to determine whether the step succeeded?",
              "$ref": "#/definitions/string"
            },
            "workingDirectory": {
              "description": "Start the script with this working directory",
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false,
          "required": [
            "powershell"
          ]
        },
        {
          "type": "object",
          "properties": {
            "pwsh": {
              "description": "Inline PowerShell or reference to a PowerShell file",
              "$ref": "#/definitions/string"
            },
            "errorActionPreference": {
              "$ref": "#/definitions/string"
            },
            "failOnStderr": {
              "description": "Fail the task if output is sent to Stderr?",
              "$ref": "#/definitions/string"
            },
            "ignoreLASTEXITCODE": {
              "description": "Check the final exit code of the script to determine whether the step succeeded?",
              "$ref": "#/definitions/string"
            },
            "workingDirectory": {
              "description": "Start the script with this working directory",
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false,
          "required": [
            "pwsh"
          ]
        },
        {
          "type": "object",
          "properties": {
            "bash": {
              "description": "An inline script",
              "$ref": "#/definitions/string"
            },
            "failOnStderr": {
              "description": "Fail the task if output is sent to Stderr?",
              "$ref": "#/definitions/string"
            },
            "workingDirectory": {
              "description": "Start the script with this working directory",
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false,
          "required": [
            "bash"
          ]
        },
        {
          "type": "object",
          "properties": {
            "checkout": {
              "description": "Alias of the repository resource to check out or 'none'",
              "$ref": "#/definitions/string"
            },
            "clean": {
              "description": "Scorch the repo before fetching?",
              "enum": [
                "true",
                "false"
              ],
              "$ref": "#/definitions/string"
            },
            "fetchDepth": {
              "description": "Depth of Git graph to fetch",
              "$ref": "#/definitions/string"
            },
            "lfs": {
              "description": "Fetch Git-LFS objects?",
              "$ref": "#/definitions/string"
            },
            "persistCredentials": {
              "description": "Keep credentials available for later use?",
              "$ref": "#/definitions/string"
            },
            "submodules": {
              "description": "Check out Git submodules?",
              "$ref": "#/definitions/string"
            },
            "path": {
              "description": "Path of the repository to check out",
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "download": {
              "description": "Reference to the pipeline",
              "$ref": "#/definitions/nonEmptyString"
            },
            "artifact": {
              "description": "Name of the artifact to download",
              "$ref": "#/definitions/nonEmptyString"
            },
            "patterns": {
              "description": "Pattern to download files from artifact",
              "$ref": "#/definitions/nonEmptyString"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false,
          "required": [
            "download"
          ]
        },
        {
          "type": "object",
          "properties": {
            "downloadBuild": {
              "description": "ID for the build resource",
              "$ref": "#/definitions/nonEmptyString"
            },
            "artifact": {
              "description": "Name of the artifact to download",
              "$ref": "#/definitions/string"
            },
            "path": {
              "description": "Path to download the artifact into",
              "$ref": "#/definitions/string"
            },
            "patterns": {
              "description": "Downloads the files which matches the patterns",
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "getPackage": {
              "description": "ID for the package resource",
              "$ref": "#/definitions/nonEmptyString"
            },
            "path": {
              "description": "Path to download the package into",
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "upload": {
              "$comment": "This option is deprecated, use `publish` instead",
              "doNotSuggest": true,
              "$ref": "#/definitions/string"
            },
            "artifact": {
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "publish": {
              "$ref": "#/definitions/string"
            },
            "artifact": {
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "template": {
              "description": "Reference to a template for this step",
              "$ref": "#/definitions/nonEmptyString"
            },
            "parameters": {
              "description": "Parameters used in a step template",
              "$ref": "#/definitions/mapping"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "restoreCache": {
              "description": "The name of the key",
              "$ref": "#/definitions/nonEmptyString"
            },
            "path": {
              "description": "The folder path to download the cache to. This can be a fully-qualified path or a path relative to the root of the repository. Wildcards are not supported.",
              "$ref": "#/definitions/nonEmptyString"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false,
          "required": [
            "restoreCache",
            "path"
          ]
        },
        {
          "type": "object",
          "properties": {
            "saveCache": {
              "description": "The name of the key",
              "$ref": "#/definitions/nonEmptyString"
            },
            "path": {
              "description": "The folder or file path to publish. This can be a fully-qualified path or a path relative to the root of the repository. Wildcards are not supported.",
              "$ref": "#/definitions/nonEmptyString"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false,
          "required": [
            "saveCache",
            "path"
          ]
        },
        {
          "type": "object",
          "properties": {
            "reviewApp": {
              "$ref": "#/definitions/string"
            },
            "condition": {
              "description": "Evaluate this condition expression to determine whether to run this task",
              "$ref": "#/definitions/string"
            },
            "continueOnError": {
              "description": "Continue running even on failure?",
              "$ref": "#/definitions/boolean"
            },
            "displayName": {
              "description": "Human-readable name for the task",
              "$ref": "#/definitions/string"
            },
            "target": {
              "description": "Environment in which to run this task",
              "$ref": "#/definitions/stepTarget"
            },
            "enabled": {
              "description": "Run this task when the job runs?",
              "$ref": "#/definitions/boolean"
            },
            "env": {
              "description": "Variables to map into the process's environment",
              "$ref": "#/definitions/mappingOfStringString"
            },
            "name": {
              "description": "ID of the step",
              "$ref": "#/definitions/referenceName"
            },
            "timeoutInMinutes": {
              "description": "Time to wait for this task to complete before the server kills it",
              "$ref": "#/definitions/nonEmptyString"
            },
            "retryCountOnTaskFailure": {
              "description": "Number of retries if the task fails",
              "$ref": "#/definitions/string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "stepTarget": {
      "description": "Step target",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "container": {
              "description": "Container to target (or 'host' for host machine)",
              "$ref": "#/definitions/nonEmptyString"
            },
            "commands": {
              "description": "Set of allowed logging commands ('any' or 'restricted')",
              "enum": [
                "any",
                "restricted"
              ],
              "$ref": "#/definitions/string"
            },
            "settableVariables": {
              "description": "Restrictions on which variables that can be set",
              "$ref": "#/definitions/variableRestrictions"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "variableRestrictions": {
      "anyOf": [
        {
          "type": "string",
          
          "pattern": "^none$"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nonEmptyString"
          }
        }
      ]
    },
    "jobDecoratorSteps": {
      "type": "object",
      "properties": {
        "steps": {
          "description": "A list of steps to run in this job",
          "$ref": "#/definitions/tasks"
        }
      },
      "additionalProperties": false
    },
    "tasks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/task"
      }
    },
    "taskBase": {
      "type": "object",
      "properties": {
        "condition": {
          "description": "Evaluate this condition expression to determine whether to run this task",
          "$ref": "#/definitions/string"
        },
        "continueOnError": {
          "description": "Continue running even on failure?",
          "$ref": "#/definitions/boolean"
        },
        "displayName": {
          "description": "Human-readable name for the task",
          "$ref": "#/definitions/string"
        },
        "target": {
          "description": "Environment in which to run this task",
          "$ref": "#/definitions/stepTarget"
        },
        "enabled": {
          "description": "Run this task when the job runs?",
          "$ref": "#/definitions/boolean"
        },
        "env": {
          "description": "Variables to map into the process's environment",
          "$ref": "#/definitions/mappingOfStringString"
        },
        "name": {
          "description": "ID of the step",
          "$ref": "#/definitions/referenceName"
        },
        "timeoutInMinutes": {
          "description": "Time to wait for this task to complete before the server kills it",
          "$ref": "#/definitions/nonEmptyString"
        },
        "retryCountOnTaskFailure": {
          "description": "Number of retries if the task fails",
          "$ref": "#/definitions/string"
        }
      },
      "additionalProperties": false
    },
    "jobContinueOnError": {
      "type": "string"
    },
    "jobDependsOn": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/string"
          }
        }
      ]
    },
    "referenceName": {
      "type": "string",
      "pattern": "^[-_A-Za-z0-9]*$"
    },
    "templateContext": {
      "type": "object",
      "additionalProperties": true
    },
    "boolean": {
      "anyOf": [
        {
          "type": "string",
          
          "pattern": "^true$"
        },
        {
          "type": "string",
          
          "pattern": "^y$"
        },
        {
          "type": "string",
          
          "pattern": "^yes$"
        },
        {
          "type": "string",
          
          "pattern": "^on$"
        },
        {
          "type": "string",
          
          "pattern": "^false$"
        },
        {
          "type": "string",
          
          "pattern": "^n$"
        },
        {
          "type": "string",
          
          "pattern": "^no$"
        },
        {
          "type": "string",
          
          "pattern": "^off$"
        }
      ]
    },
    "string_allowExpressions": {
      "type": "string"
    },
    "nonEmptyString": {
      "type": "string"
    },
    "sequenceOfNonEmptyString": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/nonEmptyString"
      }
    },
    "mappingOfStringString": {
      "type": "object",
      "additionalProperties": true
    },
    "any_allowExpressions": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/any"
          }
        },
        {
          "type": "object",
          "additionalProperties": true
        }
      ]
    },
    "task": {
      "type": "object",
      "properties": {
        "task": {
          "anyOf": [
            {
              "description": "Run a PowerShell script on Linux, macOS, or Windows",
              "doNotSuggest": false,
              
              "enum": [
                "PowerShell@2"
              ]
            },
            {
              "description": "Run a PowerShell script",
              "doNotSuggest": false,
              
              "enum": [
                "PowerShell@1"
              ]
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              
              "enum": [
                "AzurePowerShell@4"
              ]
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              
              "enum": [
                "AzurePowerShell@5"
              ]
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              
              "enum": [
                "AzurePowerShell@2"
              ]
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              
              "enum": [
                "AzurePowerShell@3"
              ]
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              
              "enum": [
                "AzurePowerShell@1"
              ]
            },
            {
              "description": "Run scripts and make changes to a MySQL Database",
              "doNotSuggest": false,
              
              "enum": [
                "MysqlDeploymentOnMachineGroup@1"
              ]
            },
            {
              "description": "Authentication task for the pip client used for installing Python distributions",
              "doNotSuggest": false,
              
              "enum": [
                "PipAuthenticate@1"
              ]
            },
            {
              "description": "Authentication task for the pip client used for installing Python distributions",
              "doNotSuggest": false,
              
              "enum": [
                "PipAuthenticate@0"
              ]
            },
            {
              "description": "Build, test, and deploy with Apache Maven",
              "doNotSuggest": false,
              
              "enum": [
                "Maven@2"
              ]
            },
            {
              "description": "Build, test, and deploy with Apache Maven",
              "doNotSuggest": false,
              
              "enum": [
                "Maven@3"
              ]
            },
            {
              "description": "Build with Apache Maven",
              "doNotSuggest": false,
              
              "enum": [
                "Maven@1"
              ]
            },
            {
              "description": "Build, test, package, or publish a dotnet application, or run a custom dotnet command",
              "doNotSuggest": false,
              
              "enum": [
                "DotNetCoreCLI@2"
              ]
            },
            {
              "description": "Build, test and publish using dotnet core command-line.",
              "$comment": "DotNetCoreCLI is deprecated - Build, test and publish using dotnet core command-line.",
              "doNotSuggest": true,
              
              "enum": [
                "DotNetCoreCLI@0"
              ]
            },
            {
              "description": "Build, test and publish using dotnet core command-line.",
              "doNotSuggest": false,
              
              "enum": [
                "DotNetCoreCLI@1"
              ]
            },
            {
              "description": "This task is deprecated. Use 'NuGet' instead.",
              "$comment": "XamarinComponentRestore is deprecated - This task is deprecated. Use 'NuGet' instead.",
              "doNotSuggest": true,
              
              "enum": [
                "XamarinComponentRestore@0"
              ]
            },
            {
              "description": "Update Azure App Service using Web Deploy / Kudu REST APIs",
              "doNotSuggest": false,
              
              "enum": [
                "AzureRmWebAppDeployment@2"
              ]
            },
            {
              "description": "Deploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
              "doNotSuggest": false,
              
              "enum": [
                "AzureRmWebAppDeployment@4"
              ]
            },
            {
              "description": "Deploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
              "doNotSuggest": false,
              
              "enum": [
                "AzureRmWebAppDeployment@3"
              ]
            },
            {
              "description": "Execute PowerShell scripts on remote machines using PSSession and Invoke-Command for remoting",
              "doNotSuggest": false,
              
              "enum": [
                "PowerShellOnTargetMachines@3"
              ]
            },
            {
              "description": "Execute PowerShell scripts on remote machine(s)",
              "doNotSuggest": false,
              
              "enum": [
                "PowerShellOnTargetMachines@1"
              ]
            },
            {
              "description": "Execute PowerShell scripts on remote machine(s)",
              "doNotSuggest": false,
              
              "enum": [
                "PowerShellOnTargetMachines@2"
              ]
            },
            {
              "description": "Publish Cobertura or JaCoCo code coverage results from a build",
              "doNotSuggest": false,
              
              "enum": [
                "PublishCodeCoverageResults@1"
              ]
            },
            {
              "description": "Deprecated: This task and it’s companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent job setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests.",
              "$comment": "RunVisualStudioTestsusingTestAgent is deprecated - Deprecated: This task and it’s companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent job setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests.",
              "doNotSuggest": true,
              
              "enum": [
                "RunVisualStudioTestsusingTestAgent@1"
              ]
            },
            {
              "description": "Pause deployment and wait for manual intervention",
              "doNotSuggest": false,
              
              "enum": [
                "ManualIntervention@8"
              ]
            },
            {
              "description": "Install an Apple provisioning profile required to build on a macOS agent machine",
              "doNotSuggest": false,
              
              "enum": [
                "InstallAppleProvisioningProfile@1"
              ]
            },
            {
              "description": "Install an Apple provisioning profile required to build on a macOS agent",
              "doNotSuggest": false,
              
              "enum": [
                "InstallAppleProvisioningProfile@0"
              ]
            },
            {
              "description": "[DEPRECATED] Finish the analysis and upload the results to SonarQube",
              "$comment": "SonarQubePostTest is deprecated - [DEPRECATED] Finish the analysis and upload the results to SonarQube",
              "doNotSuggest": true,
              
              "enum": [
                "SonarQubePostTest@1"
              ]
            },
            {
              "description": "Create and upload an sdist or wheel to a PyPI-compatible index using Twine",
              "doNotSuggest": false,
              
              "enum": [
                "PyPIPublisher@0"
              ]
            },
            {
              "description": "Run scripts with Knife commands on your Chef workstation",
              "$comment": "ChefKnife is deprecated - Run scripts with Knife commands on your Chef workstation",
              "doNotSuggest": true,
              
              "enum": [
                "ChefKnife@1"
              ]
            },
            {
              "description": "Find in cache or download a specific version of Go and add it to the PATH",
              "doNotSuggest": false,
              
              "enum": [
                "GoTool@0"
              ]
            },
            {
              "description": "Generate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)",
              "$comment": "XcodePackageiOS is deprecated - Generate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)",
              "doNotSuggest": true,
              
              "enum": [
                "XcodePackageiOS@0"
              ]
            },
            {
              "description": "Get, build, or test a Go application, or run a custom Go command",
              "doNotSuggest": false,
              
              "enum": [
                "Go@0"
              ]
            },
            {
              "description": "Publish Pipeline Metadata to Evidence store",
              "doNotSuggest": false,
              
              "enum": [
                "PublishPipelineMetadata@0"
              ]
            },
            {
              "description": "Build, tag, push, or run Docker images, or run a Docker command",
              "doNotSuggest": false,
              
              "enum": [
                "Docker@1"
              ]
            },
            {
              "description": "Build or push Docker images, login or logout, start or stop containers, or run a Docker command",
              "doNotSuggest": false,
              
              "enum": [
                "Docker@2"
              ]
            },
            {
              "description": "Build, tag, push, or run Docker images, or run a Docker command",
              "doNotSuggest": false,
              
              "enum": [
                "Docker@0"
              ]
            },
            {
              "description": "Queue a job on a Jenkins server",
              "doNotSuggest": false,
              
              "enum": [
                "JenkinsQueueJob@2"
              ]
            },
            {
              "description": "Queue a job on a Jenkins server",
              "doNotSuggest": false,
              
              "enum": [
                "JenkinsQueueJob@1"
              ]
            },
            {
              "description": "Upload files using FTP",
              "doNotSuggest": false,
              
              "enum": [
                "FtpUpload@2"
              ]
            },
            {
              "description": "Upload files using FTP",
              "doNotSuggest": false,
              
              "enum": [
                "FtpUpload@1"
              ]
            },
            {
              "description": "Copy files to remote Windows machines",
              "doNotSuggest": false,
              
              "enum": [
                "WindowsMachineFileCopy@1"
              ]
            },
            {
              "description": "Copy files to remote Windows machines",
              "doNotSuggest": false,
              
              "enum": [
                "WindowsMachineFileCopy@2"
              ]
            },
            {
              "description": "[Deprecated]  Use Gradle",
              "$comment": "AndroidBuild is deprecated - [Deprecated]  Use Gradle",
              "doNotSuggest": true,
              
              "enum": [
                "AndroidBuild@1"
              ]
            },
            {
              "description": "Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
              "doNotSuggest": false,
              
              "enum": [
                "TwineAuthenticate@1"
              ]
            },
            {
              "description": "Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
              "doNotSuggest": false,
              
              "enum": [
                "TwineAuthenticate@0"
              ]
            },
            {
              "description": "Deploy a website or web application using Web Deploy",
              "doNotSuggest": false,
              
              "enum": [
                "IISWebAppDeploymentOnMachineGroup@0"
              ]
            },
            {
              "description": "Run a Python file or inline script",
              "doNotSuggest": false,
              
              "enum": [
                "PythonScript@0"
              ]
            },
            {
              "description": "Install Helm on an agent machine",
              "doNotSuggest": false,
              
              "enum": [
                "HelmInstaller@1"
              ]
            },
            {
              "description": "Install Helm and Kubernetes on an agent machine",
              "doNotSuggest": false,
              
              "enum": [
                "HelmInstaller@0"
              ]
            },
            {
              "description": "[Deprecated] Upgrade to free version of Xamarin: https://store.xamarin.com",
              "$comment": "XamarinLicense is deprecated - [Deprecated] Upgrade to free version of Xamarin: https://store.xamarin.com",
              "doNotSuggest": true,
              
              "enum": [
                "XamarinLicense@1"
              ]
            },
            {
              "description": "This version of the task is deprecated, use NuGetAuthenticateV1 instead. Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 2.1.400, or MSBuild >= 15.8.166.59604.",
              "$comment": "NuGetAuthenticate is deprecated - This version of the task is deprecated, use NuGetAuthenticateV1 instead. Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 2.1.400, or MSBuild >= 15.8.166.59604.",
              "doNotSuggest": true,
              
              "enum": [
                "NuGetAuthenticate@0"
              ]
            },
            {
              "description": "Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 6, or MSBuild >= 15.8.166.59604",
              "doNotSuggest": false,
              
              "enum": [
                "NuGetAuthenticate@1"
              ]
            },
            {
              "description": "Restore your nuget packages using dotnet CLI",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadGitHubNugetPackage@1"
              ]
            },
            {
              "description": "Provides credentials for Azure Artifacts feeds and external maven repositories",
              "doNotSuggest": false,
              
              "enum": [
                "MavenAuthenticate@0"
              ]
            },
            {
              "description": "Use this task under deploy phase provider to create a resource dynamically",
              "doNotSuggest": false,
              
              "enum": [
                "ReviewApp@0"
              ]
            },
            {
              "description": "Acquire a specific version of Java from a user-supplied Azure blob or the tool cache and sets JAVA_HOME",
              "doNotSuggest": false,
              
              "enum": [
                "JavaToolInstaller@0"
              ]
            },
            {
              "description": "Deploy to Chef environments by editing environment attributes",
              "$comment": "Chef is deprecated - Deploy to Chef environments by editing environment attributes",
              "doNotSuggest": true,
              
              "enum": [
                "Chef@1"
              ]
            },
            {
              "description": "Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications",
              "doNotSuggest": false,
              
              "enum": [
                "AzureFunctionApp@1"
              ]
            },
            {
              "description": "Don't use this task if you're also using the npm task. Provides npm credentials to an .npmrc file in your repository for the scope of the build. This enables npm task runners like gulp and Grunt to authenticate with private registries.",
              "doNotSuggest": false,
              
              "enum": [
                "npmAuthenticate@0"
              ]
            },
            {
              "description": "Build with MSBuild",
              "doNotSuggest": false,
              
              "enum": [
                "MSBuild@1"
              ]
            },
            {
              "description": "Build a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
              "doNotSuggest": false,
              
              "enum": [
                "PackerBuild@1"
              ]
            },
            {
              "description": "Build a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
              "doNotSuggest": false,
              
              "enum": [
                "PackerBuild@0"
              ]
            },
            {
              "description": "Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "$comment": "NuGetPackager is deprecated - Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "doNotSuggest": true,
              
              "enum": [
                "NuGetPackager@0"
              ]
            },
            {
              "description": "Automatically updates the versions of a packaged Service Fabric application.",
              "doNotSuggest": false,
              
              "enum": [
                "ServiceFabricUpdateAppVersions@1"
              ]
            },
            {
              "description": "Automatically update portions of application and service manifests in a packaged Azure Service Fabric application",
              "doNotSuggest": false,
              
              "enum": [
                "ServiceFabricUpdateManifests@2"
              ]
            },
            {
              "description": "Install a specified version of Duffle for installing and managing CNAB bundles",
              "doNotSuggest": false,
              
              "enum": [
                "DuffleInstaller@0"
              ]
            },
            {
              "description": "Observe the configured Azure Monitor rules for active alerts",
              "doNotSuggest": false,
              
              "enum": [
                "AzureMonitor@1"
              ]
            },
            {
              "description": "Observe the configured classic Azure Monitor rules for active alerts",
              "$comment": "AzureMonitor is deprecated - Observe the configured classic Azure Monitor rules for active alerts",
              "doNotSuggest": true,
              
              "enum": [
                "AzureMonitor@0"
              ]
            },
            {
              "description": "Connect or disconnect an Azure virtual machine's network interface to a Load Balancer's back end address pool",
              "doNotSuggest": false,
              
              "enum": [
                "AzureNLBManagement@1"
              ]
            },
            {
              "description": "Run an Apache JMeter load test in the cloud",
              "$comment": "ApacheJMeterLoadTest is deprecated - Run an Apache JMeter load test in the cloud",
              "doNotSuggest": true,
              
              "enum": [
                "ApacheJMeterLoadTest@1"
              ]
            },
            {
              "description": "Build, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.",
              "doNotSuggest": false,
              
              "enum": [
                "DockerCompose@0"
              ]
            },
            {
              "description": "Configure alerts on available metrics for an Azure resource (Deprecated)",
              "doNotSuggest": false,
              
              "enum": [
                "AzureMonitorAlerts@0"
              ]
            },
            {
              "description": "[Deprecated] Test mobile apps with Xamarin Test Cloud using Xamarin.UITest. Instead, use the 'App Center test' task.",
              "$comment": "XamarinTestCloud is deprecated - [Deprecated] Test mobile apps with Xamarin Test Cloud using Xamarin.UITest. Instead, use the 'App Center test' task.",
              "doNotSuggest": true,
              
              "enum": [
                "XamarinTestCloud@1"
              ]
            },
            {
              "description": "Deploy an Azure Service Fabric application to a cluster",
              "doNotSuggest": false,
              
              "enum": [
                "ServiceFabricDeploy@1"
              ]
            },
            {
              "description": "Build, test, or archive an Xcode workspace on macOS. Optionally package an app.",
              "doNotSuggest": false,
              
              "enum": [
                "Xcode@5"
              ]
            },
            {
              "description": "Build an Xcode workspace on macOS",
              "doNotSuggest": false,
              
              "enum": [
                "Xcode@3"
              ]
            },
            {
              "description": "Build, test, or archive an Xcode workspace on macOS. Optionally package an app.",
              "doNotSuggest": false,
              
              "enum": [
                "Xcode@4"
              ]
            },
            {
              "description": "Build an Xcode workspace on Mac OS",
              "doNotSuggest": false,
              
              "enum": [
                "Xcode@2"
              ]
            },
            {
              "description": "Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "$comment": "NuGetPublisher is deprecated - Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "doNotSuggest": true,
              
              "enum": [
                "NuGetPublisher@0"
              ]
            },
            {
              "description": "Execute a work item query and check the number of items returned",
              "doNotSuggest": false,
              
              "enum": [
                "queryWorkItems@0"
              ]
            },
            {
              "description": "Deploy containers to Azure App Service",
              "doNotSuggest": false,
              
              "enum": [
                "AzureWebAppContainer@1"
              ]
            },
            {
              "description": "Deploy a SQL Server database using DACPAC or SQL scripts",
              "doNotSuggest": false,
              
              "enum": [
                "SqlDacpacDeploymentOnMachineGroup@0"
              ]
            },
            {
              "description": "Cache files between runs",
              "doNotSuggest": false,
              
              "enum": [
                "CacheBeta@1"
              ]
            },
            {
              "description": "Cache files between runs",
              "doNotSuggest": false,
              
              "enum": [
                "Cache@2"
              ]
            },
            {
              "description": "Cache files between runs",
              "doNotSuggest": false,
              
              "enum": [
                "CacheBeta@0"
              ]
            },
            {
              "description": "Build with the CMake cross-platform build system",
              "doNotSuggest": false,
              
              "enum": [
                "CMake@1"
              ]
            },
            {
              "description": "Test app packages with Visual Studio App Center",
              "doNotSuggest": false,
              
              "enum": [
                "AppCenterTest@1"
              ]
            },
            {
              "description": "Test mobile app packages with Visual Studio Mobile Center.",
              "doNotSuggest": false,
              
              "enum": [
                "VSMobileCenterTest@0"
              ]
            },
            {
              "description": "Download a secure file to the agent machine",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadSecureFile@1"
              ]
            },
            {
              "description": "Use the specified version of Ruby from the tool cache, optionally adding it to the PATH",
              "doNotSuggest": false,
              
              "enum": [
                "UseRubyVersion@0"
              ]
            },
            {
              "description": "Run the Grunt JavaScript task runner",
              "doNotSuggest": false,
              
              "enum": [
                "Grunt@0"
              ]
            },
            {
              "description": "Deploy an Azure SQL Database using DACPAC or run scripts using SQLCMD",
              "doNotSuggest": false,
              
              "enum": [
                "SqlAzureDacpacDeployment@1"
              ]
            },
            {
              "description": "Uses container-structure-test (https://github.com/GoogleContainerTools/container-structure-test) to validate the structure of an image based on four categories of tests - command tests, file existence tests, file content tests and metadata tests",
              "doNotSuggest": false,
              
              "enum": [
                "ContainerStructureTest@0"
              ]
            },
            {
              "description": "Deploy using MSDeploy, then create/update websites and app pools",
              "$comment": "IISWebAppDeployment is deprecated - Deploy using MSDeploy, then create/update websites and app pools",
              "doNotSuggest": true,
              
              "enum": [
                "IISWebAppDeployment@1"
              ]
            },
            {
              "description": "Run a load test in the cloud with Azure Pipelines",
              "$comment": "CloudLoadTest is deprecated - Run a load test in the cloud with Azure Pipelines",
              "doNotSuggest": true,
              
              "enum": [
                "CloudLoadTest@1"
              ]
            },
            {
              "description": "Install Kubectl on agent machine",
              "doNotSuggest": false,
              
              "enum": [
                "KubectlInstaller@0"
              ]
            },
            {
              "description": "Run a command line script using Bash on Linux and macOS and cmd.exe on Windows",
              "doNotSuggest": false,
              
              "enum": [
                "CmdLine@2"
              ]
            },
            {
              "description": "Run a command line with arguments",
              "doNotSuggest": false,
              
              "enum": [
                "CmdLine@1"
              ]
            },
            {
              "description": "Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "$comment": "NuGet is deprecated - Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "doNotSuggest": true,
              
              "enum": [
                "NuGet@0"
              ]
            },
            {
              "description": "Container Build Task",
              "doNotSuggest": false,
              
              "enum": [
                "ContainerBuild@0"
              ]
            },
            {
              "description": "Restore, pack, or push NuGet packages, or run a NuGet command. Supports NuGet.org and authenticated feeds like Azure Artifacts and MyGet. Uses NuGet.exe and works with .NET Framework apps. For .NET Core and .NET Standard apps, use the .NET Core task.",
              "doNotSuggest": false,
              
              "enum": [
                "NuGetCommand@2"
              ]
            },
            {
              "description": "Restores NuGet packages in preparation for a Visual Studio Build step.",
              "doNotSuggest": false,
              
              "enum": [
                "NuGetRestore@1"
              ]
            },
            {
              "description": "Installs or restores missing NuGet packages. Use NuGetAuthenticate@0 task for latest capabilities.",
              "doNotSuggest": false,
              
              "enum": [
                "NuGetInstaller@0"
              ]
            },
            {
              "description": "Delay further execution of a workflow by a fixed time",
              "doNotSuggest": false,
              
              "enum": [
                "Delay@1"
              ]
            },
            {
              "description": "Build an iOS app with Xamarin on macOS",
              "doNotSuggest": false,
              
              "enum": [
                "XamariniOS@2"
              ]
            },
            {
              "description": "Build an iOS app with Xamarin on macOS",
              "doNotSuggest": false,
              
              "enum": [
                "XamariniOS@1"
              ]
            },
            {
              "description": "Publish test results to Azure Pipelines",
              "doNotSuggest": false,
              
              "enum": [
                "PublishTestResults@2"
              ]
            },
            {
              "description": "Publish test results to Azure Pipelines",
              "doNotSuggest": false,
              
              "enum": [
                "PublishTestResults@1"
              ]
            },
            {
              "description": "Copy files to Azure Blob Storage or virtual machines",
              "doNotSuggest": false,
              
              "enum": [
                "AzureFileCopy@1"
              ]
            },
            {
              "description": "Copy files to Azure Blob Storage or virtual machines",
              "doNotSuggest": false,
              
              "enum": [
                "AzureFileCopy@4"
              ]
            },
            {
              "description": "Copy files to Azure Blob Storage or virtual machines",
              "doNotSuggest": false,
              
              "enum": [
                "AzureFileCopy@2"
              ]
            },
            {
              "description": "Copy files to Azure Blob Storage or virtual machines",
              "doNotSuggest": false,
              
              "enum": [
                "AzureFileCopy@3"
              ]
            },
            {
              "description": "Index your source code and publish symbols to a file share or Azure Artifacts symbol server",
              "doNotSuggest": false,
              
              "enum": [
                "PublishSymbols@2"
              ]
            },
            {
              "description": "Index your source code and publish symbols to a file share",
              "doNotSuggest": false,
              
              "enum": [
                "PublishSymbols@1"
              ]
            },
            {
              "description": "Copy files or build artifacts to a remote machine over SSH",
              "doNotSuggest": false,
              
              "enum": [
                "CopyFilesOverSSH@0"
              ]
            },
            {
              "description": "Build using a Gradle wrapper script",
              "doNotSuggest": false,
              
              "enum": [
                "Gradle@3"
              ]
            },
            {
              "description": "Build using a Gradle wrapper script",
              "doNotSuggest": false,
              
              "enum": [
                "Gradle@2"
              ]
            },
            {
              "description": "Build using a Gradle wrapper script",
              "doNotSuggest": false,
              
              "enum": [
                "Gradle@1"
              ]
            },
            {
              "description": "Distribute app builds to testers and users via Visual Studio App Center",
              "doNotSuggest": false,
              
              "enum": [
                "AppCenterDistribute@1"
              ]
            },
            {
              "description": "Distribute app builds to testers and users via Visual Studio App Center",
              "doNotSuggest": false,
              
              "enum": [
                "AppCenterDistribute@2"
              ]
            },
            {
              "description": "Distribute app builds to testers and users via Visual Studio App Center",
              "doNotSuggest": false,
              
              "enum": [
                "AppCenterDistribute@3"
              ]
            },
            {
              "description": "Distribute app builds to testers and users via App Center",
              "doNotSuggest": false,
              
              "enum": [
                "AppCenterDistribute@0"
              ]
            },
            {
              "description": "Acquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
              "doNotSuggest": false,
              
              "enum": [
                "NuGetToolInstaller@1"
              ]
            },
            {
              "description": "Acquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
              "doNotSuggest": false,
              
              "enum": [
                "NuGetToolInstaller@0"
              ]
            },
            {
              "description": "Download artifacts produced by a Jenkins job",
              "doNotSuggest": false,
              
              "enum": [
                "JenkinsDownloadArtifacts@1"
              ]
            },
            {
              "description": "Update a function app with a Docker container",
              "doNotSuggest": false,
              
              "enum": [
                "AzureFunctionAppContainer@1"
              ]
            },
            {
              "description": "Decrypt a file using OpenSSL",
              "doNotSuggest": false,
              
              "enum": [
                "DecryptFile@1"
              ]
            },
            {
              "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands",
              "doNotSuggest": false,
              
              "enum": [
                "HelmDeploy@0"
              ]
            },
            {
              "description": "Install an Apple certificate required to build on a macOS agent machine",
              "doNotSuggest": false,
              
              "enum": [
                "InstallAppleCertificate@2"
              ]
            },
            {
              "description": "Install an Apple certificate required to build on a macOS agent",
              "doNotSuggest": false,
              
              "enum": [
                "InstallAppleCertificate@1"
              ]
            },
            {
              "description": "Install an Apple certificate required to build on a macOS agent",
              "doNotSuggest": false,
              
              "enum": [
                "InstallAppleCertificate@0"
              ]
            },
            {
              "description": "Invoke an Azure Function",
              "doNotSuggest": false,
              
              "enum": [
                "AzureFunction@1"
              ]
            },
            {
              "description": "Invoke Azure function as a part of your process.",
              "doNotSuggest": false,
              
              "enum": [
                "AzureFunction@0"
              ]
            },
            {
              "description": "Downloads a GitHub Release from a repository",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadGitHubRelease@0"
              ]
            },
            {
              "description": "Run shell commands or a script on a remote machine using SSH",
              "doNotSuggest": false,
              
              "enum": [
                "SSH@0"
              ]
            },
            {
              "description": "Publish a local directory or file as a named artifact for the current pipeline",
              "$comment": "PublishPipelineArtifact is deprecated - Publish a local directory or file as a named artifact for the current pipeline",
              "doNotSuggest": true,
              
              "enum": [
                "PublishPipelineArtifact@0"
              ]
            },
            {
              "description": "Publish (upload) a file or directory as a named artifact for the current run",
              "doNotSuggest": false,
              
              "enum": [
                "PublishPipelineArtifact@1"
              ]
            },
            {
              "description": "[DEPRECATED] Fetch the Quality Profile from SonarQube to configure the analysis",
              "$comment": "SonarQubePreBuild is deprecated - [DEPRECATED] Fetch the Quality Profile from SonarQube to configure the analysis",
              "doNotSuggest": true,
              
              "enum": [
                "SonarQubePreBuild@1"
              ]
            },
            {
              "description": "Download artifacts from a file share, like \\\\share\\drop",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadFileshareArtifacts@1"
              ]
            },
            {
              "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
              "doNotSuggest": false,
              
              "enum": [
                "Kubernetes@1"
              ]
            },
            {
              "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
              "doNotSuggest": false,
              
              "enum": [
                "Kubernetes@0"
              ]
            },
            {
              "description": "Build and deploy an Azure IoT Edge image",
              "doNotSuggest": false,
              
              "enum": [
                "AzureIoTEdge@2"
              ]
            },
            {
              "description": "Deploy a Docker Compose application to an Azure Service Fabric cluster",
              "doNotSuggest": false,
              
              "enum": [
                "ServiceFabricComposeDeploy@0"
              ]
            },
            {
              "description": "Sign and align Android APK files",
              "doNotSuggest": false,
              
              "enum": [
                "AndroidSigning@2"
              ]
            },
            {
              "description": "Sign and align Android APK files",
              "doNotSuggest": false,
              
              "enum": [
                "AndroidSigning@3"
              ]
            },
            {
              "description": "Sign and align Android APK files",
              "doNotSuggest": false,
              
              "enum": [
                "AndroidSigning@1"
              ]
            },
            {
              "description": "Download a named artifact from a pipeline to a local path",
              "$comment": "DownloadPipelineArtifact is deprecated - Download a named artifact from a pipeline to a local path",
              "doNotSuggest": true,
              
              "enum": [
                "DownloadPipelineArtifact@1"
              ]
            },
            {
              "description": "Downloads an artifact associated with a pipeline",
              "$comment": "DownloadPipelineArtifact is deprecated - Downloads an artifact associated with a pipeline",
              "doNotSuggest": true,
              
              "enum": [
                "DownloadPipelineArtifact@0"
              ]
            },
            {
              "description": "Download build and pipeline artifacts",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadPipelineArtifact@2"
              ]
            },
            {
              "description": "Use the specified version of Python from the tool cache, optionally adding it to the PATH",
              "doNotSuggest": false,
              
              "enum": [
                "UsePythonVersion@0"
              ]
            },
            {
              "description": "Run a PowerShell script in the context of an Azure Service Fabric cluster connection",
              "doNotSuggest": false,
              
              "enum": [
                "ServiceFabricPowerShell@1"
              ]
            },
            {
              "description": "Run unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2).",
              "doNotSuggest": false,
              
              "enum": [
                "VSTest@2"
              ]
            },
            {
              "description": "Run tests with Visual Studio test runner",
              "doNotSuggest": false,
              
              "enum": [
                "VSTest@1"
              ]
            },
            {
              "description": "[PREVIEW] Pause a pipeline run to wait for manual interaction. Works only with YAML pipelines.",
              "doNotSuggest": false,
              
              "enum": [
                "ManualValidation@0"
              ]
            },
            {
              "description": "Build with Apache Ant",
              "doNotSuggest": false,
              
              "enum": [
                "Ant@1"
              ]
            },
            {
              "description": "Deprecated: Instead, use the 'Visual Studio Test' task to run unit and functional tests",
              "$comment": "DeployVisualStudioTestAgent is deprecated - Deprecated: Instead, use the 'Visual Studio Test' task to run unit and functional tests",
              "doNotSuggest": true,
              
              "enum": [
                "DeployVisualStudioTestAgent@2"
              ]
            },
            {
              "description": "Deploy and configure Test Agent to run tests on a set of machines",
              "doNotSuggest": false,
              
              "enum": [
                "DeployVisualStudioTestAgent@1"
              ]
            },
            {
              "description": "Create and activate a Conda environment",
              "doNotSuggest": false,
              
              "enum": [
                "CondaEnvironment@0"
              ]
            },
            {
              "description": "This task is deprecated. Use `conda` directly in script to work with Anaconda environments.",
              "$comment": "CondaEnvironment is deprecated - This task is deprecated. Use `conda` directly in script to work with Anaconda environments.",
              "doNotSuggest": true,
              
              "enum": [
                "CondaEnvironment@1"
              ]
            },
            {
              "description": "Run a Windows command or batch script and optionally allow it to change the environment",
              "doNotSuggest": false,
              
              "enum": [
                "BatchScript@1"
              ]
            },
            {
              "description": "Install npm packages from GitHub.",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadGithubNpmPackage@1"
              ]
            },
            {
              "description": "Build with MSBuild and set the Visual Studio version property",
              "doNotSuggest": false,
              
              "enum": [
                "VSBuild@1"
              ]
            },
            {
              "description": "Download Azure Key Vault secrets",
              "doNotSuggest": false,
              
              "enum": [
                "AzureKeyVault@2"
              ]
            },
            {
              "description": "Download Azure Key Vault secrets",
              "doNotSuggest": false,
              
              "enum": [
                "AzureKeyVault@1"
              ]
            },
            {
              "description": "Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              "doNotSuggest": false,
              
              "enum": [
                "DotNetCoreInstaller@0"
              ]
            },
            {
              "description": "Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              "$comment": "DotNetCoreInstaller is deprecated - Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              "doNotSuggest": true,
              
              "enum": [
                "DotNetCoreInstaller@1"
              ]
            },
            {
              "description": "Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.",
              "doNotSuggest": false,
              
              "enum": [
                "UseDotNet@2"
              ]
            },
            {
              "description": "Start, stop, restart, slot swap, slot delete, install site extensions or enable continuous monitoring for an Azure App Service",
              "doNotSuggest": false,
              
              "enum": [
                "AzureAppServiceManage@0"
              ]
            },
            {
              "description": "Install Azure Func Core Tools",
              "doNotSuggest": false,
              
              "enum": [
                "FuncToolsInstaller@0"
              ]
            },
            {
              "description": "Replace tokens with variable values in XML or JSON configuration files",
              "doNotSuggest": false,
              
              "enum": [
                "FileTransform@1"
              ]
            },
            {
              "description": "Replace tokens with variable values in XML or JSON configuration files",
              "doNotSuggest": false,
              
              "enum": [
                "FileTransform@2"
              ]
            },
            {
              "description": "Extract a variety of archive and compression files such as .7z, .rar, .tar.gz, and .zip",
              "doNotSuggest": false,
              
              "enum": [
                "ExtractFiles@1"
              ]
            },
            {
              "description": "Build an Android app with Xamarin",
              "doNotSuggest": false,
              
              "enum": [
                "XamarinAndroid@1"
              ]
            },
            {
              "description": "[DEPRECATED] Use the Copy Files task and the Publish Build Artifacts task instead",
              "$comment": "CopyPublishBuildArtifacts is deprecated - [DEPRECATED] Use the Copy Files task and the Publish Build Artifacts task instead",
              "doNotSuggest": true,
              
              "enum": [
                "CopyPublishBuildArtifacts@1"
              ]
            },
            {
              "description": "Download a package from a package management feed in Azure Artifacts",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadPackage@1"
              ]
            },
            {
              "description": "Download a package from a package management feed in Azure Artifacts",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadPackage@0"
              ]
            },
            {
              "description": "Deploy an Azure Resource Manager (ARM) template to a resource group and manage virtual machines",
              "doNotSuggest": false,
              
              "enum": [
                "AzureResourceGroupDeployment@2"
              ]
            },
            {
              "description": "Deploy an Azure Resource Manager (ARM) template to all the deployment scopes",
              "doNotSuggest": false,
              
              "enum": [
                "AzureResourceManagerTemplateDeployment@3"
              ]
            },
            {
              "description": "Deploy, start, stop, delete Azure Resource Groups",
              "$comment": "AzureResourceGroupDeployment is deprecated - Deploy, start, stop, delete Azure Resource Groups",
              "doNotSuggest": true,
              
              "enum": [
                "AzureResourceGroupDeployment@1"
              ]
            },
            {
              "description": "Invoke REST API as a part of your process.",
              "doNotSuggest": false,
              
              "enum": [
                "InvokeRESTAPI@0"
              ]
            },
            {
              "description": "Invoke a REST API as a part of your pipeline.",
              "doNotSuggest": false,
              
              "enum": [
                "InvokeRESTAPI@1"
              ]
            },
            {
              "description": "Compress files into .7z, .tar.gz, or .zip",
              "doNotSuggest": false,
              
              "enum": [
                "ArchiveFiles@2"
              ]
            },
            {
              "description": "Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.",
              "doNotSuggest": false,
              
              "enum": [
                "ArchiveFiles@1"
              ]
            },
            {
              "description": "Write a comment to your Github entity i.e. issue or a Pull Request (PR)",
              "doNotSuggest": false,
              
              "enum": [
                "GitHubComment@0"
              ]
            },
            {
              "description": "Copy files from a source folder to a target folder using patterns matching file paths (not folder paths)",
              "doNotSuggest": false,
              
              "enum": [
                "CopyFiles@2"
              ]
            },
            {
              "description": "Copy files from source folder to target folder using minimatch patterns (The minimatch patterns will only match file paths, not folder paths)",
              "doNotSuggest": false,
              
              "enum": [
                "CopyFiles@1"
              ]
            },
            {
              "description": "Run your scripts and make changes to your Azure Database for MySQL",
              "doNotSuggest": false,
              
              "enum": [
                "AzureMysqlDeployment@1"
              ]
            },
            {
              "description": "Install and publish npm packages, or run an npm command. Supports npmjs.com and authenticated registries like Azure Artifacts.",
              "doNotSuggest": false,
              
              "enum": [
                "Npm@1"
              ]
            },
            {
              "description": "Run an npm command. Use NpmAuthenticate@0 task for latest capabilities.",
              "doNotSuggest": false,
              
              "enum": [
                "Npm@0"
              ]
            },
            {
              "description": "[PREVIEW] Build and deploy an Azure Static Web App",
              "doNotSuggest": false,
              
              "enum": [
                "AzureStaticWebApp@0"
              ]
            },
            {
              "description": "Set up a Node.js environment and add it to the PATH, additionally providing proxy support",
              "doNotSuggest": false,
              
              "enum": [
                "UseNode@1"
              ]
            },
            {
              "description": "Finds or downloads and caches the specified version spec of Node.js and adds it to the PATH",
              "doNotSuggest": false,
              
              "enum": [
                "NodeTool@0"
              ]
            },
            {
              "description": "Deploy a SQL Server database using DACPAC",
              "$comment": "SqlServerDacpacDeployment is deprecated - Deploy a SQL Server database using DACPAC",
              "doNotSuggest": true,
              
              "enum": [
                "SqlServerDacpacDeployment@1"
              ]
            },
            {
              "description": "Acquire the test platform from nuget.org or the tool cache. Satisfies the ‘vstest’ demand and can be used for running tests and collecting diagnostic data using the Visual Studio Test task.",
              "doNotSuggest": false,
              
              "enum": [
                "VisualStudioTestPlatformInstaller@1"
              ]
            },
            {
              "description": "Sends a message to Azure Service Bus using a service connection (no agent is required)",
              "doNotSuggest": false,
              
              "enum": [
                "PublishToAzureServiceBus@1"
              ]
            },
            {
              "description": "Sends a message to azure service bus using a service connection (no agent required).",
              "doNotSuggest": false,
              
              "enum": [
                "PublishToAzureServiceBus@0"
              ]
            },
            {
              "description": "Use Kubernetes manifest files to deploy to clusters or even bake the manifest files to be used for deployments using Helm charts",
              "doNotSuggest": false,
              
              "enum": [
                "KubernetesManifest@0"
              ]
            },
            {
              "description": "Download files that were saved as artifacts of a completed build",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadBuildArtifacts@1"
              ]
            },
            {
              "description": "Download files that were saved as artifacts of a completed build",
              "doNotSuggest": false,
              
              "enum": [
                "DownloadBuildArtifacts@0"
              ]
            },
            {
              "description": "Install CocoaPods dependencies for Swift and Objective-C Cocoa projects",
              "doNotSuggest": false,
              
              "enum": [
                "CocoaPods@0"
              ]
            },
            {
              "description": "Deploy applications to Azure Spring Cloud and manage deployments.",
              "doNotSuggest": false,
              
              "enum": [
                "AzureSpringCloud@0"
              ]
            },
            {
              "description": "Deploy an Azure Web App for Linux or Windows",
              "doNotSuggest": false,
              
              "enum": [
                "AzureWebApp@1"
              ]
            },
            {
              "description": "Run Azure CLI commands against an Azure subscription in a Shell script when running on Linux agent or Batch script when running on Windows agent.",
              "doNotSuggest": false,
              
              "enum": [
                "AzureCLI@1"
              ]
            },
            {
              "description": "Run Azure CLI commands against an Azure subscription in a PowerShell Core/Shell script when running on Linux agent or PowerShell/PowerShell Core/Batch script when running on Windows agent.",
              "doNotSuggest": false,
              
              "enum": [
                "AzureCLI@2"
              ]
            },
            {
              "description": "Run a Shell or Batch script with Azure CLI commands against an azure subscription",
              "doNotSuggest": false,
              
              "enum": [
                "AzureCLI@0"
              ]
            },
            {
              "description": "Create, edit, or delete a GitHub release",
              "doNotSuggest": false,
              
              "enum": [
                "GitHubRelease@1"
              ]
            },
            {
              "description": "Create, edit, or delete a GitHub release",
              "doNotSuggest": false,
              
              "enum": [
                "GitHubRelease@0"
              ]
            },
            {
              "description": "Use cURL to upload files with FTP, FTPS, SFTP, HTTP, and more.",
              "doNotSuggest": false,
              
              "enum": [
                "cURLUploader@1"
              ]
            },
            {
              "description": "Use cURL's supported protocols to upload files",
              "doNotSuggest": false,
              
              "enum": [
                "cURLUploader@2"
              ]
            },
            {
              "description": "Update/Add App settings an Azure Web App for Linux or Windows",
              "doNotSuggest": false,
              
              "enum": [
                "AzureAppServiceSettings@1"
              ]
            },
            {
              "description": "Download or publish Universal Packages",
              "doNotSuggest": false,
              
              "enum": [
                "UniversalPackages@0"
              ]
            },
            {
              "description": "Security and compliance assessment for Azure Policy",
              "doNotSuggest": false,
              
              "enum": [
                "AzurePolicyCheckGate@0"
              ]
            },
            {
              "description": "Deploy Azure function to Kubernetes cluster.",
              "doNotSuggest": false,
              
              "enum": [
                "AzureFunctionOnKubernetes@0"
              ]
            },
            {
              "description": "Run a shell script using Bash",
              "doNotSuggest": false,
              
              "enum": [
                "ShellScript@2"
              ]
            },
            {
              "description": "Run a Bash script on macOS, Linux, or Windows",
              "doNotSuggest": false,
              
              "enum": [
                "Bash@3"
              ]
            },
            {
              "description": "Publish build artifacts to Azure Pipelines or a Windows file share",
              "doNotSuggest": false,
              
              "enum": [
                "PublishBuildArtifacts@1"
              ]
            },
            {
              "description": "Install an SSH key prior to a build or deployment",
              "doNotSuggest": false,
              
              "enum": [
                "InstallSSHKey@0"
              ]
            },
            {
              "description": "Deploy a virtual machine scale set image",
              "doNotSuggest": false,
              
              "enum": [
                "AzureVmssDeployment@0"
              ]
            },
            {
              "description": "Create or update Azure App Service using Azure PowerShell",
              "$comment": "AzureWebPowerShellDeployment is deprecated - Create or update Azure App Service using Azure PowerShell",
              "doNotSuggest": true,
              
              "enum": [
                "AzureWebPowerShellDeployment@1"
              ]
            },
            {
              "description": "Deploy an Azure Cloud Service",
              "doNotSuggest": false,
              
              "enum": [
                "AzureCloudPowerShellDeployment@1"
              ]
            },
            {
              "description": "Delete folders, or files matching a pattern",
              "doNotSuggest": false,
              
              "enum": [
                "DeleteFiles@1"
              ]
            },
            {
              "description": "Run the gulp Node.js streaming task-based build system",
              "doNotSuggest": false,
              
              "enum": [
                "gulp@1"
              ]
            },
            {
              "description": "Run the gulp Node.js streaming task-based build system",
              "doNotSuggest": false,
              
              "enum": [
                "gulp@0"
              ]
            },
            {
              "description": "Run a quick web performance test in the cloud with Azure Pipelines",
              "$comment": "QuickPerfTest is deprecated - Run a quick web performance test in the cloud with Azure Pipelines",
              "doNotSuggest": true,
              
              "enum": [
                "QuickPerfTest@1"
              ]
            },
            {
              "description": "Create or update websites, web apps, virtual directories, or application pools",
              "doNotSuggest": false,
              
              "enum": [
                "IISWebAppManagementOnMachineGroup@0"
              ]
            },
            {
              "description": "Install Docker CLI on agent machine.",
              "doNotSuggest": false,
              
              "enum": [
                "DockerInstaller@0"
              ]
            }
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name for the task"
        },
        "name": {
          "type": "string",
          "description": "ID of the task instance",
          "pattern": "^[_A-Za-z0-9]*$"
        },
        "condition": {
          "type": "string",
          "description": "Evaluate this condition expression to determine whether to run this task"
        },
        "continueOnError": {
          "type": "boolean",
          "description": "Continue running the parent job even on failure?"
        },
        "enabled": {
          "type": "string",
          "description": "Run this task when the job runs?"
        },
        "retryCountOnTaskFailure": {
          "type": "integer",
          "description": "Number of retries if the task fails"
        },
        "timeoutInMinutes": {
          "type": "integer",
          "description": "Time to wait for this task to complete before the server kills it"
        },
        "inputs": {
          "type": "object",
          "description": "Task-specific inputs"
        },
        "env": {
          "type": "object",
          "description": "Variables to map into the process's environment"
        }
      },
      "additionalProperties": false,
      "anyOf": [
        {
          "properties": {
            "task": {
              "description": "PowerShell\n\nRun a PowerShell script on Linux, macOS, or Windows",
              
              "pattern": "^PowerShell@2$"
            },
            "inputs": {
              "description": "PowerShell inputs",
              "properties": {
                "targetType": {
                  "description": "Type",
                  "enum": [
                    "filePath",
                    "inline"
                  ]
                },
                "filePath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "script": {
                  "type": "string",
                  "description": "Script"
                },
                "errorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "warningPreference": {
                  "description": "WarningPreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "informationPreference": {
                  "description": "InformationPreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "verbosePreference": {
                  "description": "VerbosePreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "debugPreference": {
                  "description": "DebugPreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "failOnStderr": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                },
                "showWarnings": {
                  "type": "boolean",
                  "description": "Show warnings as Azure DevOps warnings"
                },
                "ignoreLASTEXITCODE": {
                  "type": "boolean",
                  "description": "Ignore $LASTEXITCODE"
                },
                "pwsh": {
                  "type": "boolean",
                  "description": "Use PowerShell Core"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "runScriptInSeparateScope": {
                  "type": "boolean",
                  "description": "Run script in the separate scope"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "PowerShell\n\nRun a PowerShell script",
              
              "pattern": "^PowerShell@1$"
            },
            "inputs": {
              "description": "PowerShell inputs",
              "properties": {
                "scriptType": {
                  "description": "Type",
                  "enum": [
                    "inlineScript",
                    "filePath"
                  ]
                },
                "scriptName": {
                  "type": "string",
                  "description": "Script Path"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingFolder": {
                  "type": "string",
                  "description": "Working folder"
                },
                "inlineScript": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "failOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              
              "pattern": "^AzurePowerShell@4$"
            },
            "inputs": {
              "description": "Azure PowerShell inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ]
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "Inline": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                },
                "errorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "FailOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                },
                "RestrictContextToCurrentTask": {
                  "type": "boolean",
                  "description": "Restrict scope of context to current task"
                },
                "azurePowerShellVersion": {
                  "description": "Azure PowerShell Version",
                  "enum": [
                    "LatestVersion",
                    "OtherVersion"
                  ]
                },
                "preferredAzurePowerShellVersion": {
                  "type": "string",
                  "description": "Preferred Azure PowerShell Version"
                },
                "pwsh": {
                  "type": "boolean",
                  "description": "Use PowerShell Core"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              
              "pattern": "^AzurePowerShell@5$"
            },
            "inputs": {
              "description": "Azure PowerShell inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ]
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "Inline": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                },
                "errorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "FailOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                },
                "azurePowerShellVersion": {
                  "description": "Azure PowerShell Version",
                  "enum": [
                    "LatestVersion",
                    "OtherVersion"
                  ]
                },
                "preferredAzurePowerShellVersion": {
                  "type": "string",
                  "description": "Preferred Azure PowerShell Version"
                },
                "pwsh": {
                  "type": "boolean",
                  "description": "Use PowerShell Core"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              
              "pattern": "^AzurePowerShell@2$"
            },
            "inputs": {
              "description": "Azure PowerShell inputs",
              "properties": {
                "azureConnectionType": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ]
                },
                "azureClassicSubscription": {
                  "type": "string",
                  "description": "Azure Classic Subscription"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ]
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "Inline": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                },
                "azurePowerShellVersion": {
                  "description": "Azure PowerShell Version",
                  "enum": [
                    "LatestVersion",
                    "OtherVersion"
                  ]
                },
                "preferredAzurePowerShellVersion": {
                  "type": "string",
                  "description": "Preferred Azure PowerShell Version"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              
              "pattern": "^AzurePowerShell@3$"
            },
            "inputs": {
              "description": "Azure PowerShell inputs",
              "properties": {
                "azureConnectionType": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ]
                },
                "azureClassicSubscription": {
                  "type": "string",
                  "description": "Azure Classic Subscription"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ]
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "Inline": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                },
                "errorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "FailOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                },
                "azurePowerShellVersion": {
                  "description": "Azure PowerShell Version",
                  "enum": [
                    "LatestVersion",
                    "OtherVersion"
                  ]
                },
                "preferredAzurePowerShellVersion": {
                  "type": "string",
                  "description": "Preferred Azure PowerShell Version"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              
              "pattern": "^AzurePowerShell@1$"
            },
            "inputs": {
              "description": "Azure PowerShell inputs",
              "properties": {
                "ConnectedServiceNameSelector": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ]
                },
                "ConnectedServiceName": {
                  "type": "string",
                  "description": "Azure Classic Subscription"
                },
                "ConnectedServiceNameARM": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ]
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "Inline": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "MySQL database deploy\n\nRun scripts and make changes to a MySQL Database",
              
              "pattern": "^MysqlDeploymentOnMachineGroup@1$"
            },
            "inputs": {
              "description": "MySQL database deploy inputs",
              "properties": {
                "TaskNameSelector": {
                  "description": "Deploy MySql Using",
                  "enum": [
                    "SqlTaskFile",
                    "InlineSqlTask"
                  ]
                },
                "SqlFile": {
                  "type": "string",
                  "description": "MySQL Script"
                },
                "SqlInline": {
                  "type": "string",
                  "description": "Inline MySQL Script"
                },
                "ServerName": {
                  "type": "string",
                  "description": "Host Name"
                },
                "DatabaseName": {
                  "type": "string",
                  "description": "Database Name"
                },
                "SqlUsername": {
                  "type": "string",
                  "description": "Mysql User Name"
                },
                "SqlPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "SqlAdditionalArguments": {
                  "type": "string",
                  "description": "Additional Arguments"
                }
              },
              "additionalProperties": false,
              "required": [
                "SqlUsername",
                "SqlPassword"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Python pip authenticate\n\nAuthentication task for the pip client used for installing Python distributions",
              
              "pattern": "^PipAuthenticate@1$"
            },
            "inputs": {
              "description": "Python pip authenticate inputs",
              "properties": {
                "artifactFeeds": {
                  "type": "string",
                  "description": "My feeds (select below)"
                },
                "pythonDownloadServiceConnections": {
                  "type": "string",
                  "description": "Feeds from external organizations"
                },
                "onlyAddExtraIndex": {
                  "type": "boolean",
                  "description": "Don't set primary index URL"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Python pip authenticate\n\nAuthentication task for the pip client used for installing Python distributions",
              
              "pattern": "^PipAuthenticate@0$"
            },
            "inputs": {
              "description": "Python pip authenticate inputs",
              "properties": {
                "artifactFeeds": {
                  "type": "string",
                  "description": "My feeds (select below)"
                },
                "externalFeeds": {
                  "type": "string",
                  "description": "Feeds from external organizations"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Maven\n\nBuild, test, and deploy with Apache Maven",
              
              "pattern": "^Maven@2$"
            },
            "inputs": {
              "description": "Maven inputs",
              "properties": {
                "mavenPomFile": {
                  "type": "string",
                  "description": "Maven POM file"
                },
                "goals": {
                  "type": "string",
                  "description": "Goal(s)"
                },
                "options": {
                  "type": "string",
                  "description": "Options"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to Azure Pipelines"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test results files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                },
                "allowBrokenSymlinks": {
                  "type": "boolean",
                  "description": "Allow broken symbolic links"
                },
                "codeCoverageToolOption": {
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ]
                },
                "codeCoverageClassFilter": {
                  "type": "string",
                  "description": "Class inclusion/exclusion filters"
                },
                "codeCoverageClassFilesDirectories": {
                  "type": "string",
                  "description": "Class files directories"
                },
                "codeCoverageSourceDirectories": {
                  "type": "string",
                  "description": "Source files directories"
                },
                "codeCoverageFailIfEmpty": {
                  "type": "boolean",
                  "description": "Fail when code coverage results are missing"
                },
                "codeCoverageRestoreOriginalPomXml": {
                  "type": "boolean",
                  "description": "Restore original pom.xml after task execution"
                },
                "javaHomeOption": {
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ]
                },
                "jdkVersionOption": {
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.17",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ]
                },
                "jdkDirectory": {
                  "type": "string",
                  "description": "JDK path"
                },
                "jdkArchitectureOption": {
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                },
                "mavenVersionOption": {
                  "description": "Maven version",
                  "enum": [
                    "Default",
                    "Path"
                  ]
                },
                "mavenDirectory": {
                  "type": "string",
                  "description": "Maven path"
                },
                "mavenSetM2Home": {
                  "type": "boolean",
                  "description": "Set M2_HOME variable"
                },
                "mavenOptions": {
                  "type": "string",
                  "description": "Set MAVEN_OPTS to"
                },
                "mavenAuthenticateFeed": {
                  "type": "boolean",
                  "description": "Authenticate built-in Maven feeds"
                },
                "sonarQubeRunAnalysis": {
                  "type": "boolean",
                  "description": "Run SonarQube or SonarCloud analysis"
                },
                "isJacocoCoverageReportXML": {
                  "type": "boolean",
                  "description": "Use XML Jacoco reports for SonarQube analysis"
                },
                "sqMavenPluginVersionChoice": {
                  "description": "SonarQube scanner for Maven version",
                  "enum": [
                    "latest",
                    "pom"
                  ]
                },
                "checkStyleRunAnalysis": {
                  "type": "boolean",
                  "description": "Run Checkstyle"
                },
                "pmdRunAnalysis": {
                  "type": "boolean",
                  "description": "Run PMD"
                },
                "findBugsRunAnalysis": {
                  "type": "boolean",
                  "description": "Run FindBugs"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Maven\n\nBuild, test, and deploy with Apache Maven",
              
              "pattern": "^Maven@3$"
            },
            "inputs": {
              "description": "Maven inputs",
              "properties": {
                "mavenPomFile": {
                  "type": "string",
                  "description": "Maven POM file"
                },
                "goals": {
                  "type": "string",
                  "description": "Goal(s)"
                },
                "options": {
                  "type": "string",
                  "description": "Options"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to Azure Pipelines"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test results files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                },
                "allowBrokenSymlinks": {
                  "type": "boolean",
                  "description": "Allow broken symbolic links"
                },
                "codeCoverageToolOption": {
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ]
                },
                "codeCoverageClassFilter": {
                  "type": "string",
                  "description": "Class inclusion/exclusion filters"
                },
                "codeCoverageClassFilesDirectories": {
                  "type": "string",
                  "description": "Class files directories"
                },
                "codeCoverageSourceDirectories": {
                  "type": "string",
                  "description": "Source files directories"
                },
                "codeCoverageFailIfEmpty": {
                  "type": "boolean",
                  "description": "Fail when code coverage results are missing"
                },
                "codeCoverageRestoreOriginalPomXml": {
                  "type": "boolean",
                  "description": "Restore original pom.xml after task execution"
                },
                "javaHomeOption": {
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ]
                },
                "jdkVersionOption": {
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.17",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ]
                },
                "jdkDirectory": {
                  "type": "string",
                  "description": "JDK path"
                },
                "jdkArchitectureOption": {
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                },
                "mavenVersionOption": {
                  "description": "Maven version",
                  "enum": [
                    "Default",
                    "Path"
                  ]
                },
                "mavenDirectory": {
                  "type": "string",
                  "description": "Maven path"
                },
                "mavenSetM2Home": {
                  "type": "boolean",
                  "description": "Set M2_HOME variable"
                },
                "mavenOptions": {
                  "type": "string",
                  "description": "Set MAVEN_OPTS to"
                },
                "mavenAuthenticateFeed": {
                  "type": "boolean",
                  "description": "Authenticate built-in Maven feeds"
                },
                "effectivePomSkip": {
                  "type": "boolean",
                  "description": "Skip generating effective POM while authenticating built-in feeds"
                },
                "sonarQubeRunAnalysis": {
                  "type": "boolean",
                  "description": "Run SonarQube or SonarCloud analysis"
                },
                "isJacocoCoverageReportXML": {
                  "type": "boolean",
                  "description": "Use XML Jacoco reports for SonarQube analysis"
                },
                "sqMavenPluginVersionChoice": {
                  "description": "SonarQube scanner for Maven version",
                  "enum": [
                    "latest",
                    "pom"
                  ]
                },
                "checkStyleRunAnalysis": {
                  "type": "boolean",
                  "description": "Run Checkstyle"
                },
                "pmdRunAnalysis": {
                  "type": "boolean",
                  "description": "Run PMD"
                },
                "findBugsRunAnalysis": {
                  "type": "boolean",
                  "description": "Run FindBugs"
                },
                "spotBugsRunAnalysis": {
                  "type": "boolean",
                  "description": "Run SpotBugs analysis"
                },
                "spotBugsVersion": {
                  "type": "string",
                  "description": "Version number"
                },
                "spotBugsGoal": {
                  "description": "The goal for the spotbugs plugin",
                  "enum": [
                    "spotbugs",
                    "check"
                  ]
                },
                "failWhenBugsFound": {
                  "type": "boolean",
                  "description": "Fail when bugs are found with spotbugs:check"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Maven\n\nBuild with Apache Maven",
              
              "pattern": "^Maven@1$"
            },
            "inputs": {
              "description": "Maven inputs",
              "properties": {
                "mavenPomFile": {
                  "type": "string",
                  "description": "Maven POM file"
                },
                "goals": {
                  "type": "string",
                  "description": "Goal(s)"
                },
                "options": {
                  "type": "string",
                  "description": "Options"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to TFS/Team Services"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test Results Files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test Run Title"
                },
                "codeCoverageToolOption": {
                  "description": "Code Coverage Tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ]
                },
                "codeCoverageClassFilter": {
                  "type": "string",
                  "description": "Class Inclusion/Exclusion Filters"
                },
                "codeCoverageClassFilesDirectories": {
                  "type": "string",
                  "description": "Class Files Directories"
                },
                "codeCoverageSourceDirectories": {
                  "type": "string",
                  "description": "Source Files Directories"
                },
                "codeCoverageFailIfEmpty": {
                  "type": "boolean",
                  "description": "Fail When Code Coverage Results Are Missing"
                },
                "javaHomeOption": {
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ]
                },
                "jdkVersionOption": {
                  "description": "JDK Version",
                  "enum": [
                    "default",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ]
                },
                "jdkDirectory": {
                  "type": "string",
                  "description": "JDK Path"
                },
                "jdkArchitectureOption": {
                  "description": "JDK Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                },
                "mavenVersionOption": {
                  "description": "Maven Version",
                  "enum": [
                    "Default",
                    "Path"
                  ]
                },
                "mavenDirectory": {
                  "type": "string",
                  "description": "Maven Path"
                },
                "mavenSetM2Home": {
                  "type": "boolean",
                  "description": "Set M2_HOME variable"
                },
                "mavenOptions": {
                  "type": "string",
                  "description": "Set MAVEN_OPTS to"
                },
                "mavenAuthenticateFeed": {
                  "type": "boolean",
                  "description": "Authenticate built-in Maven feeds"
                },
                "sonarQubeRunAnalysis": {
                  "type": "boolean",
                  "description": "Run SonarQube Analysis"
                },
                "sonarQubeServiceEndpoint": {
                  "type": "string",
                  "description": "SonarQube Endpoint"
                },
                "sonarQubeProjectName": {
                  "type": "string",
                  "description": "SonarQube Project Name"
                },
                "sonarQubeProjectKey": {
                  "type": "string",
                  "description": "SonarQube Project Key"
                },
                "sonarQubeProjectVersion": {
                  "type": "string",
                  "description": "SonarQube Project Version"
                },
                "sonarQubeSpecifyDB": {
                  "type": "boolean",
                  "description": "The SonarQube server version is lower than 5.2"
                },
                "sonarQubeDBUrl": {
                  "type": "string",
                  "description": "Db Connection String"
                },
                "sonarQubeDBUsername": {
                  "type": "string",
                  "description": "Db Username"
                },
                "sonarQubeDBPassword": {
                  "type": "string",
                  "description": "Db User Password"
                },
                "sonarQubeIncludeFullReport": {
                  "type": "boolean",
                  "description": "Include full analysis report in the build summary (SQ 5.3+)"
                },
                "sonarQubeFailWhenQualityGateFails": {
                  "type": "boolean",
                  "description": "Fail the build on quality gate failure (SQ 5.3+)"
                },
                "checkStyleRunAnalysis": {
                  "type": "boolean",
                  "description": "Run Checkstyle"
                },
                "pmdRunAnalysis": {
                  "type": "boolean",
                  "description": "Run PMD"
                },
                "findBugsRunAnalysis": {
                  "type": "boolean",
                  "description": "Run FindBugs"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": ".NET Core\n\nBuild, test, package, or publish a dotnet application, or run a custom dotnet command",
              
              "pattern": "^DotNetCoreCLI@2$"
            },
            "inputs": {
              "description": ".NET Core inputs",
              "properties": {
                "command": {
                  "description": "Command",
                  "enum": [
                    "build",
                    "push",
                    "pack",
                    "publish",
                    "restore",
                    "run",
                    "test",
                    "custom"
                  ]
                },
                "publishWebProjects": {
                  "type": "boolean",
                  "description": "Publish web projects"
                },
                "projects": {
                  "type": "string",
                  "description": "Path to project(s)"
                },
                "custom": {
                  "type": "string",
                  "description": "Custom command"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "restoreArguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "publishTestResults": {
                  "type": "boolean",
                  "description": "Publish test results and code coverage"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                },
                "zipAfterPublish": {
                  "type": "boolean",
                  "description": "Zip published projects"
                },
                "modifyOutputPath": {
                  "type": "boolean",
                  "description": "Add project's folder name to publish path"
                },
                "feedsToUse": {
                  "description": "Feeds to use",
                  "enum": [
                    "select",
                    "config"
                  ]
                },
                "vstsFeed": {
                  "type": "string",
                  "description": "Use packages from this Azure Artifacts feed"
                },
                "includeNuGetOrg": {
                  "type": "boolean",
                  "description": "Use packages from NuGet.org"
                },
                "nugetConfigPath": {
                  "type": "string",
                  "description": "Path to NuGet.config"
                },
                "externalFeedCredentials": {
                  "type": "string",
                  "description": "Credentials for feeds outside this organization/collection"
                },
                "noCache": {
                  "type": "boolean",
                  "description": "Disable local cache"
                },
                "restoreDirectory": {
                  "type": "string",
                  "description": "Destination directory"
                },
                "verbosityRestore": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Minimal",
                    "Normal",
                    "Detailed",
                    "Diagnostic"
                  ]
                },
                "packagesToPush": {
                  "type": "string",
                  "description": "Path to NuGet package(s) to publish"
                },
                "nuGetFeedType": {
                  "description": "Target feed location",
                  "enum": [
                    "internal",
                    "external"
                  ]
                },
                "publishVstsFeed": {
                  "type": "string",
                  "description": "Target feed"
                },
                "publishPackageMetadata": {
                  "type": "boolean",
                  "description": "Publish pipeline metadata"
                },
                "publishFeedCredentials": {
                  "type": "string",
                  "description": "NuGet server"
                },
                "packagesToPack": {
                  "type": "string",
                  "description": "Path to csproj or nuspec file(s) to pack"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration to Package"
                },
                "packDirectory": {
                  "type": "string",
                  "description": "Package Folder"
                },
                "nobuild": {
                  "type": "boolean",
                  "description": "Do not build"
                },
                "includesymbols": {
                  "type": "boolean",
                  "description": "Include Symbols"
                },
                "includesource": {
                  "type": "boolean",
                  "description": "Include Source"
                },
                "versioningScheme": {
                  "description": "Automatic package versioning",
                  "enum": [
                    "off",
                    "byPrereleaseNumber",
                    "byEnvVar",
                    "byBuildNumber"
                  ]
                },
                "versionEnvVar": {
                  "type": "string",
                  "description": "Environment variable"
                },
                "majorVersion": {
                  "type": "string",
                  "description": "Major"
                },
                "minorVersion": {
                  "type": "string",
                  "description": "Minor"
                },
                "patchVersion": {
                  "type": "string",
                  "description": "Patch"
                },
                "buildProperties": {
                  "type": "string",
                  "description": "Additional build properties"
                },
                "verbosityPack": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Minimal",
                    "Normal",
                    "Detailed",
                    "Diagnostic"
                  ]
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": ".NET Core (PREVIEW)\n\nBuild, test and publish using dotnet core command-line.",
              
              "pattern": "^DotNetCoreCLI@0$"
            },
            "inputs": {
              "description": ".NET Core (PREVIEW) inputs",
              "properties": {
                "command": {
                  "description": "Command",
                  "enum": [
                    "build",
                    "publish",
                    "restore",
                    "test",
                    "run"
                  ]
                },
                "publishWebProjects": {
                  "type": "boolean",
                  "description": "Publish Web Projects"
                },
                "projects": {
                  "type": "string",
                  "description": "Project(s)"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "zipAfterPublish": {
                  "type": "boolean",
                  "description": "Zip Published Projects"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "DotNetCoreCLI is deprecated - Build, test and publish using dotnet core command-line.",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": ".NET Core\n\nBuild, test and publish using dotnet core command-line.",
              
              "pattern": "^DotNetCoreCLI@1$"
            },
            "inputs": {
              "description": ".NET Core inputs",
              "properties": {
                "command": {
                  "description": "Command",
                  "enum": [
                    "build",
                    "publish",
                    "restore",
                    "test",
                    "run"
                  ]
                },
                "publishWebProjects": {
                  "type": "boolean",
                  "description": "Publish Web Projects"
                },
                "projects": {
                  "type": "string",
                  "description": "Project(s)"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "zipAfterPublish": {
                  "type": "boolean",
                  "description": "Zip Published Projects"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xamarin Component Restore\n\nThis task is deprecated. Use 'NuGet' instead.",
              
              "pattern": "^XamarinComponentRestore@0$"
            },
            "inputs": {
              "description": "Xamarin Component Restore inputs",
              "properties": {
                "solutionFile": {
                  "type": "string",
                  "description": "Path to solution"
                },
                "email": {
                  "type": "string",
                  "description": "Email"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                }
              },
              "additionalProperties": false,
              "required": [
                "email",
                "password"
              ]
            }
          },
          "$comment": "XamarinComponentRestore is deprecated - This task is deprecated. Use 'NuGet' instead.",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure App Service Deploy\n\nUpdate Azure App Service using Web Deploy / Kudu REST APIs",
              
              "pattern": "^AzureRmWebAppDeployment@2$"
            },
            "inputs": {
              "description": "Azure App Service Deploy inputs",
              "properties": {
                "ConnectedServiceName": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "WebAppName": {
                  "type": "string",
                  "description": "App Service name"
                },
                "DeployToSlotFlag": {
                  "type": "boolean",
                  "description": "Deploy to slot"
                },
                "ResourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "SlotName": {
                  "type": "string",
                  "description": "Slot"
                },
                "VirtualApplication": {
                  "type": "string",
                  "description": "Virtual Application"
                },
                "Package": {
                  "type": "string",
                  "description": "Package or Folder"
                },
                "WebAppUri": {
                  "type": "string",
                  "description": "App Service URL"
                },
                "UseWebDeploy": {
                  "type": "boolean",
                  "description": "Publish using Web Deploy"
                },
                "SetParametersFile": {
                  "type": "string",
                  "description": "SetParameters File"
                },
                "RemoveAdditionalFilesFlag": {
                  "type": "boolean",
                  "description": "Remove Additional Files at Destination"
                },
                "ExcludeFilesFromAppDataFlag": {
                  "type": "boolean",
                  "description": "Exclude Files from the App_Data Folder"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional Arguments"
                },
                "TakeAppOfflineFlag": {
                  "type": "boolean",
                  "description": "Take App Offline"
                }
              },
              "additionalProperties": false,
              "required": [
                "ConnectedServiceName",
                "WebAppName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure App Service deploy\n\nDeploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
              
              "pattern": "^AzureRmWebAppDeployment@4$"
            },
            "inputs": {
              "description": "Azure App Service deploy inputs",
              "properties": {
                "ConnectionType": {
                  "description": "Connection type",
                  "enum": [
                    "AzureRM",
                    "PublishProfile"
                  ]
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "PublishProfilePath": {
                  "type": "string",
                  "description": "Publish profile path"
                },
                "PublishProfilePassword": {
                  "type": "string",
                  "description": "Publish profile password"
                },
                "appType": {
                  "description": "App Service type",
                  "enum": [
                    "webApp",
                    "webAppLinux",
                    "webAppContainer",
                    "functionApp",
                    "functionAppLinux",
                    "functionAppContainer",
                    "apiApp",
                    "mobileApp"
                  ]
                },
                "WebAppName": {
                  "type": "string",
                  "description": "App Service name"
                },
                "deployToSlotOrASE": {
                  "type": "boolean",
                  "description": "Deploy to Slot or App Service Environment"
                },
                "ResourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "SlotName": {
                  "type": "string",
                  "description": "Slot"
                },
                "DockerNamespace": {
                  "type": "string",
                  "description": "Registry or Namespace"
                },
                "DockerRepository": {
                  "type": "string",
                  "description": "Image"
                },
                "DockerImageTag": {
                  "type": "string",
                  "description": "Tag"
                },
                "VirtualApplication": {
                  "type": "string",
                  "description": "Virtual application"
                },
                "packageForLinux": {
                  "type": "string",
                  "description": "Package or folder"
                },
                "RuntimeStack": {
                  "type": "string",
                  "description": "Runtime Stack"
                },
                "RuntimeStackFunction": {
                  "description": "Runtime Stack",
                  "enum": [
                    "DOTNET|2.2",
                    "DOTNET|3.1",
                    "JAVA|8",
                    "JAVA|11",
                    "NODE|8",
                    "NODE|10",
                    "NODE|12",
                    "NODE|14",
                    "PYTHON|3.6",
                    "PYTHON|3.7",
                    "PYTHON|3.8"
                  ]
                },
                "StartupCommand": {
                  "type": "string",
                  "description": "Startup command "
                },
                "ScriptType": {
                  "description": "Deployment script type",
                  "enum": [
                    "",
                    "Inline Script",
                    "File Path"
                  ]
                },
                "InlineScript": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Deployment script path"
                },
                "WebConfigParameters": {
                  "type": "string",
                  "description": "Generate web.config parameters for Python, Node.js, Go and Java apps"
                },
                "AppSettings": {
                  "type": "string",
                  "description": "App settings"
                },
                "ConfigurationSettings": {
                  "type": "string",
                  "description": "Configuration settings"
                },
                "enableCustomDeployment": {
                  "type": "boolean",
                  "description": "Select deployment method"
                },
                "DeploymentType": {
                  "description": "Deployment method",
                  "enum": [
                    "webDeploy",
                    "zipDeploy",
                    "runFromZip"
                  ]
                },
                "TakeAppOfflineFlag": {
                  "type": "boolean",
                  "description": "Take App Offline"
                },
                "SetParametersFile": {
                  "type": "string",
                  "description": "SetParameters file"
                },
                "RemoveAdditionalFilesFlag": {
                  "type": "boolean",
                  "description": "Remove additional files at destination"
                },
                "ExcludeFilesFromAppDataFlag": {
                  "type": "boolean",
                  "description": "Exclude files from the App_Data folder"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional arguments"
                },
                "RenameFilesFlag": {
                  "type": "boolean",
                  "description": "Rename locked files"
                },
                "enableXmlTransform": {
                  "type": "boolean",
                  "description": "XML transformation"
                },
                "enableXmlVariableSubstitution": {
                  "type": "boolean",
                  "description": "XML variable substitution"
                },
                "JSONFiles": {
                  "type": "string",
                  "description": "JSON variable substitution"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure App Service deploy\n\nDeploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
              
              "pattern": "^AzureRmWebAppDeployment@3$"
            },
            "inputs": {
              "description": "Azure App Service deploy inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "appType": {
                  "description": "App type",
                  "enum": [
                    "app",
                    "applinux",
                    "functionapp",
                    "api",
                    "mobileapp"
                  ]
                },
                "WebAppName": {
                  "type": "string",
                  "description": "App Service name"
                },
                "DeployToSlotFlag": {
                  "type": "boolean",
                  "description": "Deploy to slot"
                },
                "ResourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "SlotName": {
                  "type": "string",
                  "description": "Slot"
                },
                "ImageSource": {
                  "description": "Image Source",
                  "enum": [
                    "Registry",
                    "Builtin"
                  ]
                },
                "AzureContainerRegistry": {
                  "type": "string",
                  "description": "Registry"
                },
                "AzureContainerRegistryLoginServer": {
                  "type": "string",
                  "description": "Registry Login Server Name"
                },
                "AzureContainerRegistryImage": {
                  "type": "string",
                  "description": "Image"
                },
                "AzureContainerRegistryTag": {
                  "type": "string",
                  "description": "Tag"
                },
                "DockerRepositoryAccess": {
                  "description": "Repository Access",
                  "enum": [
                    "private",
                    "public"
                  ]
                },
                "dockerRegistryConnection": {
                  "type": "string",
                  "description": "Registry Connection"
                },
                "PrivateRegistryImage": {
                  "type": "string",
                  "description": "Image"
                },
                "PrivateRegistryTag": {
                  "type": "string",
                  "description": "Tag"
                },
                "DockerNamespace": {
                  "type": "string",
                  "description": "Registry or Namespace"
                },
                "DockerRepository": {
                  "type": "string",
                  "description": "Image"
                },
                "DockerImageTag": {
                  "type": "string",
                  "description": "Tag"
                },
                "VirtualApplication": {
                  "type": "string",
                  "description": "Virtual application"
                },
                "Package": {
                  "type": "string",
                  "description": "Package or folder"
                },
                "packageForLinux": {
                  "type": "string",
                  "description": "Package or folder"
                },
                "RuntimeStack": {
                  "type": "string",
                  "description": "Runtime Stack"
                },
                "StartupCommand": {
                  "type": "string",
                  "description": "Startup command "
                },
                "WebAppUri": {
                  "type": "string",
                  "description": "App Service URL"
                },
                "ScriptType": {
                  "description": "Deployment script type",
                  "enum": [
                    "",
                    "Inline Script",
                    "File Path"
                  ]
                },
                "InlineScript": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Deployment script path"
                },
                "GenerateWebConfig": {
                  "type": "boolean",
                  "description": "Generate Web.config"
                },
                "WebConfigParameters": {
                  "type": "string",
                  "description": "Web.config parameters"
                },
                "AppSettings": {
                  "type": "string",
                  "description": "App settings"
                },
                "ConfigurationSettings": {
                  "type": "string",
                  "description": "Configuration settings"
                },
                "TakeAppOfflineFlag": {
                  "type": "boolean",
                  "description": "Take App Offline"
                },
                "UseWebDeploy": {
                  "type": "boolean",
                  "description": "Publish using Web Deploy"
                },
                "SetParametersFile": {
                  "type": "string",
                  "description": "SetParameters file"
                },
                "RemoveAdditionalFilesFlag": {
                  "type": "boolean",
                  "description": "Remove additional files at destination"
                },
                "ExcludeFilesFromAppDataFlag": {
                  "type": "boolean",
                  "description": "Exclude files from the App_Data folder"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional arguments"
                },
                "RenameFilesFlag": {
                  "type": "boolean",
                  "description": "Rename locked files"
                },
                "enableXmlTransform": {
                  "type": "boolean",
                  "description": "XML transformation"
                },
                "enableXmlVariableSubstitution": {
                  "type": "boolean",
                  "description": "XML variable substitution"
                },
                "JSONFiles": {
                  "type": "string",
                  "description": "JSON variable substitution"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "WebAppName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "PowerShell on target machines\n\nExecute PowerShell scripts on remote machines using PSSession and Invoke-Command for remoting",
              
              "pattern": "^PowerShellOnTargetMachines@3$"
            },
            "inputs": {
              "description": "PowerShell on target machines inputs",
              "properties": {
                "Machines": {
                  "type": "string",
                  "description": "Machines"
                },
                "UserName": {
                  "type": "string",
                  "description": "Username"
                },
                "UserPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "Inline"
                  ]
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Script File Path"
                },
                "InlineScript": {
                  "type": "string",
                  "description": "Script"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                },
                "InitializationScript": {
                  "type": "string",
                  "description": "Initialization script"
                },
                "SessionVariables": {
                  "type": "string",
                  "description": "Session Variables"
                },
                "CommunicationProtocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ]
                },
                "AuthenticationMechanism": {
                  "description": "Authentication",
                  "enum": [
                    "Default",
                    "Credssp"
                  ]
                },
                "NewPsSessionOptionArguments": {
                  "type": "string",
                  "description": "Session Option parameters"
                },
                "ErrorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "failOnStderr": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                },
                "ignoreLASTEXITCODE": {
                  "type": "boolean",
                  "description": "Ignore $LASTEXITCODE"
                },
                "WorkingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "RunPowershellInParallel": {
                  "type": "boolean",
                  "description": "Run PowerShell in Parallel"
                }
              },
              "additionalProperties": false,
              "required": [
                "Machines"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "PowerShell on Target Machines\n\nExecute PowerShell scripts on remote machine(s)",
              
              "pattern": "^PowerShellOnTargetMachines@1$"
            },
            "inputs": {
              "description": "PowerShell on Target Machines inputs",
              "properties": {
                "EnvironmentName": {
                  "type": "string",
                  "description": "Machines"
                },
                "AdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "AdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ]
                },
                "TestCertificate": {
                  "type": "boolean",
                  "description": "Test Certificate"
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "PowerShell Script"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                },
                "InitializationScriptPath": {
                  "type": "string",
                  "description": "Initialization Script"
                },
                "SessionVariables": {
                  "type": "string",
                  "description": "Session Variables"
                },
                "RunPowershellInParallel": {
                  "type": "boolean",
                  "description": "Run PowerShell in Parallel"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "MachineNames": {
                  "type": "string",
                  "description": "Filter Criteria"
                }
              },
              "additionalProperties": false,
              "required": [
                "EnvironmentName",
                "ScriptPath"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "PowerShell on Target Machines\n\nExecute PowerShell scripts on remote machine(s)",
              
              "pattern": "^PowerShellOnTargetMachines@2$"
            },
            "inputs": {
              "description": "PowerShell on Target Machines inputs",
              "properties": {
                "EnvironmentName": {
                  "type": "string",
                  "description": "Machines"
                },
                "AdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "AdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ]
                },
                "TestCertificate": {
                  "type": "boolean",
                  "description": "Test Certificate"
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "PowerShell Script"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                },
                "InitializationScriptPath": {
                  "type": "string",
                  "description": "Initialization Script"
                },
                "SessionVariables": {
                  "type": "string",
                  "description": "Session Variables"
                },
                "RunPowershellInParallel": {
                  "type": "boolean",
                  "description": "Run PowerShell in Parallel"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "MachineNames": {
                  "type": "string",
                  "description": "Filter Criteria"
                }
              },
              "additionalProperties": false,
              "required": [
                "EnvironmentName",
                "ScriptPath"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Publish code coverage results\n\nPublish Cobertura or JaCoCo code coverage results from a build",
              
              "pattern": "^PublishCodeCoverageResults@1$"
            },
            "inputs": {
              "description": "Publish code coverage results inputs",
              "properties": {
                "codeCoverageTool": {
                  "description": "Code coverage tool",
                  "enum": [
                    "Cobertura",
                    "JaCoCo"
                  ]
                },
                "summaryFileLocation": {
                  "type": "string",
                  "description": "Summary file"
                },
                "pathToSources": {
                  "type": "string",
                  "description": "Path to Source files"
                },
                "reportDirectory": {
                  "type": "string",
                  "description": "Report directory"
                },
                "additionalCodeCoverageFiles": {
                  "type": "string",
                  "description": "Additional files"
                },
                "failIfCoverageEmpty": {
                  "type": "boolean",
                  "description": "Fail when code coverage results are missing"
                }
              },
              "additionalProperties": false,
              "required": [
                "summaryFileLocation"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Run functional tests\n\nDeprecated: This task and it’s companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent job setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests.",
              
              "pattern": "^RunVisualStudioTestsusingTestAgent@1$"
            },
            "inputs": {
              "description": "Run functional tests inputs",
              "properties": {
                "testMachineGroup": {
                  "type": "string",
                  "description": "Machines"
                },
                "dropLocation": {
                  "type": "string",
                  "description": "Test Drop Location"
                },
                "testSelection": {
                  "description": "Test Selection",
                  "enum": [
                    "testAssembly",
                    "testPlan"
                  ]
                },
                "testPlan": {
                  "type": "string",
                  "description": "Test Plan"
                },
                "testSuite": {
                  "type": "string",
                  "description": "Test Suite"
                },
                "testConfiguration": {
                  "type": "string",
                  "description": "Test Configuration"
                },
                "sourcefilters": {
                  "type": "string",
                  "description": "Test Assembly"
                },
                "testFilterCriteria": {
                  "type": "string",
                  "description": "Test Filter criteria"
                },
                "runSettingsFile": {
                  "type": "string",
                  "description": "Run Settings File"
                },
                "overrideRunParams": {
                  "type": "string",
                  "description": "Override Test Run Parameters"
                },
                "codeCoverageEnabled": {
                  "type": "boolean",
                  "description": "Code Coverage Enabled"
                },
                "customSlicingEnabled": {
                  "type": "boolean",
                  "description": "Distribute tests by number of machines"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test Run Title"
                },
                "platform": {
                  "type": "string",
                  "description": "Platform"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "testConfigurations": {
                  "type": "string",
                  "description": "Test Configurations"
                },
                "autMachineGroup": {
                  "type": "string",
                  "description": "Application Under Test Machines"
                }
              },
              "additionalProperties": false,
              "required": [
                "testMachineGroup",
                "dropLocation"
              ]
            }
          },
          "$comment": "RunVisualStudioTestsusingTestAgent is deprecated - Deprecated: This task and it’s companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent job setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests.",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Manual intervention\n\nPause deployment and wait for manual intervention",
              
              "pattern": "^ManualIntervention@8$"
            },
            "inputs": {
              "description": "Manual intervention inputs",
              "properties": {
                "instructions": {
                  "type": "string",
                  "description": "Instructions"
                },
                "emailRecipients": {
                  "type": "string",
                  "description": "Notify users"
                },
                "onTimeout": {
                  "description": "On timeout",
                  "enum": [
                    "reject",
                    "resume"
                  ]
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Install Apple provisioning profile\n\nInstall an Apple provisioning profile required to build on a macOS agent machine",
              
              "pattern": "^InstallAppleProvisioningProfile@1$"
            },
            "inputs": {
              "description": "Install Apple provisioning profile inputs",
              "properties": {
                "provisioningProfileLocation": {
                  "description": "Provisioning profile location",
                  "enum": [
                    "secureFiles",
                    "sourceRepository"
                  ]
                },
                "provProfileSecureFile": {
                  "type": "string",
                  "description": "Provisioning profile"
                },
                "provProfileSourceRepository": {
                  "type": "string",
                  "description": "Provisioning profile"
                },
                "removeProfile": {
                  "type": "boolean",
                  "description": "Remove profile after build"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Install Apple Provisioning Profile\n\nInstall an Apple provisioning profile required to build on a macOS agent",
              
              "pattern": "^InstallAppleProvisioningProfile@0$"
            },
            "inputs": {
              "description": "Install Apple Provisioning Profile inputs",
              "properties": {
                "provProfileSecureFile": {
                  "type": "string",
                  "description": "Provisioning Profile"
                },
                "removeProfile": {
                  "type": "boolean",
                  "description": "Remove Profile After Build"
                }
              },
              "additionalProperties": false,
              "required": [
                "provProfileSecureFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "SonarQube for MSBuild - End Analysis\n\n[DEPRECATED] Finish the analysis and upload the results to SonarQube",
              
              "pattern": "^SonarQubePostTest@1$"
            },
            "inputs": {
              "description": "SonarQube for MSBuild - End Analysis inputs",
              "properties": {},
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "SonarQubePostTest is deprecated - [DEPRECATED] Finish the analysis and upload the results to SonarQube",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "PyPI publisher\n\nCreate and upload an sdist or wheel to a PyPI-compatible index using Twine",
              
              "pattern": "^PyPIPublisher@0$"
            },
            "inputs": {
              "description": "PyPI publisher inputs",
              "properties": {
                "pypiConnection": {
                  "type": "string",
                  "description": "PyPI service connection"
                },
                "packageDirectory": {
                  "type": "string",
                  "description": "Python package directory"
                },
                "alsoPublishWheel": {
                  "type": "boolean",
                  "description": "Also publish a wheel"
                }
              },
              "additionalProperties": false,
              "required": [
                "pypiConnection",
                "packageDirectory"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Chef Knife\n\nRun scripts with Knife commands on your Chef workstation",
              
              "pattern": "^ChefKnife@1$"
            },
            "inputs": {
              "description": "Chef Knife inputs",
              "properties": {
                "ConnectedServiceName": {
                  "type": "string",
                  "description": "Chef Subscription"
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                }
              },
              "additionalProperties": false,
              "required": [
                "ConnectedServiceName",
                "ScriptPath"
              ]
            }
          },
          "$comment": "ChefKnife is deprecated - Run scripts with Knife commands on your Chef workstation",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Go tool installer\n\nFind in cache or download a specific version of Go and add it to the PATH",
              
              "pattern": "^GoTool@0$"
            },
            "inputs": {
              "description": "Go tool installer inputs",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "Version"
                },
                "goPath": {
                  "type": "string",
                  "description": "GOPATH"
                },
                "goBin": {
                  "type": "string",
                  "description": "GOBIN"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xcode Package iOS\n\nGenerate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)",
              
              "pattern": "^XcodePackageiOS@0$"
            },
            "inputs": {
              "description": "Xcode Package iOS inputs",
              "properties": {
                "appName": {
                  "type": "string",
                  "description": "Name of .app"
                },
                "ipaName": {
                  "type": "string",
                  "description": "Name of .ipa"
                },
                "provisioningProfile": {
                  "type": "string",
                  "description": "Provisioning Profile Name"
                },
                "sdk": {
                  "type": "string",
                  "description": "SDK"
                },
                "appPath": {
                  "type": "string",
                  "description": "Path to .app"
                },
                "ipaPath": {
                  "type": "string",
                  "description": "Path to place .ipa"
                }
              },
              "additionalProperties": false,
              "required": [
                "provisioningProfile"
              ]
            }
          },
          "$comment": "XcodePackageiOS is deprecated - Generate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Go\n\nGet, build, or test a Go application, or run a custom Go command",
              
              "pattern": "^Go@0$"
            },
            "inputs": {
              "description": "Go inputs",
              "properties": {
                "command": {
                  "description": "Command",
                  "enum": [
                    "get",
                    "build",
                    "test",
                    "custom"
                  ]
                },
                "customCommand": {
                  "type": "string",
                  "description": "Custom command"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Publish Pipeline Metadata\n\nPublish Pipeline Metadata to Evidence store",
              
              "pattern": "^PublishPipelineMetadata@0$"
            },
            "inputs": {
              "description": "Publish Pipeline Metadata inputs",
              "properties": {},
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Docker\n\nBuild, tag, push, or run Docker images, or run a Docker command",
              
              "pattern": "^Docker@1$"
            },
            "inputs": {
              "description": "Docker inputs",
              "properties": {
                "containerregistrytype": {
                  "description": "Container registry type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ]
                },
                "addBaseImageData": {
                  "type": "boolean",
                  "description": "Add base image metadata to image(s)"
                },
                "dockerRegistryEndpoint": {
                  "type": "string",
                  "description": "Docker registry service connection"
                },
                "azureSubscriptionEndpoint": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "azureContainerRegistry": {
                  "type": "string",
                  "description": "Azure container registry"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "Build an image",
                    "Tag image",
                    "Push an image",
                    "Run an image",
                    "login",
                    "logout"
                  ]
                },
                "dockerFile": {
                  "type": "string",
                  "description": "Dockerfile"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "pushMultipleImages": {
                  "type": "boolean",
                  "description": "Push multiple images"
                },
                "tagMultipleImages": {
                  "type": "boolean",
                  "description": "Tag multiple images"
                },
                "imageName": {
                  "type": "string",
                  "description": "Image name"
                },
                "imageNamesPath": {
                  "type": "string",
                  "description": "Image names path"
                },
                "qualifyImageName": {
                  "type": "boolean",
                  "description": "Qualify image name"
                },
                "qualifySourceImageName": {
                  "type": "boolean",
                  "description": "Qualify source image name"
                },
                "includeSourceTags": {
                  "type": "boolean",
                  "description": "Include source tags"
                },
                "includeLatestTag": {
                  "type": "boolean",
                  "description": "Include latest tag"
                },
                "addDefaultLabels": {
                  "type": "boolean",
                  "description": "Add default labels"
                },
                "useDefaultContext": {
                  "type": "boolean",
                  "description": "Use default build context"
                },
                "buildContext": {
                  "type": "string",
                  "description": "Build context"
                },
                "imageDigestFile": {
                  "type": "string",
                  "description": "Image digest file"
                },
                "containerName": {
                  "type": "string",
                  "description": "Container name"
                },
                "ports": {
                  "type": "string",
                  "description": "Ports"
                },
                "volumes": {
                  "type": "string",
                  "description": "Volumes"
                },
                "envVars": {
                  "type": "string",
                  "description": "Environment variables"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "entrypointOverride": {
                  "type": "string",
                  "description": "Entry point override"
                },
                "containerCommand": {
                  "type": "string",
                  "description": "Container command"
                },
                "runInBackground": {
                  "type": "boolean",
                  "description": "Run in background"
                },
                "restartPolicy": {
                  "description": "Restart policy",
                  "enum": [
                    "no",
                    "onFailure",
                    "always",
                    "unlessStopped"
                  ]
                },
                "maxRestartRetries": {
                  "type": "string",
                  "description": "Maximum restart retries"
                },
                "dockerHostEndpoint": {
                  "type": "string",
                  "description": "Docker host service connection"
                },
                "enforceDockerNamingConvention": {
                  "type": "boolean",
                  "description": "Force image name to follow Docker naming convention"
                },
                "memoryLimit": {
                  "type": "string",
                  "description": "Memory limit"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Docker\n\nBuild or push Docker images, login or logout, start or stop containers, or run a Docker command",
              
              "pattern": "^Docker@2$"
            },
            "inputs": {
              "description": "Docker inputs",
              "properties": {
                "containerRegistry": {
                  "type": "string",
                  "description": "Container registry"
                },
                "repository": {
                  "type": "string",
                  "description": "Container repository"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "buildAndPush",
                    "build",
                    "push",
                    "login",
                    "logout",
                    "start",
                    "stop"
                  ]
                },
                "Dockerfile": {
                  "type": "string",
                  "description": "Dockerfile"
                },
                "buildContext": {
                  "type": "string",
                  "description": "Build context"
                },
                "tags": {
                  "type": "string",
                  "description": "Tags"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "addPipelineData": {
                  "type": "boolean",
                  "description": "Add Pipeline metadata to image(s)"
                },
                "addBaseImageData": {
                  "type": "boolean",
                  "description": "Add base image metadata to image(s)"
                },
                "container": {
                  "type": "string",
                  "description": "Container"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Docker\n\nBuild, tag, push, or run Docker images, or run a Docker command",
              
              "pattern": "^Docker@0$"
            },
            "inputs": {
              "description": "Docker inputs",
              "properties": {
                "containerregistrytype": {
                  "description": "Container Registry Type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ]
                },
                "dockerRegistryConnection": {
                  "type": "string",
                  "description": "Docker Registry Service Connection"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "azureContainerRegistry": {
                  "type": "string",
                  "description": "Azure Container Registry"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "Build an image",
                    "Tag images",
                    "Push an image",
                    "Push images",
                    "Run an image",
                    "Run a Docker command"
                  ]
                },
                "dockerFile": {
                  "type": "string",
                  "description": "Docker File"
                },
                "addBaseImageData": {
                  "type": "boolean",
                  "description": "Add base image metadata to image(s)"
                },
                "buildArguments": {
                  "type": "string",
                  "description": "Build Arguments"
                },
                "defaultContext": {
                  "type": "boolean",
                  "description": "Use Default Build Context"
                },
                "context": {
                  "type": "string",
                  "description": "Build Context"
                },
                "imageName": {
                  "type": "string",
                  "description": "Image Name"
                },
                "imageNamesPath": {
                  "type": "string",
                  "description": "Image Names Path"
                },
                "qualifyImageName": {
                  "type": "boolean",
                  "description": "Qualify Image Name"
                },
                "additionalImageTags": {
                  "type": "string",
                  "description": "Additional Image Tags"
                },
                "includeSourceTags": {
                  "type": "boolean",
                  "description": "Include Source Tags"
                },
                "includeLatestTag": {
                  "type": "boolean",
                  "description": "Include Latest Tag"
                },
                "imageDigestFile": {
                  "type": "string",
                  "description": "Image Digest File"
                },
                "containerName": {
                  "type": "string",
                  "description": "Container Name"
                },
                "ports": {
                  "type": "string",
                  "description": "Ports"
                },
                "volumes": {
                  "type": "string",
                  "description": "Volumes"
                },
                "envVars": {
                  "type": "string",
                  "description": "Environment Variables"
                },
                "workDir": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "entrypoint": {
                  "type": "string",
                  "description": "Entry Point Override"
                },
                "containerCommand": {
                  "type": "string",
                  "description": "Command"
                },
                "detached": {
                  "type": "boolean",
                  "description": "Run In Background"
                },
                "restartPolicy": {
                  "description": "Restart Policy",
                  "enum": [
                    "no",
                    "onFailure",
                    "always",
                    "unlessStopped"
                  ]
                },
                "restartMaxRetries": {
                  "type": "string",
                  "description": "Maximum Restart Retries"
                },
                "customCommand": {
                  "type": "string",
                  "description": "Command"
                },
                "dockerHostEndpoint": {
                  "type": "string",
                  "description": "Docker Host Service Connection"
                },
                "enforceDockerNamingConvention": {
                  "type": "boolean",
                  "description": "Force image name to follow Docker naming convention"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "memory": {
                  "type": "string",
                  "description": "Memory limit"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Jenkins queue job\n\nQueue a job on a Jenkins server",
              
              "pattern": "^JenkinsQueueJob@2$"
            },
            "inputs": {
              "description": "Jenkins queue job inputs",
              "properties": {
                "serverEndpoint": {
                  "type": "string",
                  "description": "Jenkins service connection"
                },
                "jobName": {
                  "type": "string",
                  "description": "Job name"
                },
                "isMultibranchJob": {
                  "type": "boolean",
                  "description": "Job is of multibranch pipeline type"
                },
                "multibranchPipelineBranch": {
                  "type": "string",
                  "description": "Multibranch pipeline branch"
                },
                "captureConsole": {
                  "type": "boolean",
                  "description": "Capture console output and wait for completion"
                },
                "capturePipeline": {
                  "type": "boolean",
                  "description": "Capture pipeline output and wait for pipeline completion"
                },
                "isParameterizedJob": {
                  "type": "boolean",
                  "description": "Parameterized job"
                },
                "jobParameters": {
                  "type": "string",
                  "description": "Job parameters"
                },
                "failOnUnstableResult": {
                  "type": "boolean",
                  "description": "Fail on unstable result"
                },
                "retryCount": {
                  "type": "string",
                  "description": "Number of retries for failed connection"
                },
                "delayBetweenRetries": {
                  "type": "string",
                  "description": "Time between retries"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverEndpoint",
                "jobName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Jenkins Queue Job\n\nQueue a job on a Jenkins server",
              
              "pattern": "^JenkinsQueueJob@1$"
            },
            "inputs": {
              "description": "Jenkins Queue Job inputs",
              "properties": {
                "serverEndpoint": {
                  "type": "string",
                  "description": "Jenkins service endpoint"
                },
                "jobName": {
                  "type": "string",
                  "description": "Job name"
                },
                "isMultibranchJob": {
                  "type": "boolean",
                  "description": "Job is of Multibranch Pipeline type"
                },
                "multibranchPipelineBranch": {
                  "type": "string",
                  "description": "Multibranch Pipeline Branch"
                },
                "captureConsole": {
                  "type": "boolean",
                  "description": "Capture console output and wait for completion"
                },
                "capturePipeline": {
                  "type": "boolean",
                  "description": "Capture pipeline output and wait for pipeline completion"
                },
                "parameterizedJob": {
                  "type": "boolean",
                  "description": "Parameterized job"
                },
                "jobParameters": {
                  "type": "string",
                  "description": "Job parameters"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverEndpoint",
                "jobName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "FTP upload\n\nUpload files using FTP",
              
              "pattern": "^FtpUpload@2$"
            },
            "inputs": {
              "description": "FTP upload inputs",
              "properties": {
                "credentialsOption": {
                  "description": "Authentication Method",
                  "enum": [
                    "serviceEndpoint",
                    "inputs"
                  ]
                },
                "serverEndpoint": {
                  "type": "string",
                  "description": "FTP Service Connection"
                },
                "serverUrl": {
                  "type": "string",
                  "description": "Server URL"
                },
                "username": {
                  "type": "string",
                  "description": "Username"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                },
                "rootDirectory": {
                  "type": "string",
                  "description": "Root folder"
                },
                "filePatterns": {
                  "type": "string",
                  "description": "File patterns"
                },
                "remoteDirectory": {
                  "type": "string",
                  "description": "Remote directory"
                },
                "enableUtf8": {
                  "type": "boolean",
                  "description": "Enable UTF8 support"
                },
                "clean": {
                  "type": "boolean",
                  "description": "Delete remote directory"
                },
                "cleanContents": {
                  "type": "boolean",
                  "description": "Clear remote directory contents"
                },
                "preservePaths": {
                  "type": "boolean",
                  "description": "Preserve file paths"
                },
                "trustSSL": {
                  "type": "boolean",
                  "description": "Trust server certificate"
                },
                "customCmds": {
                  "type": "string",
                  "description": "FTP Commands"
                }
              },
              "additionalProperties": false,
              "required": [
                "rootDirectory"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "FTP upload\n\nUpload files using FTP",
              
              "pattern": "^FtpUpload@1$"
            },
            "inputs": {
              "description": "FTP upload inputs",
              "properties": {
                "credentialsOption": {
                  "description": "Authentication Method",
                  "enum": [
                    "serviceEndpoint",
                    "inputs"
                  ]
                },
                "serverEndpoint": {
                  "type": "string",
                  "description": "FTP Service Connection"
                },
                "serverUrl": {
                  "type": "string",
                  "description": "Server URL"
                },
                "username": {
                  "type": "string",
                  "description": "Username"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                },
                "rootDirectory": {
                  "type": "string",
                  "description": "Root folder"
                },
                "filePatterns": {
                  "type": "string",
                  "description": "File patterns"
                },
                "remoteDirectory": {
                  "type": "string",
                  "description": "Remote directory"
                },
                "clean": {
                  "type": "boolean",
                  "description": "Delete remote directory"
                },
                "cleanContents": {
                  "type": "boolean",
                  "description": "Clear remote directory contents"
                },
                "overwrite": {
                  "type": "boolean",
                  "description": "Overwrite"
                },
                "preservePaths": {
                  "type": "boolean",
                  "description": "Preserve file paths"
                },
                "trustSSL": {
                  "type": "boolean",
                  "description": "Trust server certificate"
                }
              },
              "additionalProperties": false,
              "required": [
                "rootDirectory"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Windows machine file copy\n\nCopy files to remote Windows machines",
              
              "pattern": "^WindowsMachineFileCopy@1$"
            },
            "inputs": {
              "description": "Windows machine file copy inputs",
              "properties": {
                "SourcePath": {
                  "type": "string",
                  "description": "Source"
                },
                "EnvironmentName": {
                  "type": "string",
                  "description": "Machines"
                },
                "AdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "AdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "TargetPath": {
                  "type": "string",
                  "description": "Destination Folder"
                },
                "CleanTargetBeforeCopy": {
                  "type": "boolean",
                  "description": "Clean Target"
                },
                "CopyFilesInParallel": {
                  "type": "boolean",
                  "description": "Copy Files in Parallel"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional Arguments"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "MachineNames": {
                  "type": "string",
                  "description": "Filter Criteria"
                }
              },
              "additionalProperties": false,
              "required": [
                "SourcePath",
                "TargetPath"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Windows machine file copy\n\nCopy files to remote Windows machines",
              
              "pattern": "^WindowsMachineFileCopy@2$"
            },
            "inputs": {
              "description": "Windows machine file copy inputs",
              "properties": {
                "SourcePath": {
                  "type": "string",
                  "description": "Source"
                },
                "MachineNames": {
                  "type": "string",
                  "description": "Machines"
                },
                "AdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "AdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "TargetPath": {
                  "type": "string",
                  "description": "Destination Folder"
                },
                "CleanTargetBeforeCopy": {
                  "type": "boolean",
                  "description": "Clean Target"
                },
                "CopyFilesInParallel": {
                  "type": "boolean",
                  "description": "Copy Files in Parallel"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional Arguments"
                }
              },
              "additionalProperties": false,
              "required": [
                "SourcePath",
                "MachineNames",
                "AdminUserName",
                "AdminPassword",
                "TargetPath"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Android Build\n\n[Deprecated]  Use Gradle",
              
              "pattern": "^AndroidBuild@1$"
            },
            "inputs": {
              "description": "Android Build inputs",
              "properties": {
                "gradleWrapper": {
                  "type": "string",
                  "description": "Location of Gradle Wrapper"
                },
                "gradleProj": {
                  "type": "string",
                  "description": "Project Directory"
                },
                "gradleArguments": {
                  "type": "string",
                  "description": "Gradle Arguments"
                },
                "avdName": {
                  "type": "string",
                  "description": "Name"
                },
                "createAvd": {
                  "type": "boolean",
                  "description": "Create AVD"
                },
                "emulatorTarget": {
                  "type": "string",
                  "description": "AVD Target SDK"
                },
                "emulatorDevice": {
                  "type": "string",
                  "description": "AVD Device"
                },
                "avdAbi": {
                  "type": "string",
                  "description": "AVD ABI"
                },
                "avdForce": {
                  "type": "boolean",
                  "description": "Overwrite Existing AVD"
                },
                "avdOptionalArgs": {
                  "type": "string",
                  "description": "Create AVD Optional Arguments"
                },
                "startEmulator": {
                  "type": "boolean",
                  "description": "Start and Stop Android Emulator"
                },
                "emulatorTimeout": {
                  "type": "string",
                  "description": "Timeout in Seconds"
                },
                "emulatorHeadless": {
                  "type": "boolean",
                  "description": "Headless Display"
                },
                "emulatorOptionalArgs": {
                  "type": "string",
                  "description": "Emulator Optional Arguments"
                },
                "deleteAvd": {
                  "type": "boolean",
                  "description": "Delete AVD"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "AndroidBuild is deprecated - [Deprecated]  Use Gradle",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Python twine upload authenticate\n\nAuthenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
              
              "pattern": "^TwineAuthenticate@1$"
            },
            "inputs": {
              "description": "Python twine upload authenticate inputs",
              "properties": {
                "artifactFeed": {
                  "type": "string",
                  "description": "My feed (select below)"
                },
                "pythonUploadServiceConnection": {
                  "type": "string",
                  "description": "Feed from external organizations"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Python twine upload authenticate\n\nAuthenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
              
              "pattern": "^TwineAuthenticate@0$"
            },
            "inputs": {
              "description": "Python twine upload authenticate inputs",
              "properties": {
                "artifactFeeds": {
                  "type": "string",
                  "description": "My feeds (select below)"
                },
                "externalFeeds": {
                  "type": "string",
                  "description": "Feeds from external organizations"
                },
                "publishPackageMetadata": {
                  "type": "boolean",
                  "description": "Publish pipeline metadata"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "IIS web app deploy\n\nDeploy a website or web application using Web Deploy",
              
              "pattern": "^IISWebAppDeploymentOnMachineGroup@0$"
            },
            "inputs": {
              "description": "IIS web app deploy inputs",
              "properties": {
                "WebSiteName": {
                  "type": "string",
                  "description": "Website Name"
                },
                "VirtualApplication": {
                  "type": "string",
                  "description": "Virtual Application"
                },
                "Package": {
                  "type": "string",
                  "description": "Package or Folder"
                },
                "SetParametersFile": {
                  "type": "string",
                  "description": "SetParameters File"
                },
                "RemoveAdditionalFilesFlag": {
                  "type": "boolean",
                  "description": "Remove Additional Files at Destination"
                },
                "ExcludeFilesFromAppDataFlag": {
                  "type": "boolean",
                  "description": "Exclude Files from the App_Data Folder"
                },
                "TakeAppOfflineFlag": {
                  "type": "boolean",
                  "description": "Take App Offline"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional Arguments"
                },
                "XmlTransformation": {
                  "type": "boolean",
                  "description": "XML transformation"
                },
                "XmlVariableSubstitution": {
                  "type": "boolean",
                  "description": "XML variable substitution"
                },
                "JSONFiles": {
                  "type": "string",
                  "description": "JSON variable substitution"
                }
              },
              "additionalProperties": false,
              "required": [
                "WebSiteName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Python script\n\nRun a Python file or inline script",
              
              "pattern": "^PythonScript@0$"
            },
            "inputs": {
              "description": "Python script inputs",
              "properties": {
                "scriptSource": {
                  "description": "Script source",
                  "enum": [
                    "filePath",
                    "inline"
                  ]
                },
                "scriptPath": {
                  "type": "string",
                  "description": "Script path"
                },
                "script": {
                  "type": "string",
                  "description": "Script"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "pythonInterpreter": {
                  "type": "string",
                  "description": "Python interpreter"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "failOnStderr": {
                  "type": "boolean",
                  "description": "Fail on standard error"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Helm tool installer\n\nInstall Helm on an agent machine",
              
              "pattern": "^HelmInstaller@1$"
            },
            "inputs": {
              "description": "Helm tool installer inputs",
              "properties": {
                "helmVersionToInstall": {
                  "type": "string",
                  "description": "Helm Version Spec"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Helm tool installer\n\nInstall Helm and Kubernetes on an agent machine",
              
              "pattern": "^HelmInstaller@0$"
            },
            "inputs": {
              "description": "Helm tool installer inputs",
              "properties": {
                "helmVersion": {
                  "type": "string",
                  "description": "Helm Version Spec"
                },
                "checkLatestHelmVersion": {
                  "type": "boolean",
                  "description": "Check for latest version of Helm"
                },
                "installKubectl": {
                  "type": "boolean",
                  "description": "Install Kubectl"
                },
                "kubectlVersion": {
                  "type": "string",
                  "description": "Kubectl Version Spec"
                },
                "checkLatestKubectl": {
                  "type": "boolean",
                  "description": "Check for latest version of kubectl"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xamarin License\n\n[Deprecated] Upgrade to free version of Xamarin: https://store.xamarin.com",
              
              "pattern": "^XamarinLicense@1$"
            },
            "inputs": {
              "description": "Xamarin License inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "Activate",
                    "Deactivate"
                  ]
                },
                "email": {
                  "type": "string",
                  "description": "Email"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                },
                "product": {
                  "description": "Xamarin Product",
                  "enum": [
                    "MA",
                    "MT",
                    "MM"
                  ]
                },
                "timeout": {
                  "type": "string",
                  "description": "Timeout in Seconds"
                }
              },
              "additionalProperties": false,
              "required": [
                "email",
                "password"
              ]
            }
          },
          "$comment": "XamarinLicense is deprecated - [Deprecated] Upgrade to free version of Xamarin: https://store.xamarin.com",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet authenticate\n\nThis version of the task is deprecated, use NuGetAuthenticateV1 instead. Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 2.1.400, or MSBuild >= 15.8.166.59604.",
              
              "pattern": "^NuGetAuthenticate@0$"
            },
            "inputs": {
              "description": "NuGet authenticate inputs",
              "properties": {
                "nuGetServiceConnections": {
                  "type": "string",
                  "description": "Service connection credentials for feeds outside this organization"
                },
                "forceReinstallCredentialProvider": {
                  "type": "boolean",
                  "description": "Reinstall the credential provider even if already installed"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "NuGetAuthenticate is deprecated - This version of the task is deprecated, use NuGetAuthenticateV1 instead. Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 2.1.400, or MSBuild >= 15.8.166.59604.",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet authenticate\n\nConfigure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 6, or MSBuild >= 15.8.166.59604",
              
              "pattern": "^NuGetAuthenticate@1$"
            },
            "inputs": {
              "description": "NuGet authenticate inputs",
              "properties": {
                "nuGetServiceConnections": {
                  "type": "string",
                  "description": "Service connection credentials for feeds outside this organization"
                },
                "forceReinstallCredentialProvider": {
                  "type": "boolean",
                  "description": "Reinstall the credential provider even if already installed"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download GitHub Nuget Packages\n\nRestore your nuget packages using dotnet CLI",
              
              "pattern": "^DownloadGitHubNugetPackage@1$"
            },
            "inputs": {
              "description": "Download GitHub Nuget Packages inputs",
              "properties": {
                "packageName": {
                  "type": "string",
                  "description": "Package Name"
                },
                "version": {
                  "type": "string",
                  "description": "Package Version"
                },
                "externalFeedCredentials": {
                  "type": "string",
                  "description": "Credentials for feed from GitHub"
                },
                "restoreDirectory": {
                  "type": "string",
                  "description": "Destination directory"
                }
              },
              "additionalProperties": false,
              "required": [
                "packageName",
                "version"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Maven Authenticate\n\nProvides credentials for Azure Artifacts feeds and external maven repositories",
              
              "pattern": "^MavenAuthenticate@0$"
            },
            "inputs": {
              "description": "Maven Authenticate inputs",
              "properties": {
                "artifactsFeeds": {
                  "type": "string",
                  "description": "Feeds"
                },
                "mavenServiceConnections": {
                  "type": "string",
                  "description": "Credentials for repositories outside this organization/collection"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Review App\n\nUse this task under deploy phase provider to create a resource dynamically",
              
              "pattern": "^ReviewApp@0$"
            },
            "inputs": {
              "description": "Review App inputs",
              "properties": {
                "resourceName": {
                  "type": "string",
                  "description": "Resource name"
                },
                "baseEnvironmentName": {
                  "type": "string",
                  "description": "Environment name"
                },
                "reviewResourceName": {
                  "type": "string",
                  "description": "Review Resource Name"
                }
              },
              "additionalProperties": false,
              "required": [
                "resourceName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Java tool installer\n\nAcquire a specific version of Java from a user-supplied Azure blob or the tool cache and sets JAVA_HOME",
              
              "pattern": "^JavaToolInstaller@0$"
            },
            "inputs": {
              "description": "Java tool installer inputs",
              "properties": {
                "versionSpec": {
                  "type": "string",
                  "description": "JDK version"
                },
                "jdkArchitectureOption": {
                  "description": "JDK architecture",
                  "enum": [
                    "x64",
                    "x86"
                  ]
                },
                "jdkSourceOption": {
                  "description": "JDK source",
                  "enum": [
                    "AzureStorage",
                    "LocalDirectory",
                    "PreInstalled"
                  ]
                },
                "jdkFile": {
                  "type": "string",
                  "description": "JDK file"
                },
                "azureResourceManagerEndpoint": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "azureStorageAccountName": {
                  "type": "string",
                  "description": "Storage account name"
                },
                "azureContainerName": {
                  "type": "string",
                  "description": "Container name"
                },
                "azureCommonVirtualFile": {
                  "type": "string",
                  "description": "Common virtual path"
                },
                "jdkDestinationDirectory": {
                  "type": "string",
                  "description": "Destination directory"
                },
                "cleanDestinationDirectory": {
                  "type": "boolean",
                  "description": "Clean destination directory"
                },
                "createExtractDirectory": {
                  "type": "boolean",
                  "description": "Create directory for extracting"
                }
              },
              "additionalProperties": false,
              "required": [
                "jdkArchitectureOption",
                "jdkSourceOption"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Chef\n\nDeploy to Chef environments by editing environment attributes",
              
              "pattern": "^Chef@1$"
            },
            "inputs": {
              "description": "Chef inputs",
              "properties": {
                "connectedServiceName": {
                  "type": "string",
                  "description": "Chef Service Connection"
                },
                "Environment": {
                  "type": "string",
                  "description": "Environment"
                },
                "Attributes": {
                  "type": "string",
                  "description": "Environment Attributes"
                },
                "chefWaitTime": {
                  "type": "string",
                  "description": "Wait Time"
                }
              },
              "additionalProperties": false,
              "required": [
                "connectedServiceName",
                "Environment",
                "Attributes"
              ]
            }
          },
          "$comment": "Chef is deprecated - Deploy to Chef environments by editing environment attributes",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Functions\n\nUpdate a function app with .NET, Python, JavaScript, PowerShell, Java based web applications",
              
              "pattern": "^AzureFunctionApp@1$"
            },
            "inputs": {
              "description": "Azure Functions inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "appType": {
                  "description": "App type",
                  "enum": [
                    "functionApp",
                    "functionAppLinux"
                  ]
                },
                "appName": {
                  "type": "string",
                  "description": "Azure Functions App name"
                },
                "deployToSlotOrASE": {
                  "type": "boolean",
                  "description": "Deploy to Slot or App Service Environment"
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "slotName": {
                  "type": "string",
                  "description": "Slot"
                },
                "package": {
                  "type": "string",
                  "description": "Package or folder"
                },
                "runtimeStack": {
                  "description": "Runtime stack",
                  "enum": [
                    "DOTNET|2.2",
                    "DOTNET|3.1",
                    "DOTNET|6.0",
                    "JAVA|8",
                    "JAVA|11",
                    "NODE|8",
                    "NODE|10",
                    "NODE|12",
                    "NODE|14",
                    "NODE|16",
                    "PYTHON|3.6",
                    "PYTHON|3.7",
                    "PYTHON|3.8",
                    "PYTHON|3.9"
                  ]
                },
                "startUpCommand": {
                  "type": "string",
                  "description": "Startup command "
                },
                "customWebConfig": {
                  "type": "string",
                  "description": "Generate web.config parameters for Python, Node.js, Go and Java apps"
                },
                "appSettings": {
                  "type": "string",
                  "description": "App settings"
                },
                "configurationStrings": {
                  "type": "string",
                  "description": "Configuration settings"
                },
                "deploymentMethod": {
                  "description": "Deployment method",
                  "enum": [
                    "auto",
                    "zipDeploy",
                    "runFromPackage"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "appType",
                "appName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "npm authenticate (for task runners)\n\nDon't use this task if you're also using the npm task. Provides npm credentials to an .npmrc file in your repository for the scope of the build. This enables npm task runners like gulp and Grunt to authenticate with private registries.",
              
              "pattern": "^npmAuthenticate@0$"
            },
            "inputs": {
              "description": "npm authenticate (for task runners) inputs",
              "properties": {
                "workingFile": {
                  "type": "string",
                  "description": ".npmrc file to authenticate"
                },
                "customEndpoint": {
                  "type": "string",
                  "description": "Credentials for registries outside this organization/collection"
                }
              },
              "additionalProperties": false,
              "required": [
                "workingFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "MSBuild\n\nBuild with MSBuild",
              
              "pattern": "^MSBuild@1$"
            },
            "inputs": {
              "description": "MSBuild inputs",
              "properties": {
                "solution": {
                  "type": "string",
                  "description": "Project"
                },
                "msbuildLocationMethod": {
                  "description": "MSBuild",
                  "enum": [
                    "version",
                    "location"
                  ]
                },
                "msbuildVersion": {
                  "description": "MSBuild Version",
                  "enum": [
                    "latest",
                    "17.0",
                    "16.0",
                    "15.0",
                    "14.0",
                    "12.0",
                    "4.0"
                  ]
                },
                "msbuildArchitecture": {
                  "description": "MSBuild Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                },
                "msbuildLocation": {
                  "type": "string",
                  "description": "Path to MSBuild"
                },
                "platform": {
                  "type": "string",
                  "description": "Platform"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "msbuildArguments": {
                  "type": "string",
                  "description": "MSBuild Arguments"
                },
                "clean": {
                  "type": "boolean",
                  "description": "Clean"
                },
                "maximumCpuCount": {
                  "type": "boolean",
                  "description": "Build in Parallel"
                },
                "restoreNugetPackages": {
                  "type": "boolean",
                  "description": "Restore NuGet Packages"
                },
                "logProjectEvents": {
                  "type": "boolean",
                  "description": "Record Project Details"
                },
                "createLogFile": {
                  "type": "boolean",
                  "description": "Create Log File"
                },
                "logFileVerbosity": {
                  "description": "Log File Verbosity",
                  "enum": [
                    "quiet",
                    "minimal",
                    "normal",
                    "detailed",
                    "diagnostic"
                  ]
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Build machine image\n\nBuild a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
              
              "pattern": "^PackerBuild@1$"
            },
            "inputs": {
              "description": "Build machine image inputs",
              "properties": {
                "templateType": {
                  "description": "Packer template",
                  "enum": [
                    "builtin",
                    "custom"
                  ]
                },
                "customTemplateLocation": {
                  "type": "string",
                  "description": "Packer template location"
                },
                "customTemplateParameters": {
                  "type": "string",
                  "description": "Template parameters"
                },
                "ConnectedServiceName": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "isManagedImage": {
                  "type": "boolean",
                  "description": "Managed VM disk image"
                },
                "managedImageName": {
                  "type": "string",
                  "description": "Managed VM Disk Image Name "
                },
                "location": {
                  "type": "string",
                  "description": "Storage location"
                },
                "storageAccountName": {
                  "type": "string",
                  "description": "Storage account"
                },
                "azureResourceGroup": {
                  "type": "string",
                  "description": "Resource group"
                },
                "baseImageSource": {
                  "description": "Base image source",
                  "enum": [
                    "default",
                    "customVhd"
                  ]
                },
                "baseImage": {
                  "description": "Base image",
                  "enum": [
                    "MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2016-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2012-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2008-R2-SP1:windows",
                    "Canonical:UbuntuServer:14.04.4-LTS:linux",
                    "Canonical:UbuntuServer:16.04-LTS:linux",
                    "Canonical:UbuntuServer:18.04-LTS:linux",
                    "RedHat:RHEL:7.2:linux",
                    "RedHat:RHEL:6.8:linux",
                    "OpenLogic:CentOS:7.2:linux",
                    "OpenLogic:CentOS:6.8:linux",
                    "credativ:Debian:8:linux",
                    "credativ:Debian:7:linux",
                    "SUSE:openSUSE-Leap:42.2:linux",
                    "SUSE:SLES:12-SP2:linux",
                    "SUSE:SLES:11-SP4:linux"
                  ]
                },
                "customImageUrl": {
                  "type": "string",
                  "description": "Base image URL"
                },
                "customImageOSType": {
                  "description": "Base image OS",
                  "enum": [
                    "windows",
                    "linux"
                  ]
                },
                "packagePath": {
                  "type": "string",
                  "description": "Deployment Package"
                },
                "deployScriptPath": {
                  "type": "string",
                  "description": "Deployment script"
                },
                "deployScriptArguments": {
                  "type": "string",
                  "description": "Deployment script arguments"
                },
                "additionalBuilderParameters": {
                  "type": "string",
                  "description": "Additional Builder parameters"
                },
                "skipTempFileCleanupDuringVMDeprovision": {
                  "type": "boolean",
                  "description": "Skip temporary file cleanup during deprovision"
                },
                "packerVersion": {
                  "type": "string",
                  "description": "Packer Version"
                },
                "imageUri": {
                  "type": "string",
                  "description": "Image URL or Name"
                },
                "imageId": {
                  "type": "string",
                  "description": "Azure Resource Id"
                }
              },
              "additionalProperties": false,
              "required": [
                "ConnectedServiceName",
                "location",
                "storageAccountName",
                "azureResourceGroup",
                "packagePath",
                "deployScriptPath"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Build machine image\n\nBuild a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
              
              "pattern": "^PackerBuild@0$"
            },
            "inputs": {
              "description": "Build machine image inputs",
              "properties": {
                "templateType": {
                  "description": "Packer template",
                  "enum": [
                    "builtin",
                    "custom"
                  ]
                },
                "customTemplateLocation": {
                  "type": "string",
                  "description": "Packer template location"
                },
                "customTemplateParameters": {
                  "type": "string",
                  "description": "Template parameters"
                },
                "ConnectedServiceName": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "location": {
                  "type": "string",
                  "description": "Storage location"
                },
                "storageAccountName": {
                  "type": "string",
                  "description": "Storage account"
                },
                "azureResourceGroup": {
                  "type": "string",
                  "description": "Resource group"
                },
                "baseImageSource": {
                  "description": "Base image source",
                  "enum": [
                    "default",
                    "customVhd"
                  ]
                },
                "baseImage": {
                  "description": "Base image",
                  "enum": [
                    "MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2016-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2012-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2008-R2-SP1:windows",
                    "Canonical:UbuntuServer:14.04.4-LTS:linux",
                    "Canonical:UbuntuServer:16.04-LTS:linux",
                    "RedHat:RHEL:7.2:linux",
                    "RedHat:RHEL:6.8:linux",
                    "OpenLogic:CentOS:7.2:linux",
                    "OpenLogic:CentOS:6.8:linux",
                    "credativ:Debian:8:linux",
                    "credativ:Debian:7:linux",
                    "SUSE:openSUSE-Leap:42.2:linux",
                    "SUSE:SLES:12-SP2:linux",
                    "SUSE:SLES:11-SP4:linux"
                  ]
                },
                "customImageUrl": {
                  "type": "string",
                  "description": "Base image URL"
                },
                "customImageOSType": {
                  "description": "Base image OS",
                  "enum": [
                    "windows",
                    "linux"
                  ]
                },
                "packagePath": {
                  "type": "string",
                  "description": "Deployment Package"
                },
                "deployScriptPath": {
                  "type": "string",
                  "description": "Deployment script"
                },
                "deployScriptArguments": {
                  "type": "string",
                  "description": "Deployment script arguments"
                },
                "additionalBuilderParameters": {
                  "type": "string",
                  "description": "Additional Builder parameters"
                },
                "skipTempFileCleanupDuringVMDeprovision": {
                  "type": "boolean",
                  "description": "Skip temporary file cleanup during deprovision"
                },
                "imageUri": {
                  "type": "string",
                  "description": "Image URL"
                }
              },
              "additionalProperties": false,
              "required": [
                "ConnectedServiceName",
                "location",
                "storageAccountName",
                "azureResourceGroup",
                "packagePath",
                "deployScriptPath"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet packager\n\nDeprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              
              "pattern": "^NuGetPackager@0$"
            },
            "inputs": {
              "description": "NuGet packager inputs",
              "properties": {
                "searchPattern": {
                  "type": "string",
                  "description": "Path to csproj or nuspec file(s) to pack"
                },
                "outputdir": {
                  "type": "string",
                  "description": "Package Folder"
                },
                "includeReferencedProjects": {
                  "type": "boolean",
                  "description": "Include referenced projects"
                },
                "versionByBuild": {
                  "description": "Automatic package versioning",
                  "enum": [
                    "false",
                    "byPrereleaseNumber",
                    "byEnvVar",
                    "true"
                  ]
                },
                "versionEnvVar": {
                  "type": "string",
                  "description": "Environment variable"
                },
                "requestedMajorVersion": {
                  "type": "string",
                  "description": "Major"
                },
                "requestedMinorVersion": {
                  "type": "string",
                  "description": "Minor"
                },
                "requestedPatchVersion": {
                  "type": "string",
                  "description": "Patch"
                },
                "configurationToPack": {
                  "type": "string",
                  "description": "Configuration to Package"
                },
                "buildProperties": {
                  "type": "string",
                  "description": "Additional build properties"
                },
                "nuGetAdditionalArgs": {
                  "type": "string",
                  "description": "NuGet Arguments"
                },
                "nuGetPath": {
                  "type": "string",
                  "description": "Path to NuGet.exe"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "NuGetPackager is deprecated - Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Update Service Fabric App Versions\n\nAutomatically updates the versions of a packaged Service Fabric application.",
              
              "pattern": "^ServiceFabricUpdateAppVersions@1$"
            },
            "inputs": {
              "description": "Update Service Fabric App Versions inputs",
              "properties": {
                "applicationPackagePath": {
                  "type": "string",
                  "description": "Application Package"
                },
                "versionSuffix": {
                  "type": "string",
                  "description": "Version Value"
                },
                "versionBehavior": {
                  "description": "Version Behavior",
                  "enum": [
                    "Append",
                    "Replace"
                  ]
                },
                "updateOnlyChanged": {
                  "type": "boolean",
                  "description": "Update only if changed"
                },
                "pkgArtifactName": {
                  "type": "string",
                  "description": "Package Artifact Name"
                },
                "logAllChanges": {
                  "type": "boolean",
                  "description": "Log all changes"
                },
                "compareType": {
                  "description": "Compare against",
                  "enum": [
                    "LastSuccessful",
                    "Specific"
                  ]
                },
                "buildNumber": {
                  "type": "string",
                  "description": "Build Number"
                }
              },
              "additionalProperties": false,
              "required": [
                "applicationPackagePath"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Update Service Fabric manifests\n\nAutomatically update portions of application and service manifests in a packaged Azure Service Fabric application",
              
              "pattern": "^ServiceFabricUpdateManifests@2$"
            },
            "inputs": {
              "description": "Update Service Fabric manifests inputs",
              "properties": {
                "updateType": {
                  "description": "Update Type",
                  "enum": [
                    "Manifest versions",
                    "Docker image settings"
                  ]
                },
                "applicationPackagePath": {
                  "type": "string",
                  "description": "Application Package"
                },
                "versionSuffix": {
                  "type": "string",
                  "description": "Version Value"
                },
                "versionBehavior": {
                  "description": "Version Behavior",
                  "enum": [
                    "Append",
                    "Replace"
                  ]
                },
                "updateOnlyChanged": {
                  "type": "boolean",
                  "description": "Update only if changed"
                },
                "pkgArtifactName": {
                  "type": "string",
                  "description": "Package Artifact Name"
                },
                "logAllChanges": {
                  "type": "boolean",
                  "description": "Log all changes"
                },
                "compareType": {
                  "description": "Compare against",
                  "enum": [
                    "LastSuccessful",
                    "Specific"
                  ]
                },
                "buildNumber": {
                  "type": "string",
                  "description": "Build Number"
                },
                "overwriteExistingPkgArtifact": {
                  "type": "boolean",
                  "description": "Overwrite Existing Package Artifact"
                },
                "imageNamesPath": {
                  "type": "string",
                  "description": "Image Names Path"
                },
                "imageDigestsPath": {
                  "type": "string",
                  "description": "Image Digests Path"
                }
              },
              "additionalProperties": false,
              "required": [
                "applicationPackagePath"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Duffle tool installer\n\nInstall a specified version of Duffle for installing and managing CNAB bundles",
              
              "pattern": "^DuffleInstaller@0$"
            },
            "inputs": {
              "description": "Duffle tool installer inputs",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "Version"
                },
                "checkLatestVersion": {
                  "type": "boolean",
                  "description": "Check for latest version"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Query Azure Monitor alerts\n\nObserve the configured Azure Monitor rules for active alerts",
              
              "pattern": "^AzureMonitor@1$"
            },
            "inputs": {
              "description": "Query Azure Monitor alerts inputs",
              "properties": {
                "connectedServiceNameARM": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "ResourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "filterType": {
                  "description": "Filter type",
                  "enum": [
                    "resource",
                    "alertrule",
                    "none"
                  ]
                },
                "resource": {
                  "type": "string",
                  "description": "Resource"
                },
                "alertRule": {
                  "type": "string",
                  "description": "Alert rule"
                },
                "severity": {
                  "description": "Severity",
                  "enum": [
                    "Sev0",
                    "Sev1",
                    "Sev2",
                    "Sev3",
                    "Sev4"
                  ]
                },
                "timeRange": {
                  "description": "Time range",
                  "enum": [
                    "1h",
                    "1d",
                    "7d",
                    "30d"
                  ]
                },
                "alertState": {
                  "description": "Alert state",
                  "enum": [
                    "New",
                    "Acknowledged",
                    "Closed"
                  ]
                },
                "monitorCondition": {
                  "description": "Monitor condition",
                  "enum": [
                    "Fired ",
                    "Resolved"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "connectedServiceNameARM",
                "ResourceGroupName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Query Classic Azure Monitor alerts\n\nObserve the configured classic Azure Monitor rules for active alerts",
              
              "pattern": "^AzureMonitor@0$"
            },
            "inputs": {
              "description": "Query Classic Azure Monitor alerts inputs",
              "properties": {
                "connectedServiceNameARM": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "ResourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "ResourceType": {
                  "description": "Resource type",
                  "enum": [
                    "Microsoft.Insights/components",
                    "Microsoft.Web/sites",
                    "Microsoft.Storage/storageAccounts",
                    "Microsoft.Compute/virtualMachines"
                  ]
                },
                "resourceName": {
                  "type": "string",
                  "description": "Resource name"
                },
                "alertRules": {
                  "type": "string",
                  "description": "Alert rules"
                }
              },
              "additionalProperties": false,
              "required": [
                "connectedServiceNameARM",
                "ResourceGroupName",
                "resourceName",
                "alertRules"
              ]
            }
          },
          "$comment": "AzureMonitor is deprecated - Observe the configured classic Azure Monitor rules for active alerts",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Network Load Balancer\n\nConnect or disconnect an Azure virtual machine's network interface to a Load Balancer's back end address pool",
              
              "pattern": "^AzureNLBManagement@1$"
            },
            "inputs": {
              "description": "Azure Network Load Balancer inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "ResourceGroupName": {
                  "type": "string",
                  "description": "Resource Group"
                },
                "LoadBalancer": {
                  "type": "string",
                  "description": "Load Balancer Name"
                },
                "Action": {
                  "description": "Action",
                  "enum": [
                    "Disconnect",
                    "Connect"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "ResourceGroupName",
                "LoadBalancer",
                "Action"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Cloud-based Apache JMeter load test\n\nRun an Apache JMeter load test in the cloud",
              
              "pattern": "^ApacheJMeterLoadTest@1$"
            },
            "inputs": {
              "description": "Cloud-based Apache JMeter load test inputs",
              "properties": {
                "connectedServiceName": {
                  "type": "string",
                  "description": "Azure Pipelines Connection"
                },
                "TestDrop": {
                  "type": "string",
                  "description": "Apache JMeter test files folder"
                },
                "LoadTest": {
                  "type": "string",
                  "description": "Apache JMeter file"
                },
                "agentCount": {
                  "description": "Agent Count",
                  "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ]
                },
                "runDuration": {
                  "description": "Run Duration (sec)",
                  "enum": [
                    "60",
                    "120",
                    "180",
                    "240",
                    "300"
                  ]
                },
                "geoLocation": {
                  "description": "Load Location",
                  "enum": [
                    "Default",
                    "Australia East",
                    "Australia Southeast",
                    "Brazil South",
                    "Central India",
                    "Central US",
                    "East Asia",
                    "East US 2",
                    "East US",
                    "Japan East",
                    "Japan West",
                    "North Central US",
                    "North Europe",
                    "South Central US",
                    "South India",
                    "Southeast Asia",
                    "West Europe",
                    "West US"
                  ]
                },
                "machineType": {
                  "description": "Run load test using",
                  "enum": [
                    "0",
                    "2"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "TestDrop"
              ]
            }
          },
          "$comment": "ApacheJMeterLoadTest is deprecated - Run an Apache JMeter load test in the cloud",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Docker Compose\n\nBuild, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.",
              
              "pattern": "^DockerCompose@0$"
            },
            "inputs": {
              "description": "Docker Compose inputs",
              "properties": {
                "containerregistrytype": {
                  "description": "Container Registry Type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ]
                },
                "dockerRegistryEndpoint": {
                  "type": "string",
                  "description": "Docker Registry Service Connection"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "azureContainerRegistry": {
                  "type": "string",
                  "description": "Azure Container Registry"
                },
                "dockerComposeFile": {
                  "type": "string",
                  "description": "Docker Compose File"
                },
                "additionalDockerComposeFiles": {
                  "type": "string",
                  "description": "Additional Docker Compose Files"
                },
                "dockerComposeFileArgs": {
                  "type": "string",
                  "description": "Environment Variables"
                },
                "projectName": {
                  "type": "string",
                  "description": "Project Name"
                },
                "qualifyImageNames": {
                  "type": "boolean",
                  "description": "Qualify Image Names"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "Build services",
                    "Push services",
                    "Run services",
                    "Run a specific service",
                    "Lock services",
                    "Write service image digests",
                    "Combine configuration",
                    "Run a Docker Compose command"
                  ]
                },
                "additionalImageTags": {
                  "type": "string",
                  "description": "Additional Image Tags"
                },
                "includeSourceTags": {
                  "type": "boolean",
                  "description": "Include Source Tags"
                },
                "includeLatestTag": {
                  "type": "boolean",
                  "description": "Include Latest Tag"
                },
                "buildImages": {
                  "type": "boolean",
                  "description": "Build Images"
                },
                "serviceName": {
                  "type": "string",
                  "description": "Service Name"
                },
                "containerName": {
                  "type": "string",
                  "description": "Container Name"
                },
                "ports": {
                  "type": "string",
                  "description": "Ports"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "entrypoint": {
                  "type": "string",
                  "description": "Entry Point Override"
                },
                "containerCommand": {
                  "type": "string",
                  "description": "Command"
                },
                "detached": {
                  "type": "boolean",
                  "description": "Run in Background"
                },
                "abortOnContainerExit": {
                  "type": "boolean",
                  "description": "Abort on Container Exit"
                },
                "imageDigestComposeFile": {
                  "type": "string",
                  "description": "Image Digest Compose File"
                },
                "removeBuildOptions": {
                  "type": "boolean",
                  "description": "Remove Build Options"
                },
                "baseResolveDirectory": {
                  "type": "string",
                  "description": "Base Resolve Directory"
                },
                "outputDockerComposeFile": {
                  "type": "string",
                  "description": "Output Docker Compose File"
                },
                "dockerComposeCommand": {
                  "type": "string",
                  "description": "Command"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "dockerHostEndpoint": {
                  "type": "string",
                  "description": "Docker Host Service Connection"
                },
                "nopIfNoDockerComposeFile": {
                  "type": "boolean",
                  "description": "No-op if no Docker Compose File"
                },
                "requireAdditionalDockerComposeFiles": {
                  "type": "boolean",
                  "description": "Require Additional Docker Compose Files"
                },
                "currentWorkingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "dockerComposePath": {
                  "type": "string",
                  "description": "Docker Compose executable Path"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Monitor alerts (Deprecated)\n\nConfigure alerts on available metrics for an Azure resource (Deprecated)",
              
              "pattern": "^AzureMonitorAlerts@0$"
            },
            "inputs": {
              "description": "Azure Monitor alerts (Deprecated) inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "ResourceGroupName": {
                  "type": "string",
                  "description": "Resource Group"
                },
                "ResourceType": {
                  "description": "Resource Type",
                  "enum": [
                    "Microsoft.Insights/components",
                    "Microsoft.Web/sites",
                    "Microsoft.Storage/storageAccounts",
                    "Microsoft.Compute/virtualMachines"
                  ]
                },
                "ResourceName": {
                  "type": "string",
                  "description": "Resource name"
                },
                "AlertRules": {
                  "type": "string",
                  "description": "Alert rules"
                },
                "NotifyServiceOwners": {
                  "type": "boolean",
                  "description": "Subscription owners, contributors and readers"
                },
                "NotifyEmails": {
                  "type": "string",
                  "description": "Additional administrator emails"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "ResourceGroupName",
                "ResourceName",
                "AlertRules"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xamarin Test Cloud\n\n[Deprecated] Test mobile apps with Xamarin Test Cloud using Xamarin.UITest. Instead, use the 'App Center test' task.",
              
              "pattern": "^XamarinTestCloud@1$"
            },
            "inputs": {
              "description": "Xamarin Test Cloud inputs",
              "properties": {
                "appFile": {
                  "type": "string",
                  "description": "App file"
                },
                "dsymFile": {
                  "type": "string",
                  "description": "dSYM file (iOS only)"
                },
                "teamApiKey": {
                  "type": "string",
                  "description": "Team API key"
                },
                "email": {
                  "type": "string",
                  "description": "User email"
                },
                "devices": {
                  "type": "string",
                  "description": "Devices"
                },
                "series": {
                  "type": "string",
                  "description": "Series"
                },
                "testAssemblyDirectory": {
                  "type": "string",
                  "description": "Test assembly directory"
                },
                "parallelizationOption": {
                  "description": "Parallelization",
                  "enum": [
                    "none",
                    "--fixture-chunk",
                    "--test-chunk"
                  ]
                },
                "localeOption": {
                  "description": "System language",
                  "enum": [
                    "da_DK",
                    "nl_NL",
                    "en_GB",
                    "en_US",
                    "fr_FR",
                    "de_DE",
                    "ja_JP",
                    "ru_RU",
                    "es_MX",
                    "es_ES",
                    "user"
                  ]
                },
                "userDefinedLocale": {
                  "type": "string",
                  "description": "Other locale"
                },
                "testCloudFile": {
                  "type": "string",
                  "description": "test-cloud.exe location"
                },
                "optionalArgs": {
                  "type": "string",
                  "description": "Optional arguments"
                },
                "publishNUnitResults": {
                  "type": "boolean",
                  "description": "Publish results to Azure Pipelines"
                }
              },
              "additionalProperties": false,
              "required": [
                "appFile",
                "teamApiKey",
                "email",
                "devices",
                "testAssemblyDirectory"
              ]
            }
          },
          "$comment": "XamarinTestCloud is deprecated - [Deprecated] Test mobile apps with Xamarin Test Cloud using Xamarin.UITest. Instead, use the 'App Center test' task.",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Service Fabric application deployment\n\nDeploy an Azure Service Fabric application to a cluster",
              
              "pattern": "^ServiceFabricDeploy@1$"
            },
            "inputs": {
              "description": "Service Fabric application deployment inputs",
              "properties": {
                "applicationPackagePath": {
                  "type": "string",
                  "description": "Application Package"
                },
                "serviceConnectionName": {
                  "type": "string",
                  "description": "Cluster Service Connection"
                },
                "publishProfilePath": {
                  "type": "string",
                  "description": "Publish Profile"
                },
                "applicationParameterPath": {
                  "type": "string",
                  "description": "Application Parameters"
                },
                "overrideApplicationParameter": {
                  "type": "boolean",
                  "description": "Override Application Parameters"
                },
                "compressPackage": {
                  "type": "boolean",
                  "description": "Compress Package"
                },
                "copyPackageTimeoutSec": {
                  "type": "string",
                  "description": "CopyPackageTimeoutSec"
                },
                "registerPackageTimeoutSec": {
                  "type": "string",
                  "description": "RegisterPackageTimeoutSec"
                },
                "overwriteBehavior": {
                  "description": "Overwrite Behavior",
                  "enum": [
                    "Always",
                    "Never",
                    "SameAppTypeAndVersion"
                  ]
                },
                "skipUpgradeSameTypeAndVersion": {
                  "type": "boolean",
                  "description": "Skip upgrade for same Type and Version"
                },
                "skipPackageValidation": {
                  "type": "boolean",
                  "description": "Skip package validation"
                },
                "useDiffPackage": {
                  "type": "boolean",
                  "description": "Use Diff Package"
                },
                "overridePublishProfileSettings": {
                  "type": "boolean",
                  "description": "Override All Publish Profile Upgrade Settings"
                },
                "isUpgrade": {
                  "type": "boolean",
                  "description": "Upgrade the Application"
                },
                "unregisterUnusedVersions": {
                  "type": "boolean",
                  "description": "Unregister Unused Versions"
                },
                "upgradeMode": {
                  "description": "Upgrade Mode",
                  "enum": [
                    "Monitored",
                    "UnmonitoredAuto",
                    "UnmonitoredManual"
                  ]
                },
                "FailureAction": {
                  "description": "FailureAction",
                  "enum": [
                    "Rollback",
                    "Manual"
                  ]
                },
                "UpgradeReplicaSetCheckTimeoutSec": {
                  "type": "string",
                  "description": "UpgradeReplicaSetCheckTimeoutSec"
                },
                "TimeoutSec": {
                  "type": "string",
                  "description": "TimeoutSec"
                },
                "ForceRestart": {
                  "type": "boolean",
                  "description": "ForceRestart"
                },
                "HealthCheckRetryTimeoutSec": {
                  "type": "string",
                  "description": "HealthCheckRetryTimeoutSec"
                },
                "HealthCheckWaitDurationSec": {
                  "type": "string",
                  "description": "HealthCheckWaitDurationSec"
                },
                "HealthCheckStableDurationSec": {
                  "type": "string",
                  "description": "HealthCheckStableDurationSec"
                },
                "UpgradeDomainTimeoutSec": {
                  "type": "string",
                  "description": "UpgradeDomainTimeoutSec"
                },
                "ConsiderWarningAsError": {
                  "type": "boolean",
                  "description": "ConsiderWarningAsError"
                },
                "DefaultServiceTypeHealthPolicy": {
                  "type": "string",
                  "description": "DefaultServiceTypeHealthPolicy"
                },
                "MaxPercentUnhealthyDeployedApplications": {
                  "type": "string",
                  "description": "MaxPercentUnhealthyDeployedApplications"
                },
                "UpgradeTimeoutSec": {
                  "type": "string",
                  "description": "UpgradeTimeoutSec"
                },
                "ServiceTypeHealthPolicyMap": {
                  "type": "string",
                  "description": "ServiceTypeHealthPolicyMap"
                },
                "configureDockerSettings": {
                  "type": "boolean",
                  "description": "Configure Docker settings"
                },
                "registryCredentials": {
                  "description": "Registry Credentials Source",
                  "enum": [
                    "AzureResourceManagerEndpoint",
                    "ContainerRegistryEndpoint",
                    "UsernamePassword"
                  ]
                },
                "dockerRegistryConnection": {
                  "type": "string",
                  "description": "Docker Registry Service Connection"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "registryUserName": {
                  "type": "string",
                  "description": "Registry User Name"
                },
                "registryPassword": {
                  "type": "string",
                  "description": "Registry Password"
                },
                "passwordEncrypted": {
                  "type": "boolean",
                  "description": "Password Encrypted"
                }
              },
              "additionalProperties": false,
              "required": [
                "applicationPackagePath",
                "serviceConnectionName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xcode\n\nBuild, test, or archive an Xcode workspace on macOS. Optionally package an app.",
              
              "pattern": "^Xcode@5$"
            },
            "inputs": {
              "description": "Xcode inputs",
              "properties": {
                "actions": {
                  "type": "string",
                  "description": "Actions"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "sdk": {
                  "type": "string",
                  "description": "SDK"
                },
                "xcWorkspacePath": {
                  "type": "string",
                  "description": "Workspace or project path"
                },
                "scheme": {
                  "type": "string",
                  "description": "Scheme"
                },
                "xcodeVersion": {
                  "description": "Xcode version",
                  "enum": [
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "default",
                    "specifyPath"
                  ]
                },
                "xcodeDeveloperDir": {
                  "type": "string",
                  "description": "Xcode developer path"
                },
                "packageApp": {
                  "type": "boolean",
                  "description": "Create app package"
                },
                "archivePath": {
                  "type": "string",
                  "description": "Archive path"
                },
                "exportPath": {
                  "type": "string",
                  "description": "Export path"
                },
                "exportOptions": {
                  "description": "Export options",
                  "enum": [
                    "auto",
                    "plist",
                    "specify"
                  ]
                },
                "exportMethod": {
                  "type": "string",
                  "description": "Export method"
                },
                "exportTeamId": {
                  "type": "string",
                  "description": "Team ID"
                },
                "exportOptionsPlist": {
                  "type": "string",
                  "description": "Export options plist"
                },
                "exportArgs": {
                  "type": "string",
                  "description": "Export arguments"
                },
                "signingOption": {
                  "description": "Signing style",
                  "enum": [
                    "nosign",
                    "default",
                    "manual",
                    "auto"
                  ]
                },
                "signingIdentity": {
                  "type": "string",
                  "description": "Signing identity"
                },
                "provisioningProfileUuid": {
                  "type": "string",
                  "description": "Provisioning profile UUID"
                },
                "provisioningProfileName": {
                  "type": "string",
                  "description": "Provisioning profile name"
                },
                "teamId": {
                  "type": "string",
                  "description": "Team ID"
                },
                "destinationPlatformOption": {
                  "description": "Destination platform",
                  "enum": [
                    "default",
                    "iOS",
                    "tvOS",
                    "macOS",
                    "custom"
                  ]
                },
                "destinationPlatform": {
                  "type": "string",
                  "description": "Custom destination platform"
                },
                "destinationTypeOption": {
                  "description": "Destination type",
                  "enum": [
                    "simulators",
                    "devices"
                  ]
                },
                "destinationSimulators": {
                  "type": "string",
                  "description": "Simulator"
                },
                "destinationDevices": {
                  "type": "string",
                  "description": "Device"
                },
                "args": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "useXcpretty": {
                  "type": "boolean",
                  "description": "Use xcpretty"
                },
                "xcprettyArgs": {
                  "type": "string",
                  "description": "Xcpretty arguments"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish test results to Azure Pipelines"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xcode Build\n\nBuild an Xcode workspace on macOS",
              
              "pattern": "^Xcode@3$"
            },
            "inputs": {
              "description": "Xcode Build inputs",
              "properties": {
                "actions": {
                  "type": "string",
                  "description": "Actions"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "sdk": {
                  "type": "string",
                  "description": "SDK"
                },
                "xcWorkspacePath": {
                  "type": "string",
                  "description": "Workspace/Project Path"
                },
                "scheme": {
                  "type": "string",
                  "description": "Scheme"
                },
                "packageApp": {
                  "type": "boolean",
                  "description": "Create App Package"
                },
                "archivePath": {
                  "type": "string",
                  "description": "Archive Path"
                },
                "exportPath": {
                  "type": "string",
                  "description": "Export Path"
                },
                "exportOptions": {
                  "description": "Export Options",
                  "enum": [
                    "auto",
                    "plist",
                    "specify"
                  ]
                },
                "exportMethod": {
                  "type": "string",
                  "description": "Export Method"
                },
                "exportTeamId": {
                  "type": "string",
                  "description": "Team ID"
                },
                "exportOptionsPlist": {
                  "type": "string",
                  "description": "Export Options Plist"
                },
                "exportArgs": {
                  "type": "string",
                  "description": "Export Arguments"
                },
                "xcode8AutomaticSigning": {
                  "type": "boolean",
                  "description": "Automatic Signing"
                },
                "teamId": {
                  "type": "string",
                  "description": "Team ID"
                },
                "signMethod": {
                  "description": "Override Using",
                  "enum": [
                    "file",
                    "id"
                  ]
                },
                "iosSigningIdentity": {
                  "type": "string",
                  "description": "Signing Identity"
                },
                "unlockDefaultKeychain": {
                  "type": "boolean",
                  "description": "Unlock Default Keychain"
                },
                "defaultKeychainPassword": {
                  "type": "string",
                  "description": "Default Keychain Password"
                },
                "provProfileUuid": {
                  "type": "string",
                  "description": "Provisioning Profile UUID"
                },
                "p12": {
                  "type": "string",
                  "description": "P12 Certificate File"
                },
                "p12pwd": {
                  "type": "string",
                  "description": "P12 Password"
                },
                "provProfile": {
                  "type": "string",
                  "description": "Provisioning Profile File"
                },
                "removeProfile": {
                  "type": "boolean",
                  "description": "Remove Profile After Build"
                },
                "args": {
                  "type": "string",
                  "description": "Arguments"
                },
                "cwd": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "outputPattern": {
                  "type": "string",
                  "description": "Output Directory"
                },
                "xcodeDeveloperDir": {
                  "type": "string",
                  "description": "Xcode Developer Path"
                },
                "useXcpretty": {
                  "type": "boolean",
                  "description": "Use xcpretty"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to VSTS/TFS"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xcode\n\nBuild, test, or archive an Xcode workspace on macOS. Optionally package an app.",
              
              "pattern": "^Xcode@4$"
            },
            "inputs": {
              "description": "Xcode inputs",
              "properties": {
                "actions": {
                  "type": "string",
                  "description": "Actions"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "sdk": {
                  "type": "string",
                  "description": "SDK"
                },
                "xcWorkspacePath": {
                  "type": "string",
                  "description": "Workspace or project path"
                },
                "scheme": {
                  "type": "string",
                  "description": "Scheme"
                },
                "xcodeVersion": {
                  "description": "Xcode version",
                  "enum": [
                    "8",
                    "9",
                    "default",
                    "specifyPath"
                  ]
                },
                "xcodeDeveloperDir": {
                  "type": "string",
                  "description": "Xcode developer path"
                },
                "packageApp": {
                  "type": "boolean",
                  "description": "Create app package"
                },
                "archivePath": {
                  "type": "string",
                  "description": "Archive path"
                },
                "exportPath": {
                  "type": "string",
                  "description": "Export path"
                },
                "exportOptions": {
                  "description": "Export options",
                  "enum": [
                    "auto",
                    "plist",
                    "specify"
                  ]
                },
                "exportMethod": {
                  "type": "string",
                  "description": "Export method"
                },
                "exportTeamId": {
                  "type": "string",
                  "description": "Team ID"
                },
                "exportOptionsPlist": {
                  "type": "string",
                  "description": "Export options plist"
                },
                "exportArgs": {
                  "type": "string",
                  "description": "Export arguments"
                },
                "signingOption": {
                  "description": "Signing style",
                  "enum": [
                    "nosign",
                    "default",
                    "manual",
                    "auto"
                  ]
                },
                "signingIdentity": {
                  "type": "string",
                  "description": "Signing identity"
                },
                "provisioningProfileUuid": {
                  "type": "string",
                  "description": "Provisioning profile UUID"
                },
                "teamId": {
                  "type": "string",
                  "description": "Team ID"
                },
                "destinationPlatformOption": {
                  "description": "Destination platform",
                  "enum": [
                    "default",
                    "iOS",
                    "tvOS",
                    "macOS",
                    "custom"
                  ]
                },
                "destinationPlatform": {
                  "type": "string",
                  "description": "Custom destination platform"
                },
                "destinationTypeOption": {
                  "description": "Destination type",
                  "enum": [
                    "simulators",
                    "devices"
                  ]
                },
                "destinationSimulators": {
                  "type": "string",
                  "description": "Simulator"
                },
                "destinationDevices": {
                  "type": "string",
                  "description": "Device"
                },
                "args": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "outputPattern": {
                  "type": "string",
                  "description": "Output directory"
                },
                "useXcpretty": {
                  "type": "boolean",
                  "description": "Use xcpretty"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish test results to VSTS/TFS"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xcode Build\n\nBuild an Xcode workspace on Mac OS",
              
              "pattern": "^Xcode@2$"
            },
            "inputs": {
              "description": "Xcode Build inputs",
              "properties": {
                "actions": {
                  "type": "string",
                  "description": "Actions"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "sdk": {
                  "type": "string",
                  "description": "SDK"
                },
                "xcWorkspacePath": {
                  "type": "string",
                  "description": "Workspace/Project Path"
                },
                "scheme": {
                  "type": "string",
                  "description": "Scheme"
                },
                "packageApp": {
                  "type": "boolean",
                  "description": "Create App Package"
                },
                "packageTool": {
                  "description": "Create Package (IPA) using",
                  "enum": [
                    "xcrun",
                    "xcodebuild"
                  ]
                },
                "archivePath": {
                  "type": "string",
                  "description": "Archive Path"
                },
                "exportPath": {
                  "type": "string",
                  "description": "Export Path"
                },
                "exportOptions": {
                  "description": "Export Options",
                  "enum": [
                    "auto",
                    "plist",
                    "specify"
                  ]
                },
                "exportMethod": {
                  "type": "string",
                  "description": "Export Method"
                },
                "exportTeamId": {
                  "type": "string",
                  "description": "Team ID"
                },
                "exportOptionsPlist": {
                  "type": "string",
                  "description": "Export Options Plist"
                },
                "xcode8AutomaticSigning": {
                  "type": "boolean",
                  "description": "Automatic Signing"
                },
                "teamId": {
                  "type": "string",
                  "description": "Team ID"
                },
                "signMethod": {
                  "description": "Override Using",
                  "enum": [
                    "file",
                    "id"
                  ]
                },
                "iosSigningIdentity": {
                  "type": "string",
                  "description": "Signing Identity"
                },
                "unlockDefaultKeychain": {
                  "type": "boolean",
                  "description": "Unlock Default Keychain"
                },
                "defaultKeychainPassword": {
                  "type": "string",
                  "description": "Default Keychain Password"
                },
                "provProfileUuid": {
                  "type": "string",
                  "description": "Provisioning Profile UUID"
                },
                "p12": {
                  "type": "string",
                  "description": "P12 Certificate File"
                },
                "p12pwd": {
                  "type": "string",
                  "description": "P12 Password"
                },
                "provProfile": {
                  "type": "string",
                  "description": "Provisioning Profile File"
                },
                "removeProfile": {
                  "type": "boolean",
                  "description": "Remove Profile After Build"
                },
                "args": {
                  "type": "string",
                  "description": "Arguments"
                },
                "cwd": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "outputPattern": {
                  "type": "string",
                  "description": "Output Directory"
                },
                "xcodeDeveloperDir": {
                  "type": "string",
                  "description": "Xcode Developer Path"
                },
                "useXcpretty": {
                  "type": "boolean",
                  "description": "Use xcpretty"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to VSTS/TFS"
                },
                "useXctool": {
                  "type": "boolean",
                  "description": "Use xctool"
                },
                "xctoolReporter": {
                  "type": "string",
                  "description": "xctool Test Reporter Format"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet publisher\n\nDeprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              
              "pattern": "^NuGetPublisher@0$"
            },
            "inputs": {
              "description": "NuGet publisher inputs",
              "properties": {
                "searchPattern": {
                  "type": "string",
                  "description": "Path/Pattern to nupkg"
                },
                "nuGetFeedType": {
                  "description": "Feed type",
                  "enum": [
                    "external",
                    "internal"
                  ]
                },
                "connectedServiceName": {
                  "type": "string",
                  "description": "NuGet Service Connection"
                },
                "feedName": {
                  "type": "string",
                  "description": "Internal Feed URL"
                },
                "nuGetAdditionalArgs": {
                  "type": "string",
                  "description": "NuGet Arguments"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ]
                },
                "nuGetVersion": {
                  "description": "NuGet Version",
                  "enum": [
                    "3.3.0",
                    "3.5.0.1829",
                    "4.0.0.2283",
                    "custom"
                  ]
                },
                "nuGetPath": {
                  "type": "string",
                  "description": "Path to NuGet.exe"
                },
                "continueOnEmptyNupkgMatch": {
                  "type": "boolean",
                  "description": "Continue if no packages match the \"Path/Pattern to nupkg\""
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "NuGetPublisher is deprecated - Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Query work items\n\nExecute a work item query and check the number of items returned",
              
              "pattern": "^queryWorkItems@0$"
            },
            "inputs": {
              "description": "Query work items inputs",
              "properties": {
                "queryId": {
                  "type": "string",
                  "description": "Query"
                },
                "maxThreshold": {
                  "type": "string",
                  "description": "Upper threshold"
                },
                "minThreshold": {
                  "type": "string",
                  "description": "Lower threshold"
                }
              },
              "additionalProperties": false,
              "required": [
                "queryId"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Web App for Containers\n\nDeploy containers to Azure App Service",
              
              "pattern": "^AzureWebAppContainer@1$"
            },
            "inputs": {
              "description": "Azure Web App for Containers inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "appName": {
                  "type": "string",
                  "description": "App name"
                },
                "deployToSlotOrASE": {
                  "type": "boolean",
                  "description": "Deploy to Slot or App Service Environment"
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "slotName": {
                  "type": "string",
                  "description": "Slot"
                },
                "containers": {
                  "type": "string",
                  "description": "Image name"
                },
                "multicontainerConfigFile": {
                  "type": "string",
                  "description": "Configuration File"
                },
                "containerCommand": {
                  "type": "string",
                  "description": "Startup command "
                },
                "appSettings": {
                  "type": "string",
                  "description": "App settings"
                },
                "configurationStrings": {
                  "type": "string",
                  "description": "Configuration settings"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "appName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "SQL Server database deploy\n\nDeploy a SQL Server database using DACPAC or SQL scripts",
              
              "pattern": "^SqlDacpacDeploymentOnMachineGroup@0$"
            },
            "inputs": {
              "description": "SQL Server database deploy inputs",
              "properties": {
                "TaskType": {
                  "description": "Deploy SQL Using",
                  "enum": [
                    "dacpac",
                    "sqlQuery",
                    "sqlInline"
                  ]
                },
                "DacpacFile": {
                  "type": "string",
                  "description": "DACPAC File"
                },
                "SqlFile": {
                  "type": "string",
                  "description": "Sql File"
                },
                "ExecuteInTransaction": {
                  "type": "boolean",
                  "description": "Execute within a transaction"
                },
                "ExclusiveLock": {
                  "type": "boolean",
                  "description": "Acquire an exclusive app lock while executing script(s)"
                },
                "AppLockName": {
                  "type": "string",
                  "description": "App lock name"
                },
                "InlineSql": {
                  "type": "string",
                  "description": "Inline Sql"
                },
                "TargetMethod": {
                  "description": "Specify SQL Using",
                  "enum": [
                    "server",
                    "connectionString",
                    "publishProfile"
                  ]
                },
                "ServerName": {
                  "type": "string",
                  "description": "Server Name"
                },
                "DatabaseName": {
                  "type": "string",
                  "description": "Database Name"
                },
                "AuthScheme": {
                  "description": "Authentication",
                  "enum": [
                    "windowsAuthentication",
                    "sqlServerAuthentication"
                  ]
                },
                "SqlUsername": {
                  "type": "string",
                  "description": "SQL User name"
                },
                "SqlPassword": {
                  "type": "string",
                  "description": "SQL Password"
                },
                "ConnectionString": {
                  "type": "string",
                  "description": "Connection String"
                },
                "PublishProfile": {
                  "type": "string",
                  "description": "Publish Profile"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional Arguments"
                },
                "AdditionalArgumentsSql": {
                  "type": "string",
                  "description": "Additional Arguments"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Cache (Beta)\n\nCache files between runs",
              
              "pattern": "^CacheBeta@1$"
            },
            "inputs": {
              "description": "Cache (Beta) inputs",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key"
                },
                "path": {
                  "type": "string",
                  "description": "Path"
                },
                "cacheHitVar": {
                  "type": "string",
                  "description": "Cache hit variable"
                },
                "restoreKeys": {
                  "type": "string",
                  "description": "Additional restore key prefixes"
                }
              },
              "additionalProperties": false,
              "required": [
                "key",
                "path"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Cache\n\nCache files between runs",
              
              "pattern": "^Cache@2$"
            },
            "inputs": {
              "description": "Cache inputs",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key"
                },
                "path": {
                  "type": "string",
                  "description": "Path"
                },
                "cacheHitVar": {
                  "type": "string",
                  "description": "Cache hit variable"
                },
                "restoreKeys": {
                  "type": "string",
                  "description": "Additional restore key prefixes"
                }
              },
              "additionalProperties": false,
              "required": [
                "key",
                "path"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Cache (Beta)\n\nCache files between runs",
              
              "pattern": "^CacheBeta@0$"
            },
            "inputs": {
              "description": "Cache (Beta) inputs",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key"
                },
                "path": {
                  "type": "string",
                  "description": "Path"
                },
                "cacheHitVar": {
                  "type": "string",
                  "description": "Cache hit variable"
                }
              },
              "additionalProperties": false,
              "required": [
                "key",
                "path"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "CMake\n\nBuild with the CMake cross-platform build system",
              
              "pattern": "^CMake@1$"
            },
            "inputs": {
              "description": "CMake inputs",
              "properties": {
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "cmakeArgs": {
                  "type": "string",
                  "description": "Arguments"
                },
                "runInsideShell": {
                  "type": "boolean",
                  "description": "Run cmake command inside shell"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "App Center test\n\nTest app packages with Visual Studio App Center",
              
              "pattern": "^AppCenterTest@1$"
            },
            "inputs": {
              "description": "App Center test inputs",
              "properties": {
                "appFile": {
                  "type": "string",
                  "description": "Binary application file path"
                },
                "artifactsDirectory": {
                  "type": "string",
                  "description": "Artifacts directory"
                },
                "prepareTests": {
                  "type": "boolean",
                  "description": "Prepare tests"
                },
                "frameworkOption": {
                  "description": "Test framework",
                  "enum": [
                    "appium",
                    "espresso",
                    "calabash",
                    "uitest",
                    "xcuitest"
                  ]
                },
                "appiumBuildDirectory": {
                  "type": "string",
                  "description": "Build directory"
                },
                "espressoBuildDirectory": {
                  "type": "string",
                  "description": "Build directory"
                },
                "espressoTestApkFile": {
                  "type": "string",
                  "description": "Test APK path"
                },
                "calabashProjectDirectory": {
                  "type": "string",
                  "description": "Project directory"
                },
                "calabashConfigFile": {
                  "type": "string",
                  "description": "Cucumber config file"
                },
                "calabashProfile": {
                  "type": "string",
                  "description": "Profile to run"
                },
                "calabashSkipConfigCheck": {
                  "type": "boolean",
                  "description": "Skip Configuration Check"
                },
                "uiTestBuildDirectory": {
                  "type": "string",
                  "description": "Build directory"
                },
                "uitestStorePath": {
                  "type": "string",
                  "description": "Store file"
                },
                "uiTestStorePassword": {
                  "type": "string",
                  "description": "Store password"
                },
                "uitestKeyAlias": {
                  "type": "string",
                  "description": "Key alias"
                },
                "uiTestKeyPassword": {
                  "type": "string",
                  "description": "Key password"
                },
                "uiTestToolsDirectory": {
                  "type": "string",
                  "description": "Test tools directory"
                },
                "signInfo": {
                  "type": "string",
                  "description": "Signing information"
                },
                "xcUITestBuildDirectory": {
                  "type": "string",
                  "description": "Build directory"
                },
                "xcUITestIpaFile": {
                  "type": "string",
                  "description": "Test IPA path"
                },
                "prepareOptions": {
                  "type": "string",
                  "description": "Additional options"
                },
                "runTests": {
                  "type": "boolean",
                  "description": "Run tests"
                },
                "credentialsOption": {
                  "description": "Authentication method",
                  "enum": [
                    "serviceEndpoint",
                    "inputs"
                  ]
                },
                "serverEndpoint": {
                  "type": "string",
                  "description": "App Center service connection"
                },
                "username": {
                  "type": "string",
                  "description": "App Center username"
                },
                "password": {
                  "type": "string",
                  "description": "App Center password"
                },
                "appSlug": {
                  "type": "string",
                  "description": "App slug"
                },
                "devices": {
                  "type": "string",
                  "description": "Devices"
                },
                "series": {
                  "type": "string",
                  "description": "Test series"
                },
                "dsymDirectory": {
                  "type": "string",
                  "description": "dSYM directory"
                },
                "localeOption": {
                  "description": "System language",
                  "enum": [
                    "da_DK",
                    "nl_NL",
                    "en_GB",
                    "en_US",
                    "fr_FR",
                    "de_DE",
                    "ja_JP",
                    "ru_RU",
                    "es_MX",
                    "es_ES",
                    "user"
                  ]
                },
                "userDefinedLocale": {
                  "type": "string",
                  "description": "Other locale"
                },
                "loginOptions": {
                  "type": "string",
                  "description": "Additional options for login"
                },
                "runOptions": {
                  "type": "string",
                  "description": "Additional options for run"
                },
                "skipWaitingForResults": {
                  "type": "boolean",
                  "description": "Do not wait for test result"
                },
                "cliFile": {
                  "type": "string",
                  "description": "App Center CLI location"
                },
                "showDebugOutput": {
                  "type": "boolean",
                  "description": "Enable debug output"
                }
              },
              "additionalProperties": false,
              "required": [
                "appFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Mobile Center Test\n\nTest mobile app packages with Visual Studio Mobile Center.",
              
              "pattern": "^VSMobileCenterTest@0$"
            },
            "inputs": {
              "description": "Mobile Center Test inputs",
              "properties": {
                "app": {
                  "type": "string",
                  "description": "Binary Application File Path"
                },
                "artifactsDir": {
                  "type": "string",
                  "description": "Artifacts Directory"
                },
                "enablePrepare": {
                  "type": "boolean",
                  "description": "Prepare Tests"
                },
                "framework": {
                  "description": "Test Framework",
                  "enum": [
                    "appium",
                    "espresso",
                    "calabash",
                    "uitest",
                    "xcuitest"
                  ]
                },
                "appiumBuildDir": {
                  "type": "string",
                  "description": "Build Directory"
                },
                "espressoBuildDir": {
                  "type": "string",
                  "description": "Build Directory"
                },
                "espressoTestApkPath": {
                  "type": "string",
                  "description": "Test APK Path"
                },
                "calabashProjectDir": {
                  "type": "string",
                  "description": "Project Directory"
                },
                "calabashConfigFile": {
                  "type": "string",
                  "description": "Cucumber Config File"
                },
                "calabashProfile": {
                  "type": "string",
                  "description": "Profile to run"
                },
                "calabashSkipConfigCheck": {
                  "type": "boolean",
                  "description": "Skip Configuration Check"
                },
                "uitestBuildDir": {
                  "type": "string",
                  "description": "Build Directory"
                },
                "uitestStoreFile": {
                  "type": "string",
                  "description": "Store File"
                },
                "uitestStorePass": {
                  "type": "string",
                  "description": "Store Password"
                },
                "uitestKeyAlias": {
                  "type": "string",
                  "description": "Key Alias"
                },
                "uitestKeyPass": {
                  "type": "string",
                  "description": "Key Password"
                },
                "uitestToolsDir": {
                  "type": "string",
                  "description": "Test Tools Directory"
                },
                "signInfo": {
                  "type": "string",
                  "description": "Signing Information"
                },
                "xcuitestBuildDir": {
                  "type": "string",
                  "description": "Build Directory"
                },
                "xcuitestTestIpaPath": {
                  "type": "string",
                  "description": "Test IPA Path"
                },
                "prepareOpts": {
                  "type": "string",
                  "description": "Additional Options"
                },
                "enableRun": {
                  "type": "boolean",
                  "description": "Run Tests"
                },
                "credsType": {
                  "description": "Authentication Method",
                  "enum": [
                    "serviceEndpoint",
                    "inputs"
                  ]
                },
                "serverEndpoint": {
                  "type": "string",
                  "description": "Mobile Center Connection"
                },
                "username": {
                  "type": "string",
                  "description": "Mobile Center Username"
                },
                "password": {
                  "type": "string",
                  "description": "Mobile Center Password"
                },
                "appSlug": {
                  "type": "string",
                  "description": "App Slug"
                },
                "devices": {
                  "type": "string",
                  "description": "Devices"
                },
                "series": {
                  "type": "string",
                  "description": "Test Series"
                },
                "dsymDir": {
                  "type": "string",
                  "description": "dSYM Directory"
                },
                "locale": {
                  "description": "System Language",
                  "enum": [
                    "da_DK",
                    "nl_NL",
                    "en_GB",
                    "en_US",
                    "fr_FR",
                    "de_DE",
                    "ja_JP",
                    "ru_RU",
                    "es_MX",
                    "es_ES",
                    "user"
                  ]
                },
                "userDefinedLocale": {
                  "type": "string",
                  "description": "Other Locale"
                },
                "loginOpts": {
                  "type": "string",
                  "description": "Addtional Options for Login"
                },
                "runOpts": {
                  "type": "string",
                  "description": "Additional Options for Run"
                },
                "async": {
                  "type": "boolean",
                  "description": "Do not wait for test result"
                },
                "cliLocationOverride": {
                  "type": "string",
                  "description": "mobile-center CLI Location"
                },
                "debug": {
                  "type": "boolean",
                  "description": "Enable Debug Output"
                }
              },
              "additionalProperties": false,
              "required": [
                "app"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download secure file\n\nDownload a secure file to the agent machine",
              
              "pattern": "^DownloadSecureFile@1$"
            },
            "inputs": {
              "description": "Download secure file inputs",
              "properties": {
                "secureFile": {
                  "type": "string",
                  "description": "Secure File"
                },
                "retryCount": {
                  "type": "string",
                  "description": "Retry Count"
                },
                "socketTimeout": {
                  "type": "string",
                  "description": "Socket Timeout"
                }
              },
              "additionalProperties": false,
              "required": [
                "secureFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Use Ruby version\n\nUse the specified version of Ruby from the tool cache, optionally adding it to the PATH",
              
              "pattern": "^UseRubyVersion@0$"
            },
            "inputs": {
              "description": "Use Ruby version inputs",
              "properties": {
                "versionSpec": {
                  "type": "string",
                  "description": "Version spec"
                },
                "addToPath": {
                  "type": "boolean",
                  "description": "Add to PATH"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Grunt\n\nRun the Grunt JavaScript task runner",
              
              "pattern": "^Grunt@0$"
            },
            "inputs": {
              "description": "Grunt inputs",
              "properties": {
                "gruntFile": {
                  "type": "string",
                  "description": "Grunt File Path"
                },
                "targets": {
                  "type": "string",
                  "description": "Grunt Task(s)"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "gruntCli": {
                  "type": "string",
                  "description": "grunt-cli location"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to Azure Pipelines"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test Results Files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test Run Title"
                },
                "enableCodeCoverage": {
                  "type": "boolean",
                  "description": "Enable Code Coverage"
                },
                "testFramework": {
                  "description": "Test Framework",
                  "enum": [
                    "Mocha",
                    "Jasmine"
                  ]
                },
                "srcFiles": {
                  "type": "string",
                  "description": "Source Files"
                },
                "testFiles": {
                  "type": "string",
                  "description": "Test Script Files"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure SQL Database deployment\n\nDeploy an Azure SQL Database using DACPAC or run scripts using SQLCMD",
              
              "pattern": "^SqlAzureDacpacDeployment@1$"
            },
            "inputs": {
              "description": "Azure SQL Database deployment inputs",
              "properties": {
                "azureConnectionType": {
                  "description": "Azure Service Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ]
                },
                "azureClassicSubscription": {
                  "type": "string",
                  "description": "Azure Classic Subscription"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "AuthenticationType": {
                  "description": "Authentication Type",
                  "enum": [
                    "server",
                    "aadAuthenticationPassword",
                    "aadAuthenticationIntegrated",
                    "connectionString",
                    "servicePrincipal"
                  ]
                },
                "ServerName": {
                  "type": "string",
                  "description": "Azure SQL Server"
                },
                "DatabaseName": {
                  "type": "string",
                  "description": "Database"
                },
                "SqlUsername": {
                  "type": "string",
                  "description": "Login"
                },
                "SqlPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "aadSqlUsername": {
                  "type": "string",
                  "description": "Login"
                },
                "aadSqlPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "ConnectionString": {
                  "type": "string",
                  "description": "Connection String"
                },
                "deployType": {
                  "description": "Deploy type",
                  "enum": [
                    "DacpacTask",
                    "SqlTask",
                    "InlineSqlTask"
                  ]
                },
                "DeploymentAction": {
                  "description": "Action",
                  "enum": [
                    "Publish",
                    "Extract",
                    "Export",
                    "Import",
                    "Script",
                    "DriftReport",
                    "DeployReport"
                  ]
                },
                "DacpacFile": {
                  "type": "string",
                  "description": "DACPAC File"
                },
                "BacpacFile": {
                  "type": "string",
                  "description": "BACPAC File"
                },
                "SqlFile": {
                  "type": "string",
                  "description": "SQL Script"
                },
                "SqlInline": {
                  "type": "string",
                  "description": "Inline SQL Script"
                },
                "PublishProfile": {
                  "type": "string",
                  "description": "Publish Profile"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional SqlPackage.exe Arguments"
                },
                "SqlAdditionalArguments": {
                  "type": "string",
                  "description": "Additional Invoke-Sqlcmd Arguments"
                },
                "InlineAdditionalArguments": {
                  "type": "string",
                  "description": "Additional Invoke-Sqlcmd Arguments"
                },
                "IpDetectionMethod": {
                  "description": "Specify Firewall Rules Using",
                  "enum": [
                    "AutoDetect",
                    "IPAddressRange"
                  ]
                },
                "StartIpAddress": {
                  "type": "string",
                  "description": "Start IP Address"
                },
                "EndIpAddress": {
                  "type": "string",
                  "description": "End IP Address"
                },
                "DeleteFirewallRule": {
                  "type": "boolean",
                  "description": "Delete Rule After Task Ends"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Container Structure Test\n\nUses container-structure-test (https://github.com/GoogleContainerTools/container-structure-test) to validate the structure of an image based on four categories of tests - command tests, file existence tests, file content tests and metadata tests",
              
              "pattern": "^ContainerStructureTest@0$"
            },
            "inputs": {
              "description": "Container Structure Test inputs",
              "properties": {
                "dockerRegistryServiceConnection": {
                  "type": "string",
                  "description": "Docker registry service connection"
                },
                "repository": {
                  "type": "string",
                  "description": "Container repository"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag"
                },
                "configFile": {
                  "type": "string",
                  "description": "Config file path"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                },
                "failTaskOnFailedTests": {
                  "type": "boolean",
                  "description": "Fail task if there are test failures"
                }
              },
              "additionalProperties": false,
              "required": [
                "dockerRegistryServiceConnection",
                "repository",
                "configFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "[Deprecated] IIS Web App deployment\n\nDeploy using MSDeploy, then create/update websites and app pools",
              
              "pattern": "^IISWebAppDeployment@1$"
            },
            "inputs": {
              "description": "[Deprecated] IIS Web App deployment inputs",
              "properties": {
                "EnvironmentName": {
                  "type": "string",
                  "description": "Machines"
                },
                "AdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "AdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "WinRMProtocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ]
                },
                "TestCertificate": {
                  "type": "boolean",
                  "description": "Test Certificate"
                },
                "WebDeployPackage": {
                  "type": "string",
                  "description": "Web Deploy Package"
                },
                "WebDeployParamFile": {
                  "type": "string",
                  "description": "Web Deploy Parameter File"
                },
                "OverRideParams": {
                  "type": "string",
                  "description": "Override Parameters"
                },
                "CreateWebSite": {
                  "type": "boolean",
                  "description": "Create or Update Website"
                },
                "WebSiteName": {
                  "type": "string",
                  "description": "Website Name"
                },
                "WebSitePhysicalPath": {
                  "type": "string",
                  "description": "Physical Path"
                },
                "WebSitePhysicalPathAuth": {
                  "description": "Physical Path Authentication",
                  "enum": [
                    "WebSiteUserPassThrough",
                    "WebSiteWindowsAuth"
                  ]
                },
                "WebSiteAuthUserName": {
                  "type": "string",
                  "description": "User Name"
                },
                "WebSiteAuthUserPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "AddBinding": {
                  "type": "boolean",
                  "description": "Add Binding"
                },
                "AssignDuplicateBinding": {
                  "type": "boolean",
                  "description": "Assign Duplicate Binding"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "https",
                    "http"
                  ]
                },
                "IPAddress": {
                  "type": "string",
                  "description": "IP Address"
                },
                "Port": {
                  "type": "string",
                  "description": "Port"
                },
                "ServerNameIndication": {
                  "type": "boolean",
                  "description": "Server Name Indication Required"
                },
                "HostNameWithOutSNI": {
                  "type": "string",
                  "description": "Host Name"
                },
                "HostNameWithHttp": {
                  "type": "string",
                  "description": "Host Name"
                },
                "HostNameWithSNI": {
                  "type": "string",
                  "description": "Host Name"
                },
                "SSLCertThumbPrint": {
                  "type": "string",
                  "description": "SSL Certificate Thumb Print"
                },
                "CreateAppPool": {
                  "type": "boolean",
                  "description": "Create or Update Application Pool"
                },
                "AppPoolName": {
                  "type": "string",
                  "description": "Name"
                },
                "DotNetVersion": {
                  "description": ".NET Version",
                  "enum": [
                    "v4.0",
                    "v2.0",
                    "No Managed Code"
                  ]
                },
                "PipeLineMode": {
                  "description": "Managed Pipeline Mode",
                  "enum": [
                    "Integrated",
                    "Classic"
                  ]
                },
                "AppPoolIdentity": {
                  "description": "Identity",
                  "enum": [
                    "ApplicationPoolIdentity",
                    "LocalService",
                    "LocalSystem",
                    "NetworkService",
                    "SpecificUser"
                  ]
                },
                "AppPoolUsername": {
                  "type": "string",
                  "description": "Username"
                },
                "AppPoolPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "AppCmdCommands": {
                  "type": "string",
                  "description": "Additional AppCmd.exe Commands"
                },
                "DeployInParallel": {
                  "type": "boolean",
                  "description": "Deploy in Parallel"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "MachineFilter": {
                  "type": "string",
                  "description": "Deploy to Machines"
                }
              },
              "additionalProperties": false,
              "required": [
                "EnvironmentName",
                "WebDeployPackage"
              ]
            }
          },
          "$comment": "IISWebAppDeployment is deprecated - Deploy using MSDeploy, then create/update websites and app pools",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Cloud-based load test\n\nRun a load test in the cloud with Azure Pipelines",
              
              "pattern": "^CloudLoadTest@1$"
            },
            "inputs": {
              "description": "Cloud-based load test inputs",
              "properties": {
                "connectedServiceName": {
                  "type": "string",
                  "description": "Azure Pipelines Connection"
                },
                "TestDrop": {
                  "type": "string",
                  "description": "Load test files folder"
                },
                "LoadTest": {
                  "type": "string",
                  "description": "Load test file"
                },
                "activeRunSettings": {
                  "description": "Active Run Settings",
                  "enum": [
                    "useFile",
                    "changeActive"
                  ]
                },
                "runSettingName": {
                  "type": "string",
                  "description": "Specify the name of the Run Settings"
                },
                "testContextParameters": {
                  "type": "string",
                  "description": "Override load test context parameters"
                },
                "TestSettings": {
                  "type": "string",
                  "description": "Test settings file"
                },
                "ThresholdLimit": {
                  "type": "string",
                  "description": "Number of permissible threshold violations"
                },
                "MachineType": {
                  "description": "Run load test using",
                  "enum": [
                    "0",
                    "2"
                  ]
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource group rig"
                },
                "numOfSelfProvisionedAgents": {
                  "type": "integer",
                  "description": "Number of agents to use"
                }
              },
              "additionalProperties": false,
              "required": [
                "LoadTest"
              ]
            }
          },
          "$comment": "CloudLoadTest is deprecated - Run a load test in the cloud with Azure Pipelines",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Kubectl tool installer\n\nInstall Kubectl on agent machine",
              
              "pattern": "^KubectlInstaller@0$"
            },
            "inputs": {
              "description": "Kubectl tool installer inputs",
              "properties": {
                "kubectlVersion": {
                  "type": "string",
                  "description": "Kubectl Version Spec"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Command line\n\nRun a command line script using Bash on Linux and macOS and cmd.exe on Windows",
              
              "pattern": "^CmdLine@2$"
            },
            "inputs": {
              "description": "Command line inputs",
              "properties": {
                "script": {
                  "type": "string",
                  "description": "Script"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "failOnStderr": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Command Line\n\nRun a command line with arguments",
              
              "pattern": "^CmdLine@1$"
            },
            "inputs": {
              "description": "Command Line inputs",
              "properties": {
                "filename": {
                  "type": "string",
                  "description": "Tool"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingFolder": {
                  "type": "string",
                  "description": "Working folder"
                },
                "failOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                }
              },
              "additionalProperties": false,
              "required": [
                "filename"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet command\n\nDeprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              
              "pattern": "^NuGet@0$"
            },
            "inputs": {
              "description": "NuGet command inputs",
              "properties": {
                "command": {
                  "type": "string",
                  "description": "Command"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                }
              },
              "additionalProperties": false,
              "required": [
                "command"
              ]
            }
          },
          "$comment": "NuGet is deprecated - Deprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Container Build\n\nContainer Build Task",
              
              "pattern": "^ContainerBuild@0$"
            },
            "inputs": {
              "description": "Container Build inputs",
              "properties": {
                "dockerRegistryServiceConnection": {
                  "type": "string",
                  "description": "Docker registry service connection"
                },
                "repository": {
                  "type": "string",
                  "description": "Container repository"
                },
                "Dockerfile": {
                  "type": "string",
                  "description": "Dockerfile"
                },
                "buildContext": {
                  "type": "string",
                  "description": "Build context"
                },
                "tags": {
                  "type": "string",
                  "description": "Tags"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet\n\nRestore, pack, or push NuGet packages, or run a NuGet command. Supports NuGet.org and authenticated feeds like Azure Artifacts and MyGet. Uses NuGet.exe and works with .NET Framework apps. For .NET Core and .NET Standard apps, use the .NET Core task.",
              
              "pattern": "^NuGetCommand@2$"
            },
            "inputs": {
              "description": "NuGet inputs",
              "properties": {
                "command": {
                  "description": "Command",
                  "enum": [
                    "restore",
                    "pack",
                    "push",
                    "custom"
                  ]
                },
                "restoreSolution": {
                  "type": "string",
                  "description": "Path to solution, packages.config, or project.json"
                },
                "feedsToUse": {
                  "description": "Feeds to use",
                  "enum": [
                    "select",
                    "config"
                  ]
                },
                "vstsFeed": {
                  "type": "string",
                  "description": "Use packages from this Azure Artifacts/TFS feed"
                },
                "includeNuGetOrg": {
                  "type": "boolean",
                  "description": "Use packages from NuGet.org"
                },
                "nugetConfigPath": {
                  "type": "string",
                  "description": "Path to NuGet.config"
                },
                "externalFeedCredentials": {
                  "type": "string",
                  "description": "Credentials for feeds outside this organization/collection"
                },
                "noCache": {
                  "type": "boolean",
                  "description": "Disable local cache"
                },
                "disableParallelProcessing": {
                  "type": "boolean",
                  "description": "Disable parallel processing"
                },
                "restoreDirectory": {
                  "type": "string",
                  "description": "Destination directory"
                },
                "verbosityRestore": {
                  "description": "Verbosity",
                  "enum": [
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ]
                },
                "packagesToPush": {
                  "type": "string",
                  "description": "Path to NuGet package(s) to publish"
                },
                "nuGetFeedType": {
                  "description": "Target feed location",
                  "enum": [
                    "internal",
                    "external"
                  ]
                },
                "publishVstsFeed": {
                  "type": "string",
                  "description": "Target feed"
                },
                "publishPackageMetadata": {
                  "type": "boolean",
                  "description": "Publish pipeline metadata"
                },
                "allowPackageConflicts": {
                  "type": "boolean",
                  "description": "Allow duplicates to be skipped"
                },
                "publishFeedCredentials": {
                  "type": "string",
                  "description": "NuGet server"
                },
                "verbosityPush": {
                  "description": "Verbosity",
                  "enum": [
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ]
                },
                "packagesToPack": {
                  "type": "string",
                  "description": "Path to csproj or nuspec file(s) to pack"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration to package"
                },
                "packDestination": {
                  "type": "string",
                  "description": "Package folder"
                },
                "versioningScheme": {
                  "description": "Automatic package versioning",
                  "enum": [
                    "off",
                    "byPrereleaseNumber",
                    "byEnvVar",
                    "byBuildNumber"
                  ]
                },
                "includeReferencedProjects": {
                  "type": "boolean",
                  "description": "Include referenced projects"
                },
                "versionEnvVar": {
                  "type": "string",
                  "description": "Environment variable"
                },
                "majorVersion": {
                  "type": "string",
                  "description": "Major"
                },
                "minorVersion": {
                  "type": "string",
                  "description": "Minor"
                },
                "patchVersion": {
                  "type": "string",
                  "description": "Patch"
                },
                "packTimezone": {
                  "description": "Time zone",
                  "enum": [
                    "utc",
                    "local"
                  ]
                },
                "includeSymbols": {
                  "type": "boolean",
                  "description": "Create symbols package"
                },
                "toolPackage": {
                  "type": "boolean",
                  "description": "Tool Package"
                },
                "buildProperties": {
                  "type": "string",
                  "description": "Additional build properties"
                },
                "basePath": {
                  "type": "string",
                  "description": "Base path"
                },
                "verbosityPack": {
                  "description": "Verbosity",
                  "enum": [
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ]
                },
                "arguments": {
                  "type": "string",
                  "description": "Command and arguments"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet Restore\n\nRestores NuGet packages in preparation for a Visual Studio Build step.",
              
              "pattern": "^NuGetRestore@1$"
            },
            "inputs": {
              "description": "NuGet Restore inputs",
              "properties": {
                "solution": {
                  "type": "string",
                  "description": "Path to solution, packages.config, or project.json"
                },
                "selectOrConfig": {
                  "description": "Feeds to use",
                  "enum": [
                    "select",
                    "config"
                  ]
                },
                "feed": {
                  "type": "string",
                  "description": "Use packages from this VSTS feed"
                },
                "includeNuGetOrg": {
                  "type": "boolean",
                  "description": "Use packages from NuGet.org"
                },
                "nugetConfigPath": {
                  "type": "string",
                  "description": "Path to NuGet.config"
                },
                "noCache": {
                  "type": "boolean",
                  "description": "Disable local cache"
                },
                "packagesDirectory": {
                  "type": "string",
                  "description": "Destination directory"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ]
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet Installer\n\nInstalls or restores missing NuGet packages. Use NuGetAuthenticate@0 task for latest capabilities.",
              
              "pattern": "^NuGetInstaller@0$"
            },
            "inputs": {
              "description": "NuGet Installer inputs",
              "properties": {
                "solution": {
                  "type": "string",
                  "description": "Path to solution or packages.config"
                },
                "nugetConfigPath": {
                  "type": "string",
                  "description": "Path to NuGet.config"
                },
                "restoreMode": {
                  "description": "Installation type",
                  "enum": [
                    "restore",
                    "install"
                  ]
                },
                "noCache": {
                  "type": "boolean",
                  "description": "Disable local cache"
                },
                "nuGetRestoreArgs": {
                  "type": "string",
                  "description": "NuGet arguments"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ]
                },
                "nuGetVersion": {
                  "description": "NuGet Version",
                  "enum": [
                    "3.3.0",
                    "3.5.0.1829",
                    "4.0.0.2283",
                    "custom"
                  ]
                },
                "nuGetPath": {
                  "type": "string",
                  "description": "Path to NuGet.exe"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Delay\n\nDelay further execution of a workflow by a fixed time",
              
              "pattern": "^Delay@1$"
            },
            "inputs": {
              "description": "Delay inputs",
              "properties": {
                "delayForMinutes": {
                  "type": "string",
                  "description": "Delay Time (minutes)"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xamarin.iOS\n\nBuild an iOS app with Xamarin on macOS",
              
              "pattern": "^XamariniOS@2$"
            },
            "inputs": {
              "description": "Xamarin.iOS inputs",
              "properties": {
                "solutionFile": {
                  "type": "string",
                  "description": "Solution"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "clean": {
                  "type": "boolean",
                  "description": "Clean"
                },
                "packageApp": {
                  "type": "boolean",
                  "description": "Create app package"
                },
                "buildForSimulator": {
                  "type": "boolean",
                  "description": "Build for iOS Simulator"
                },
                "runNugetRestore": {
                  "type": "boolean",
                  "description": "Run NuGet restore"
                },
                "args": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "mdtoolFile": {
                  "type": "string",
                  "description": "Build tool path"
                },
                "signingIdentity": {
                  "type": "string",
                  "description": "Signing identity"
                },
                "signingProvisioningProfileID": {
                  "type": "string",
                  "description": "Provisioning profile UUID"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xamarin.iOS\n\nBuild an iOS app with Xamarin on macOS",
              
              "pattern": "^XamariniOS@1$"
            },
            "inputs": {
              "description": "Xamarin.iOS inputs",
              "properties": {
                "solutionFile": {
                  "type": "string",
                  "description": "Solution"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "clean": {
                  "type": "boolean",
                  "description": "Clean"
                },
                "packageApp": {
                  "type": "boolean",
                  "description": "Create app package"
                },
                "buildForSimulator": {
                  "type": "boolean",
                  "description": "Build for iOS Simulator"
                },
                "runNugetRestore": {
                  "type": "boolean",
                  "description": "Run NuGet restore"
                },
                "args": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "buildToolOption": {
                  "description": "Build tool",
                  "enum": [
                    "xbuild",
                    "msbuild"
                  ]
                },
                "mdtoolFile": {
                  "type": "string",
                  "description": "Build tool path"
                },
                "signingOption": {
                  "description": "Override using",
                  "enum": [
                    "file",
                    "id"
                  ]
                },
                "signingIdentity": {
                  "type": "string",
                  "description": "Signing identity"
                },
                "signingUnlockDefaultKeychain": {
                  "type": "boolean",
                  "description": "Unlock default keychain"
                },
                "signingDefaultKeychainPassword": {
                  "type": "string",
                  "description": "Default keychain password"
                },
                "signingProvisioningProfileID": {
                  "type": "string",
                  "description": "Provisioning profile UUID"
                },
                "signingP12File": {
                  "type": "string",
                  "description": "P12 certificate file"
                },
                "signingP12Password": {
                  "type": "string",
                  "description": "P12 password"
                },
                "signingProvisioningProfileFile": {
                  "type": "string",
                  "description": "Provisioning profile file"
                },
                "signingRemoveProfile": {
                  "type": "boolean",
                  "description": "Remove profile after build"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Publish Test Results\n\nPublish test results to Azure Pipelines",
              
              "pattern": "^PublishTestResults@2$"
            },
            "inputs": {
              "description": "Publish Test Results inputs",
              "properties": {
                "testResultsFormat": {
                  "description": "Test result format",
                  "enum": [
                    "JUnit",
                    "NUnit",
                    "VSTest",
                    "XUnit",
                    "CTest"
                  ]
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test results files"
                },
                "searchFolder": {
                  "type": "string",
                  "description": "Search folder"
                },
                "mergeTestResults": {
                  "type": "boolean",
                  "description": "Merge test results"
                },
                "failTaskOnFailedTests": {
                  "type": "boolean",
                  "description": "Fail if there are test failures"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                },
                "buildPlatform": {
                  "type": "string",
                  "description": "Build Platform"
                },
                "buildConfiguration": {
                  "type": "string",
                  "description": "Build Configuration"
                },
                "publishRunAttachments": {
                  "type": "boolean",
                  "description": "Upload test results files"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Publish test results\n\nPublish test results to Azure Pipelines",
              
              "pattern": "^PublishTestResults@1$"
            },
            "inputs": {
              "description": "Publish test results inputs",
              "properties": {
                "testRunner": {
                  "description": "Test Result Format",
                  "enum": [
                    "JUnit",
                    "NUnit",
                    "VSTest",
                    "XUnit"
                  ]
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test Results Files"
                },
                "mergeTestResults": {
                  "type": "boolean",
                  "description": "Merge Test Results"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test Run Title"
                },
                "platform": {
                  "type": "string",
                  "description": "Platform"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "publishRunAttachments": {
                  "type": "boolean",
                  "description": "Upload Test Attachments"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure file copy\n\nCopy files to Azure Blob Storage or virtual machines",
              
              "pattern": "^AzureFileCopy@1$"
            },
            "inputs": {
              "description": "Azure file copy inputs",
              "properties": {
                "SourcePath": {
                  "type": "string",
                  "description": "Source"
                },
                "azureConnectionType": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ]
                },
                "azureClassicSubscription": {
                  "type": "string",
                  "description": "Azure Classic Subscription"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "Destination": {
                  "description": "Destination Type",
                  "enum": [
                    "AzureBlob",
                    "AzureVMs"
                  ]
                },
                "classicStorage": {
                  "type": "string",
                  "description": "Classic Storage Account"
                },
                "storage": {
                  "type": "string",
                  "description": "RM Storage Account"
                },
                "ContainerName": {
                  "type": "string",
                  "description": "Container Name"
                },
                "BlobPrefix": {
                  "type": "string",
                  "description": "Blob Prefix"
                },
                "cloudService": {
                  "type": "string",
                  "description": "Cloud Service"
                },
                "resourceGroup": {
                  "type": "string",
                  "description": "Resource Group"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "MachineNames": {
                  "type": "string",
                  "description": "Filter Criteria"
                },
                "vmsAdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "vmsAdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "TargetPath": {
                  "type": "string",
                  "description": "Destination Folder"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional Arguments"
                },
                "enableCopyPrerequisites": {
                  "type": "boolean",
                  "description": "Enable Copy Prerequisites"
                },
                "CopyFilesInParallel": {
                  "type": "boolean",
                  "description": "Copy in Parallel"
                },
                "CleanTargetBeforeCopy": {
                  "type": "boolean",
                  "description": "Clean Target"
                },
                "skipCACheck": {
                  "type": "boolean",
                  "description": "Test Certificate"
                },
                "outputStorageUri": {
                  "type": "string",
                  "description": "Storage Container URI"
                },
                "outputStorageContainerSasToken": {
                  "type": "string",
                  "description": "Storage Container SAS Token"
                }
              },
              "additionalProperties": false,
              "required": [
                "SourcePath",
                "Destination"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure file copy\n\nCopy files to Azure Blob Storage or virtual machines",
              
              "pattern": "^AzureFileCopy@4$"
            },
            "inputs": {
              "description": "Azure file copy inputs",
              "properties": {
                "SourcePath": {
                  "type": "string",
                  "description": "Source"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "Destination": {
                  "description": "Destination Type",
                  "enum": [
                    "AzureBlob",
                    "AzureVMs"
                  ]
                },
                "storage": {
                  "type": "string",
                  "description": "RM Storage Account"
                },
                "ContainerName": {
                  "type": "string",
                  "description": "Container Name"
                },
                "BlobPrefix": {
                  "type": "string",
                  "description": "Blob Prefix"
                },
                "resourceGroup": {
                  "type": "string",
                  "description": "Resource Group"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "MachineNames": {
                  "type": "string",
                  "description": "Filter Criteria"
                },
                "vmsAdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "vmsAdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "TargetPath": {
                  "type": "string",
                  "description": "Destination Folder"
                },
                "AdditionalArgumentsForBlobCopy": {
                  "type": "string",
                  "description": "Optional Arguments (for uploading files to blob)"
                },
                "AdditionalArgumentsForVMCopy": {
                  "type": "string",
                  "description": "Optional Arguments (for downloading files to VM)"
                },
                "sasTokenTimeOutInMinutes": {
                  "type": "string",
                  "description": "SAS Token Expiration Period In Minutes"
                },
                "enableCopyPrerequisites": {
                  "type": "boolean",
                  "description": "Enable Copy Prerequisites"
                },
                "CopyFilesInParallel": {
                  "type": "boolean",
                  "description": "Copy in Parallel"
                },
                "CleanTargetBeforeCopy": {
                  "type": "boolean",
                  "description": "Clean Target"
                },
                "skipCACheck": {
                  "type": "boolean",
                  "description": "Test Certificate"
                }
              },
              "additionalProperties": false,
              "required": [
                "SourcePath",
                "azureSubscription",
                "Destination",
                "storage"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure file copy\n\nCopy files to Azure Blob Storage or virtual machines",
              
              "pattern": "^AzureFileCopy@2$"
            },
            "inputs": {
              "description": "Azure file copy inputs",
              "properties": {
                "SourcePath": {
                  "type": "string",
                  "description": "Source"
                },
                "azureConnectionType": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ]
                },
                "azureClassicSubscription": {
                  "type": "string",
                  "description": "Azure Classic Subscription"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "Destination": {
                  "description": "Destination Type",
                  "enum": [
                    "AzureBlob",
                    "AzureVMs"
                  ]
                },
                "classicStorage": {
                  "type": "string",
                  "description": "Classic Storage Account"
                },
                "storage": {
                  "type": "string",
                  "description": "RM Storage Account"
                },
                "ContainerName": {
                  "type": "string",
                  "description": "Container Name"
                },
                "BlobPrefix": {
                  "type": "string",
                  "description": "Blob Prefix"
                },
                "cloudService": {
                  "type": "string",
                  "description": "Cloud Service"
                },
                "resourceGroup": {
                  "type": "string",
                  "description": "Resource Group"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "MachineNames": {
                  "type": "string",
                  "description": "Filter Criteria"
                },
                "vmsAdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "vmsAdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "TargetPath": {
                  "type": "string",
                  "description": "Destination Folder"
                },
                "AdditionalArgumentsForBlobCopy": {
                  "type": "string",
                  "description": "Optional Arguments (for uploading files to blob)"
                },
                "AdditionalArgumentsForVMCopy": {
                  "type": "string",
                  "description": "Optional Arguments (for downloading files to VM)"
                },
                "enableCopyPrerequisites": {
                  "type": "boolean",
                  "description": "Enable Copy Prerequisites"
                },
                "CopyFilesInParallel": {
                  "type": "boolean",
                  "description": "Copy in Parallel"
                },
                "CleanTargetBeforeCopy": {
                  "type": "boolean",
                  "description": "Clean Target"
                },
                "skipCACheck": {
                  "type": "boolean",
                  "description": "Test Certificate"
                },
                "outputStorageUri": {
                  "type": "string",
                  "description": "Storage Container URI"
                },
                "outputStorageContainerSasToken": {
                  "type": "string",
                  "description": "Storage Container SAS Token"
                }
              },
              "additionalProperties": false,
              "required": [
                "SourcePath",
                "Destination"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure file copy\n\nCopy files to Azure Blob Storage or virtual machines",
              
              "pattern": "^AzureFileCopy@3$"
            },
            "inputs": {
              "description": "Azure file copy inputs",
              "properties": {
                "SourcePath": {
                  "type": "string",
                  "description": "Source"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "Destination": {
                  "description": "Destination Type",
                  "enum": [
                    "AzureBlob",
                    "AzureVMs"
                  ]
                },
                "storage": {
                  "type": "string",
                  "description": "RM Storage Account"
                },
                "ContainerName": {
                  "type": "string",
                  "description": "Container Name"
                },
                "BlobPrefix": {
                  "type": "string",
                  "description": "Blob Prefix"
                },
                "resourceGroup": {
                  "type": "string",
                  "description": "Resource Group"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "MachineNames": {
                  "type": "string",
                  "description": "Filter Criteria"
                },
                "vmsAdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "vmsAdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "TargetPath": {
                  "type": "string",
                  "description": "Destination Folder"
                },
                "AdditionalArgumentsForBlobCopy": {
                  "type": "string",
                  "description": "Optional Arguments (for uploading files to blob)"
                },
                "AdditionalArgumentsForVMCopy": {
                  "type": "string",
                  "description": "Optional Arguments (for downloading files to VM)"
                },
                "enableCopyPrerequisites": {
                  "type": "boolean",
                  "description": "Enable Copy Prerequisites"
                },
                "CopyFilesInParallel": {
                  "type": "boolean",
                  "description": "Copy in Parallel"
                },
                "CleanTargetBeforeCopy": {
                  "type": "boolean",
                  "description": "Clean Target"
                },
                "skipCACheck": {
                  "type": "boolean",
                  "description": "Test Certificate"
                },
                "outputStorageUri": {
                  "type": "string",
                  "description": "Storage Container URI"
                },
                "outputStorageContainerSasToken": {
                  "type": "string",
                  "description": "Storage Container SAS Token"
                },
                "sasTokenTimeOutInMinutes": {
                  "type": "string",
                  "description": "SAS Token Expiration Period In Minutes"
                }
              },
              "additionalProperties": false,
              "required": [
                "SourcePath",
                "azureSubscription",
                "Destination",
                "storage"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Index sources and publish symbols\n\nIndex your source code and publish symbols to a file share or Azure Artifacts symbol server",
              
              "pattern": "^PublishSymbols@2$"
            },
            "inputs": {
              "description": "Index sources and publish symbols inputs",
              "properties": {
                "SymbolsFolder": {
                  "type": "string",
                  "description": "Path to symbols folder"
                },
                "SearchPattern": {
                  "type": "string",
                  "description": "Search pattern"
                },
                "IndexSources": {
                  "type": "boolean",
                  "description": "Index sources"
                },
                "PublishSymbols": {
                  "type": "boolean",
                  "description": "Publish symbols"
                },
                "SymbolServerType": {
                  "description": "Symbol server type",
                  "enum": [
                    " ",
                    "TeamServices",
                    "FileShare"
                  ]
                },
                "SymbolsPath": {
                  "type": "string",
                  "description": "Path to publish symbols"
                },
                "CompressSymbols": {
                  "type": "boolean",
                  "description": "Compress symbols"
                },
                "SymbolExpirationInDays": {
                  "type": "string",
                  "description": "Symbol Expiration (in days)"
                },
                "IndexableFileFormats": {
                  "description": "Symbol file formats to publish",
                  "enum": [
                    "Default",
                    "Pdb",
                    "SourceMap",
                    "All"
                  ]
                },
                "DetailedLog": {
                  "type": "boolean",
                  "description": "Verbose logging"
                },
                "TreatNotIndexedAsWarning": {
                  "type": "boolean",
                  "description": "Warn if not indexed"
                },
                "UseNetCoreClientTool": {
                  "type": "boolean",
                  "description": "Use NetCore client tool"
                },
                "SymbolsMaximumWaitTime": {
                  "type": "string",
                  "description": "Max wait time (min)"
                },
                "SymbolsProduct": {
                  "type": "string",
                  "description": "Product"
                },
                "SymbolsVersion": {
                  "type": "string",
                  "description": "Version"
                },
                "SymbolsArtifactName": {
                  "type": "string",
                  "description": "Artifact name"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Index Sources & Publish Symbols\n\nIndex your source code and publish symbols to a file share",
              
              "pattern": "^PublishSymbols@1$"
            },
            "inputs": {
              "description": "Index Sources & Publish Symbols inputs",
              "properties": {
                "SymbolsPath": {
                  "type": "string",
                  "description": "Path to publish symbols"
                },
                "SearchPattern": {
                  "type": "string",
                  "description": "Search pattern"
                },
                "SymbolsFolder": {
                  "type": "string",
                  "description": "Path to symbols folder"
                },
                "SkipIndexing": {
                  "type": "boolean",
                  "description": "Skip indexing"
                },
                "TreatNotIndexedAsWarning": {
                  "type": "boolean",
                  "description": "Warn if not indexed"
                },
                "SymbolsMaximumWaitTime": {
                  "type": "string",
                  "description": "Max wait time (min)"
                },
                "SymbolsProduct": {
                  "type": "string",
                  "description": "Product"
                },
                "SymbolsVersion": {
                  "type": "string",
                  "description": "Version"
                },
                "SymbolsArtifactName": {
                  "type": "string",
                  "description": "Artifact name"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Copy files over SSH\n\nCopy files or build artifacts to a remote machine over SSH",
              
              "pattern": "^CopyFilesOverSSH@0$"
            },
            "inputs": {
              "description": "Copy files over SSH inputs",
              "properties": {
                "sshEndpoint": {
                  "type": "string",
                  "description": "SSH service connection"
                },
                "sourceFolder": {
                  "type": "string",
                  "description": "Source folder"
                },
                "contents": {
                  "type": "string",
                  "description": "Contents"
                },
                "targetFolder": {
                  "type": "string",
                  "description": "Target folder"
                },
                "isWindowsOnTarget": {
                  "type": "boolean",
                  "description": "Target machine running Windows"
                },
                "cleanTargetFolder": {
                  "type": "boolean",
                  "description": "Clean target folder"
                },
                "cleanHiddenFilesInTarget": {
                  "type": "boolean",
                  "description": "Remove hidden files in target folder"
                },
                "readyTimeout": {
                  "type": "string",
                  "description": "SSH handshake timeout"
                },
                "overwrite": {
                  "type": "boolean",
                  "description": "Overwrite"
                },
                "failOnEmptySource": {
                  "type": "boolean",
                  "description": "Fail if no files found to copy"
                },
                "flattenFolders": {
                  "type": "boolean",
                  "description": "Flatten folders"
                }
              },
              "additionalProperties": false,
              "required": [
                "sshEndpoint"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Gradle\n\nBuild using a Gradle wrapper script",
              
              "pattern": "^Gradle@3$"
            },
            "inputs": {
              "description": "Gradle inputs",
              "properties": {
                "gradleWrapperFile": {
                  "type": "string",
                  "description": "Gradle wrapper"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "options": {
                  "type": "string",
                  "description": "Options"
                },
                "tasks": {
                  "type": "string",
                  "description": "Tasks"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to Azure Pipelines"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test results files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                },
                "codeCoverageToolOption": {
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ]
                },
                "codeCoverageClassFilesDirectories": {
                  "type": "string",
                  "description": "Class files directories"
                },
                "codeCoverageClassFilter": {
                  "type": "string",
                  "description": "Class inclusion/exclusion filters"
                },
                "codeCoverageFailIfEmpty": {
                  "type": "boolean",
                  "description": "Fail when code coverage results are missing"
                },
                "codeCoverageGradle5xOrHigher": {
                  "type": "boolean",
                  "description": "Gradle version >= 5.x"
                },
                "javaHomeOption": {
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ]
                },
                "jdkVersionOption": {
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ]
                },
                "jdkDirectory": {
                  "type": "string",
                  "description": "JDK path"
                },
                "jdkArchitectureOption": {
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                },
                "gradleOptions": {
                  "type": "string",
                  "description": "Set GRADLE_OPTS"
                },
                "sonarQubeRunAnalysis": {
                  "type": "boolean",
                  "description": "Run SonarQube or SonarCloud Analysis"
                },
                "sqGradlePluginVersionChoice": {
                  "description": "SonarQube scanner for Gradle version",
                  "enum": [
                    "specify",
                    "build"
                  ]
                },
                "sonarQubeGradlePluginVersion": {
                  "type": "string",
                  "description": "SonarQube scanner for Gradle plugin version"
                },
                "checkStyleRunAnalysis": {
                  "type": "boolean",
                  "description": "Run Checkstyle"
                },
                "findBugsRunAnalysis": {
                  "type": "boolean",
                  "description": "Run FindBugs"
                },
                "pmdRunAnalysis": {
                  "type": "boolean",
                  "description": "Run PMD"
                },
                "spotBugsAnalysis": {
                  "type": "boolean",
                  "description": "Run SpotBugs"
                },
                "spotBugsGradlePluginVersionChoice": {
                  "description": "Spotbugs plugin version",
                  "enum": [
                    "specify",
                    "build"
                  ]
                },
                "spotbugsGradlePluginVersion": {
                  "type": "string",
                  "description": "Version number"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Gradle\n\nBuild using a Gradle wrapper script",
              
              "pattern": "^Gradle@2$"
            },
            "inputs": {
              "description": "Gradle inputs",
              "properties": {
                "gradleWrapperFile": {
                  "type": "string",
                  "description": "Gradle wrapper"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "options": {
                  "type": "string",
                  "description": "Options"
                },
                "tasks": {
                  "type": "string",
                  "description": "Tasks"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to Azure Pipelines"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test results files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                },
                "codeCoverageToolOption": {
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ]
                },
                "codeCoverageClassFilesDirectories": {
                  "type": "string",
                  "description": "Class files directories"
                },
                "codeCoverageClassFilter": {
                  "type": "string",
                  "description": "Class inclusion/exclusion filters"
                },
                "codeCoverageFailIfEmpty": {
                  "type": "boolean",
                  "description": "Fail when code coverage results are missing"
                },
                "codeCoverageGradle5xOrHigher": {
                  "type": "boolean",
                  "description": "Gradle version >= 5.x"
                },
                "javaHomeOption": {
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ]
                },
                "jdkVersionOption": {
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ]
                },
                "jdkDirectory": {
                  "type": "string",
                  "description": "JDK path"
                },
                "jdkArchitectureOption": {
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                },
                "gradleOptions": {
                  "type": "string",
                  "description": "Set GRADLE_OPTS"
                },
                "sonarQubeRunAnalysis": {
                  "type": "boolean",
                  "description": "Run SonarQube or SonarCloud Analysis"
                },
                "sqGradlePluginVersionChoice": {
                  "description": "SonarQube scanner for Gradle version",
                  "enum": [
                    "specify",
                    "build"
                  ]
                },
                "sonarQubeGradlePluginVersion": {
                  "type": "string",
                  "description": "SonarQube scanner for Gradle plugin version"
                },
                "checkStyleRunAnalysis": {
                  "type": "boolean",
                  "description": "Run Checkstyle"
                },
                "findBugsRunAnalysis": {
                  "type": "boolean",
                  "description": "Run FindBugs"
                },
                "pmdRunAnalysis": {
                  "type": "boolean",
                  "description": "Run PMD"
                },
                "spotBugsAnalysis": {
                  "type": "boolean",
                  "description": "Run SpotBugs"
                },
                "spotBugsGradlePluginVersionChoice": {
                  "description": "Spotbugs plugin version",
                  "enum": [
                    "specify",
                    "build"
                  ]
                },
                "spotbugsGradlePluginVersion": {
                  "type": "string",
                  "description": "Version number"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Gradle\n\nBuild using a Gradle wrapper script",
              
              "pattern": "^Gradle@1$"
            },
            "inputs": {
              "description": "Gradle inputs",
              "properties": {
                "gradleWrapperFile": {
                  "type": "string",
                  "description": "Gradle Wrapper"
                },
                "options": {
                  "type": "string",
                  "description": "Options"
                },
                "tasks": {
                  "type": "string",
                  "description": "Tasks"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to TFS/Team Services"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test Results Files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test Run Title"
                },
                "codeCoverageToolOption": {
                  "description": "Code Coverage Tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ]
                },
                "codeCoverageClassFilesDirectories": {
                  "type": "string",
                  "description": "Class Files Directories"
                },
                "codeCoverageClassFilter": {
                  "type": "string",
                  "description": "Class Inclusion/Exclusion Filters"
                },
                "codeCoverageFailIfEmpty": {
                  "type": "boolean",
                  "description": "Fail When Code Coverage Results Are Missing"
                },
                "javaHomeOption": {
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ]
                },
                "jdkVersionOption": {
                  "description": "JDK Version",
                  "enum": [
                    "default",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ]
                },
                "jdkDirectory": {
                  "type": "string",
                  "description": "JDK Path"
                },
                "jdkArchitectureOption": {
                  "description": "JDK Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                },
                "gradleOptions": {
                  "type": "string",
                  "description": "Set GRADLE_OPTS"
                },
                "sonarQubeRunAnalysis": {
                  "type": "boolean",
                  "description": "Run SonarQube Analysis"
                },
                "sonarQubeServiceEndpoint": {
                  "type": "string",
                  "description": "SonarQube Endpoint"
                },
                "sonarQubeProjectName": {
                  "type": "string",
                  "description": "SonarQube Project Name"
                },
                "sonarQubeProjectKey": {
                  "type": "string",
                  "description": "SonarQube Project Key"
                },
                "sonarQubeProjectVersion": {
                  "type": "string",
                  "description": "SonarQube Project Version"
                },
                "sonarQubeGradlePluginVersion": {
                  "type": "string",
                  "description": "SonarQube Gradle Plugin Version"
                },
                "sonarQubeSpecifyDB": {
                  "type": "boolean",
                  "description": "The SonarQube server version is lower than 5.2"
                },
                "sonarQubeDBUrl": {
                  "type": "string",
                  "description": "Db Connection String"
                },
                "sonarQubeDBUsername": {
                  "type": "string",
                  "description": "Db Username"
                },
                "sonarQubeDBPassword": {
                  "type": "string",
                  "description": "Db User Password"
                },
                "sonarQubeIncludeFullReport": {
                  "type": "boolean",
                  "description": "Include full analysis report in the build summary (SQ 5.3+)"
                },
                "sonarQubeFailWhenQualityGateFails": {
                  "type": "boolean",
                  "description": "Fail the build on quality gate failure (SQ 5.3+)"
                },
                "checkStyleRunAnalysis": {
                  "type": "boolean",
                  "description": "Run Checkstyle"
                },
                "findBugsRunAnalysis": {
                  "type": "boolean",
                  "description": "Run FindBugs"
                },
                "pmdRunAnalysis": {
                  "type": "boolean",
                  "description": "Run PMD"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "App Center distribute\n\nDistribute app builds to testers and users via Visual Studio App Center",
              
              "pattern": "^AppCenterDistribute@1$"
            },
            "inputs": {
              "description": "App Center distribute inputs",
              "properties": {
                "serverEndpoint": {
                  "type": "string",
                  "description": "App Center service connection"
                },
                "appSlug": {
                  "type": "string",
                  "description": "App slug"
                },
                "appFile": {
                  "type": "string",
                  "description": "Binary file path"
                },
                "symbolsOption": {
                  "description": "Symbols type",
                  "enum": [
                    "Apple"
                  ]
                },
                "symbolsPath": {
                  "type": "string",
                  "description": "Symbols path"
                },
                "symbolsPdbFiles": {
                  "type": "string",
                  "description": "Symbols path (*.pdb)"
                },
                "symbolsDsymFiles": {
                  "type": "string",
                  "description": "dSYM path"
                },
                "symbolsMappingTxtFile": {
                  "type": "string",
                  "description": "Mapping file"
                },
                "symbolsIncludeParentDirectory": {
                  "type": "boolean",
                  "description": "Include all items in parent folder"
                },
                "releaseNotesOption": {
                  "description": "Create release notes",
                  "enum": [
                    "input",
                    "file"
                  ]
                },
                "releaseNotesInput": {
                  "type": "string",
                  "description": "Release notes"
                },
                "releaseNotesFile": {
                  "type": "string",
                  "description": "Release notes file"
                },
                "isMandatory": {
                  "type": "boolean",
                  "description": "Require users to update to this release"
                },
                "distributionGroupId": {
                  "type": "string",
                  "description": "Destination ID"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverEndpoint",
                "appSlug",
                "appFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "App Center distribute\n\nDistribute app builds to testers and users via Visual Studio App Center",
              
              "pattern": "^AppCenterDistribute@2$"
            },
            "inputs": {
              "description": "App Center distribute inputs",
              "properties": {
                "serverEndpoint": {
                  "type": "string",
                  "description": "App Center service connection"
                },
                "appSlug": {
                  "type": "string",
                  "description": "App slug"
                },
                "appFile": {
                  "type": "string",
                  "description": "Binary file path"
                },
                "symbolsOption": {
                  "description": "Symbols type",
                  "enum": [
                    "Apple"
                  ]
                },
                "symbolsPath": {
                  "type": "string",
                  "description": "Symbols path"
                },
                "symbolsPdbFiles": {
                  "type": "string",
                  "description": "Symbols path (*.pdb)"
                },
                "symbolsDsymFiles": {
                  "type": "string",
                  "description": "dSYM path"
                },
                "symbolsMappingTxtFile": {
                  "type": "string",
                  "description": "Mapping file"
                },
                "symbolsIncludeParentDirectory": {
                  "type": "boolean",
                  "description": "Include all items in parent folder"
                },
                "releaseNotesOption": {
                  "description": "Create release notes",
                  "enum": [
                    "input",
                    "file"
                  ]
                },
                "releaseNotesInput": {
                  "type": "string",
                  "description": "Release notes"
                },
                "releaseNotesFile": {
                  "type": "string",
                  "description": "Release notes file"
                },
                "isMandatory": {
                  "type": "boolean",
                  "description": "Require users to update to this release"
                },
                "distributionGroupId": {
                  "type": "string",
                  "description": "Destination IDs"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverEndpoint",
                "appSlug",
                "appFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "App Center distribute\n\nDistribute app builds to testers and users via Visual Studio App Center",
              
              "pattern": "^AppCenterDistribute@3$"
            },
            "inputs": {
              "description": "App Center distribute inputs",
              "properties": {
                "serverEndpoint": {
                  "type": "string",
                  "description": "App Center service connection"
                },
                "appSlug": {
                  "type": "string",
                  "description": "App slug"
                },
                "appFile": {
                  "type": "string",
                  "description": "Binary file path"
                },
                "buildVersion": {
                  "type": "string",
                  "description": "Build version"
                },
                "symbolsOption": {
                  "description": "Symbols type",
                  "enum": [
                    "Apple",
                    "Android",
                    "UWP"
                  ]
                },
                "symbolsPath": {
                  "type": "string",
                  "description": "Symbols path"
                },
                "appxsymPath": {
                  "type": "string",
                  "description": "Symbols path (*.appxsym)"
                },
                "symbolsDsymFiles": {
                  "type": "string",
                  "description": "dSYM path"
                },
                "symbolsMappingTxtFile": {
                  "type": "string",
                  "description": "Mapping file"
                },
                "nativeLibrariesPath": {
                  "type": "string",
                  "description": "Native Library File Path"
                },
                "symbolsIncludeParentDirectory": {
                  "type": "boolean",
                  "description": "Include all items in parent folder"
                },
                "releaseNotesOption": {
                  "description": "Create release notes",
                  "enum": [
                    "input",
                    "file"
                  ]
                },
                "releaseNotesInput": {
                  "type": "string",
                  "description": "Release notes"
                },
                "releaseNotesFile": {
                  "type": "string",
                  "description": "Release notes file"
                },
                "isMandatory": {
                  "type": "boolean",
                  "description": "Require users to update to this release"
                },
                "destinationType": {
                  "description": "Release destination",
                  "enum": [
                    "groups",
                    "store"
                  ]
                },
                "distributionGroupId": {
                  "type": "string",
                  "description": "Destination IDs"
                },
                "destinationStoreId": {
                  "type": "string",
                  "description": "Destination ID"
                },
                "isSilent": {
                  "type": "boolean",
                  "description": "Do not notify testers. Release will still be available to install."
                }
              },
              "additionalProperties": false,
              "required": [
                "serverEndpoint",
                "appSlug",
                "appFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "App Center Distribute\n\nDistribute app builds to testers and users via App Center",
              
              "pattern": "^AppCenterDistribute@0$"
            },
            "inputs": {
              "description": "App Center Distribute inputs",
              "properties": {
                "serverEndpoint": {
                  "type": "string",
                  "description": "App Center connection"
                },
                "appSlug": {
                  "type": "string",
                  "description": "App slug"
                },
                "appFile": {
                  "type": "string",
                  "description": "Binary file path"
                },
                "symbolsOption": {
                  "description": "Symbols type",
                  "enum": [
                    "Apple"
                  ]
                },
                "symbolsPath": {
                  "type": "string",
                  "description": "Symbols path"
                },
                "symbolsPdbFiles": {
                  "type": "string",
                  "description": "Symbols path (*.pdb)"
                },
                "symbolsDsymFiles": {
                  "type": "string",
                  "description": "dSYM path"
                },
                "symbolsMappingTxtFile": {
                  "type": "string",
                  "description": "Mapping file"
                },
                "symbolsIncludeParentDirectory": {
                  "type": "boolean",
                  "description": "Include all items in parent folder"
                },
                "releaseNotesOption": {
                  "description": "Create release notes",
                  "enum": [
                    "input",
                    "file"
                  ]
                },
                "releaseNotesInput": {
                  "type": "string",
                  "description": "Release notes"
                },
                "releaseNotesFile": {
                  "type": "string",
                  "description": "Release notes file"
                },
                "distributionGroupId": {
                  "type": "string",
                  "description": "Distribution group ID"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverEndpoint",
                "appSlug",
                "appFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet tool installer\n\nAcquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
              
              "pattern": "^NuGetToolInstaller@1$"
            },
            "inputs": {
              "description": "NuGet tool installer inputs",
              "properties": {
                "versionSpec": {
                  "type": "string",
                  "description": "Version of NuGet.exe to install"
                },
                "checkLatest": {
                  "type": "boolean",
                  "description": "Always check for new versions"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "NuGet tool installer\n\nAcquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
              
              "pattern": "^NuGetToolInstaller@0$"
            },
            "inputs": {
              "description": "NuGet tool installer inputs",
              "properties": {
                "versionSpec": {
                  "type": "string",
                  "description": "Version of NuGet.exe to install"
                },
                "checkLatest": {
                  "type": "boolean",
                  "description": "Always download the latest matching version"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Jenkins download artifacts\n\nDownload artifacts produced by a Jenkins job",
              
              "pattern": "^JenkinsDownloadArtifacts@1$"
            },
            "inputs": {
              "description": "Jenkins download artifacts inputs",
              "properties": {
                "jenkinsServerConnection": {
                  "type": "string",
                  "description": "Jenkins service connection"
                },
                "jobName": {
                  "type": "string",
                  "description": "Job name"
                },
                "jenkinsJobType": {
                  "type": "string",
                  "description": "Jenkins job type"
                },
                "saveTo": {
                  "type": "string",
                  "description": "Save to"
                },
                "jenkinsBuild": {
                  "description": "Download artifacts produced by",
                  "enum": [
                    "LastSuccessfulBuild",
                    "BuildNumber"
                  ]
                },
                "jenkinsBuildNumber": {
                  "type": "string",
                  "description": "Jenkins build number"
                },
                "itemPattern": {
                  "type": "string",
                  "description": "Item Pattern"
                },
                "downloadCommitsAndWorkItems": {
                  "type": "boolean",
                  "description": "Download Commits and WorkItems"
                },
                "startJenkinsBuildNumber": {
                  "type": "string",
                  "description": "Download commits and work items from"
                },
                "artifactDetailsFileNameSuffix": {
                  "type": "string",
                  "description": "Commit and WorkItem FileName"
                },
                "propagatedArtifacts": {
                  "type": "boolean",
                  "description": "Artifacts are propagated to Azure"
                },
                "artifactProvider": {
                  "description": "Artifact Provider",
                  "enum": [
                    "azureStorage"
                  ]
                },
                "ConnectedServiceNameARM": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "storageAccountName": {
                  "type": "string",
                  "description": "Storage Account Name"
                },
                "containerName": {
                  "type": "string",
                  "description": "Container Name"
                },
                "commonVirtualPath": {
                  "type": "string",
                  "description": "Common Virtual Path"
                }
              },
              "additionalProperties": false,
              "required": [
                "jenkinsServerConnection",
                "jobName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Functions for container\n\nUpdate a function app with a Docker container",
              
              "pattern": "^AzureFunctionAppContainer@1$"
            },
            "inputs": {
              "description": "Azure Functions for container inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "appName": {
                  "type": "string",
                  "description": "App name"
                },
                "deployToSlotOrASE": {
                  "type": "boolean",
                  "description": "Deploy to Slot or App Service Environment"
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "slotName": {
                  "type": "string",
                  "description": "Slot"
                },
                "imageName": {
                  "type": "string",
                  "description": "Image name"
                },
                "containerCommand": {
                  "type": "string",
                  "description": "Startup command "
                },
                "appSettings": {
                  "type": "string",
                  "description": "App settings"
                },
                "configurationStrings": {
                  "type": "string",
                  "description": "Configuration settings"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "appName",
                "imageName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Decrypt file (OpenSSL)\n\nDecrypt a file using OpenSSL",
              
              "pattern": "^DecryptFile@1$"
            },
            "inputs": {
              "description": "Decrypt file (OpenSSL) inputs",
              "properties": {
                "cipher": {
                  "type": "string",
                  "description": "Cypher"
                },
                "inFile": {
                  "type": "string",
                  "description": "Encrypted file"
                },
                "passphrase": {
                  "type": "string",
                  "description": "Passphrase"
                },
                "outFile": {
                  "type": "string",
                  "description": "Decrypted file path"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                }
              },
              "additionalProperties": false,
              "required": [
                "inFile",
                "passphrase"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Package and deploy Helm charts\n\nDeploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands",
              
              "pattern": "^HelmDeploy@0$"
            },
            "inputs": {
              "description": "Package and deploy Helm charts inputs",
              "properties": {
                "connectionType": {
                  "description": "Connection Type",
                  "enum": [
                    "Azure Resource Manager",
                    "Kubernetes Service Connection",
                    "None"
                  ]
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "azureResourceGroup": {
                  "type": "string",
                  "description": "Resource group"
                },
                "kubernetesCluster": {
                  "type": "string",
                  "description": "Kubernetes cluster"
                },
                "useClusterAdmin": {
                  "type": "boolean",
                  "description": "Use cluster admin credentials"
                },
                "kubernetesServiceConnection": {
                  "type": "string",
                  "description": "Kubernetes Service Connection"
                },
                "namespace": {
                  "type": "string",
                  "description": "Namespace"
                },
                "azureSubscriptionForACR": {
                  "type": "string",
                  "description": "Azure subscription for Container Registry"
                },
                "azureResourceGroupForACR": {
                  "type": "string",
                  "description": "Resource group"
                },
                "azureContainerRegistry": {
                  "type": "string",
                  "description": "Azure Container Registry"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "create",
                    "delete",
                    "expose",
                    "get",
                    "init",
                    "install",
                    "login",
                    "logout",
                    "ls",
                    "package",
                    "rollback",
                    "save",
                    "upgrade",
                    "uninstall"
                  ]
                },
                "chartType": {
                  "description": "Chart Type",
                  "enum": [
                    "Name",
                    "FilePath"
                  ]
                },
                "chartName": {
                  "type": "string",
                  "description": "Chart Name"
                },
                "chartPath": {
                  "type": "string",
                  "description": "Chart Path"
                },
                "chartVersion": {
                  "type": "string",
                  "description": "Version"
                },
                "releaseName": {
                  "type": "string",
                  "description": "Release Name"
                },
                "overrideValues": {
                  "type": "string",
                  "description": "Set Values"
                },
                "valueFile": {
                  "type": "string",
                  "description": "Value File"
                },
                "destination": {
                  "type": "string",
                  "description": "Destination"
                },
                "canaryImage": {
                  "type": "boolean",
                  "description": "Use canary image version."
                },
                "upgradeTiller": {
                  "type": "boolean",
                  "description": "Upgrade Tiller"
                },
                "updateDependency": {
                  "type": "boolean",
                  "description": "Update Dependency"
                },
                "save": {
                  "type": "boolean",
                  "description": "Save"
                },
                "install": {
                  "type": "boolean",
                  "description": "Install if release not present."
                },
                "recreate": {
                  "type": "boolean",
                  "description": "Recreate Pods."
                },
                "resetValues": {
                  "type": "boolean",
                  "description": "Reset Values."
                },
                "force": {
                  "type": "boolean",
                  "description": "Force"
                },
                "waitForExecution": {
                  "type": "boolean",
                  "description": "Wait"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "enableTls": {
                  "type": "boolean",
                  "description": "Enable TLS"
                },
                "caCert": {
                  "type": "string",
                  "description": "CA certificate"
                },
                "certificate": {
                  "type": "string",
                  "description": "Certificate"
                },
                "privatekey": {
                  "type": "string",
                  "description": "Key"
                },
                "tillerNamespace": {
                  "type": "string",
                  "description": "Tiller namespace"
                },
                "failOnStderr": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                },
                "publishPipelineMetadata": {
                  "type": "boolean",
                  "description": "Publish pipeline metadata"
                },
                "chartNameForACR": {
                  "type": "string",
                  "description": "Chart Name For Azure Container Registry"
                },
                "chartPathForACR": {
                  "type": "string",
                  "description": "Chart Path for Azure Container Registry"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscriptionForACR",
                "azureResourceGroupForACR",
                "azureContainerRegistry"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Install Apple certificate\n\nInstall an Apple certificate required to build on a macOS agent machine",
              
              "pattern": "^InstallAppleCertificate@2$"
            },
            "inputs": {
              "description": "Install Apple certificate inputs",
              "properties": {
                "certSecureFile": {
                  "type": "string",
                  "description": "Certificate (P12)"
                },
                "certPwd": {
                  "type": "string",
                  "description": "Certificate (P12) password"
                },
                "keychain": {
                  "description": "Keychain",
                  "enum": [
                    "default",
                    "temp",
                    "custom"
                  ]
                },
                "keychainPassword": {
                  "type": "string",
                  "description": "Keychain password"
                },
                "customKeychainPath": {
                  "type": "string",
                  "description": "Custom keychain path"
                },
                "deleteCert": {
                  "type": "boolean",
                  "description": "Delete certificate from keychain"
                },
                "deleteCustomKeychain": {
                  "type": "boolean",
                  "description": "Delete custom keychain"
                },
                "signingIdentity": {
                  "type": "string",
                  "description": "Certificate signing identity"
                },
                "setUpPartitionIdACLForPrivateKey": {
                  "type": "boolean",
                  "description": "Set up partition_id ACL for the imported private key"
                }
              },
              "additionalProperties": false,
              "required": [
                "certSecureFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Install Apple Certificate\n\nInstall an Apple certificate required to build on a macOS agent",
              
              "pattern": "^InstallAppleCertificate@1$"
            },
            "inputs": {
              "description": "Install Apple Certificate inputs",
              "properties": {
                "certSecureFile": {
                  "type": "string",
                  "description": "Certificate (P12)"
                },
                "certPwd": {
                  "type": "string",
                  "description": "Certificate (P12) password"
                },
                "keychain": {
                  "description": "Keychain",
                  "enum": [
                    "default",
                    "temp",
                    "custom"
                  ]
                },
                "keychainPassword": {
                  "type": "string",
                  "description": "Keychain password"
                },
                "customKeychainPath": {
                  "type": "string",
                  "description": "Custom keychain path"
                },
                "deleteCert": {
                  "type": "boolean",
                  "description": "Delete certificate from keychain"
                },
                "deleteCustomKeychain": {
                  "type": "boolean",
                  "description": "Delete custom keychain"
                },
                "signingIdentity": {
                  "type": "string",
                  "description": "Certificate signing identity"
                }
              },
              "additionalProperties": false,
              "required": [
                "certSecureFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Install Apple Certificate\n\nInstall an Apple certificate required to build on a macOS agent",
              
              "pattern": "^InstallAppleCertificate@0$"
            },
            "inputs": {
              "description": "Install Apple Certificate inputs",
              "properties": {
                "certSecureFile": {
                  "type": "string",
                  "description": "Certificate (P12)"
                },
                "certPwd": {
                  "type": "string",
                  "description": "Certificate (P12) Password"
                },
                "keychain": {
                  "description": "Keychain",
                  "enum": [
                    "default",
                    "temp",
                    "custom"
                  ]
                },
                "keychainPassword": {
                  "type": "string",
                  "description": "Keychain Password"
                },
                "customKeychainPath": {
                  "type": "string",
                  "description": "Custom Keychain Path"
                },
                "deleteCert": {
                  "type": "boolean",
                  "description": "Delete Certificate from Keychain"
                },
                "deleteCustomKeychain": {
                  "type": "boolean",
                  "description": "Delete Custom Keychain"
                },
                "signingIdentity": {
                  "type": "string",
                  "description": "Certificate Signing Identity"
                }
              },
              "additionalProperties": false,
              "required": [
                "certSecureFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Invoke Azure Function\n\nInvoke an Azure Function",
              
              "pattern": "^AzureFunction@1$"
            },
            "inputs": {
              "description": "Invoke Azure Function inputs",
              "properties": {
                "function": {
                  "type": "string",
                  "description": "Azure function URL"
                },
                "key": {
                  "type": "string",
                  "description": "Function key"
                },
                "method": {
                  "description": "Method",
                  "enum": [
                    "OPTIONS",
                    "GET",
                    "HEAD",
                    "POST",
                    "PUT",
                    "DELETE",
                    "TRACE",
                    "PATCH"
                  ]
                },
                "headers": {
                  "type": "string",
                  "description": "Headers"
                },
                "queryParameters": {
                  "type": "string",
                  "description": "Query parameters"
                },
                "body": {
                  "type": "string",
                  "description": "Body"
                },
                "waitForCompletion": {
                  "description": "Completion event",
                  "enum": [
                    "true",
                    "false"
                  ]
                },
                "successCriteria": {
                  "type": "string",
                  "description": "Success criteria"
                }
              },
              "additionalProperties": false,
              "required": [
                "function",
                "key"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Invoke Azure Function\n\nInvoke Azure function as a part of your process.",
              
              "pattern": "^AzureFunction@0$"
            },
            "inputs": {
              "description": "Invoke Azure Function inputs",
              "properties": {
                "function": {
                  "type": "string",
                  "description": "Azure function url"
                },
                "key": {
                  "type": "string",
                  "description": "Function key"
                },
                "method": {
                  "description": "Method",
                  "enum": [
                    "OPTIONS",
                    "GET",
                    "HEAD",
                    "POST",
                    "PUT",
                    "DELETE",
                    "TRACE",
                    "PATCH"
                  ]
                },
                "headers": {
                  "type": "string",
                  "description": "Headers"
                },
                "queryParameters": {
                  "type": "string",
                  "description": "Query parameters"
                },
                "body": {
                  "type": "string",
                  "description": "Body"
                },
                "waitForCompletion": {
                  "description": "Complete based on",
                  "enum": [
                    "true",
                    "false"
                  ]
                },
                "successCriteria": {
                  "type": "string",
                  "description": "Success criteria"
                }
              },
              "additionalProperties": false,
              "required": [
                "function",
                "key"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download GitHub Release\n\nDownloads a GitHub Release from a repository",
              
              "pattern": "^DownloadGitHubRelease@0$"
            },
            "inputs": {
              "description": "Download GitHub Release inputs",
              "properties": {
                "connection": {
                  "type": "string",
                  "description": "GitHub Connection"
                },
                "userRepository": {
                  "type": "string",
                  "description": "Repository"
                },
                "defaultVersionType": {
                  "description": "Default version",
                  "enum": [
                    "latest",
                    "specificVersion",
                    "specificTag"
                  ]
                },
                "version": {
                  "type": "string",
                  "description": "Release"
                },
                "itemPattern": {
                  "type": "string",
                  "description": "Item Pattern"
                },
                "downloadPath": {
                  "type": "string",
                  "description": "Destination directory"
                }
              },
              "additionalProperties": false,
              "required": [
                "connection",
                "userRepository"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "SSH\n\nRun shell commands or a script on a remote machine using SSH",
              
              "pattern": "^SSH@0$"
            },
            "inputs": {
              "description": "SSH inputs",
              "properties": {
                "sshEndpoint": {
                  "type": "string",
                  "description": "SSH service connection"
                },
                "runOptions": {
                  "description": "Run",
                  "enum": [
                    "commands",
                    "script",
                    "inline"
                  ]
                },
                "commands": {
                  "type": "string",
                  "description": "Commands"
                },
                "scriptPath": {
                  "type": "string",
                  "description": "Shell script path"
                },
                "inline": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "interpreterCommand": {
                  "type": "string",
                  "description": "Interpreter command"
                },
                "args": {
                  "type": "string",
                  "description": "Arguments"
                },
                "failOnStdErr": {
                  "type": "boolean",
                  "description": "Fail on STDERR"
                },
                "interactiveSession": {
                  "type": "boolean",
                  "description": "Enable interactive session"
                },
                "readyTimeout": {
                  "type": "string",
                  "description": "SSH handshake timeout"
                }
              },
              "additionalProperties": false,
              "required": [
                "sshEndpoint"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Publish pipeline artifact\n\nPublish a local directory or file as a named artifact for the current pipeline",
              
              "pattern": "^PublishPipelineArtifact@0$"
            },
            "inputs": {
              "description": "Publish pipeline artifact inputs",
              "properties": {
                "artifactName": {
                  "type": "string",
                  "description": "The name of this artifact"
                },
                "targetPath": {
                  "type": "string",
                  "description": "Path to publish"
                },
                "properties": {
                  "type": "string",
                  "description": "Custom properties"
                }
              },
              "additionalProperties": false,
              "required": [
                "targetPath"
              ]
            }
          },
          "$comment": "PublishPipelineArtifact is deprecated - Publish a local directory or file as a named artifact for the current pipeline",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Publish Pipeline Artifacts\n\nPublish (upload) a file or directory as a named artifact for the current run",
              
              "pattern": "^PublishPipelineArtifact@1$"
            },
            "inputs": {
              "description": "Publish Pipeline Artifacts inputs",
              "properties": {
                "targetPath": {
                  "type": "string",
                  "description": "File or directory path"
                },
                "artifact": {
                  "type": "string",
                  "description": "Artifact name"
                },
                "publishLocation": {
                  "description": "Artifact publish location",
                  "enum": [
                    "pipeline",
                    "filepath"
                  ]
                },
                "fileSharePath": {
                  "type": "string",
                  "description": "File share path"
                },
                "parallel": {
                  "type": "boolean",
                  "description": "Parallel copy"
                },
                "parallelCount": {
                  "type": "integer",
                  "description": "Parallel count"
                },
                "properties": {
                  "type": "string",
                  "description": "Custom properties"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "SonarQube for MSBuild - Begin Analysis\n\n[DEPRECATED] Fetch the Quality Profile from SonarQube to configure the analysis",
              
              "pattern": "^SonarQubePreBuild@1$"
            },
            "inputs": {
              "description": "SonarQube for MSBuild - Begin Analysis inputs",
              "properties": {
                "projectKey": {
                  "type": "string",
                  "description": "Project Key"
                },
                "projectName": {
                  "type": "string",
                  "description": "Project Name"
                },
                "projectVersion": {
                  "type": "string",
                  "description": "Project Version"
                },
                "connectedServiceName": {
                  "type": "string",
                  "description": "SonarQube Endpoint"
                },
                "dbUrl": {
                  "type": "string",
                  "description": "Db Connection String"
                },
                "dbUsername": {
                  "type": "string",
                  "description": "Db UserName"
                },
                "dbPassword": {
                  "type": "string",
                  "description": "Db User Password"
                },
                "cmdLineArgs": {
                  "type": "string",
                  "description": "Additional Settings"
                },
                "configFile": {
                  "type": "string",
                  "description": "Settings File"
                },
                "includeFullReport": {
                  "type": "boolean",
                  "description": "Include full analysis report in the build summary (SQ 5.3+)"
                },
                "breakBuild": {
                  "type": "boolean",
                  "description": "Fail the build on quality gate failure (SQ 5.3+)"
                }
              },
              "additionalProperties": false,
              "required": [
                "projectKey",
                "projectName",
                "connectedServiceName"
              ]
            }
          },
          "$comment": "SonarQubePreBuild is deprecated - [DEPRECATED] Fetch the Quality Profile from SonarQube to configure the analysis",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download artifacts from file share\n\nDownload artifacts from a file share, like \\\\share\\drop",
              
              "pattern": "^DownloadFileshareArtifacts@1$"
            },
            "inputs": {
              "description": "Download artifacts from file share inputs",
              "properties": {
                "filesharePath": {
                  "type": "string",
                  "description": "File share path"
                },
                "artifactName": {
                  "type": "string",
                  "description": "Artifact name"
                },
                "itemPattern": {
                  "type": "string",
                  "description": "Matching pattern"
                },
                "downloadPath": {
                  "type": "string",
                  "description": "Download path"
                },
                "parallelizationLimit": {
                  "type": "string",
                  "description": "Parallelization limit"
                }
              },
              "additionalProperties": false,
              "required": [
                "filesharePath",
                "artifactName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Kubectl\n\nDeploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
              
              "pattern": "^Kubernetes@1$"
            },
            "inputs": {
              "description": "Kubectl inputs",
              "properties": {
                "connectionType": {
                  "description": "Service connection type",
                  "enum": [
                    "Azure Resource Manager",
                    "Kubernetes Service Connection",
                    "None"
                  ]
                },
                "kubernetesServiceEndpoint": {
                  "type": "string",
                  "description": "Kubernetes service connection"
                },
                "azureSubscriptionEndpoint": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "azureResourceGroup": {
                  "type": "string",
                  "description": "Resource group"
                },
                "kubernetesCluster": {
                  "type": "string",
                  "description": "Kubernetes cluster"
                },
                "useClusterAdmin": {
                  "type": "boolean",
                  "description": "Use cluster admin credentials"
                },
                "namespace": {
                  "type": "string",
                  "description": "Namespace"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "apply",
                    "create",
                    "delete",
                    "exec",
                    "expose",
                    "get",
                    "login",
                    "logout",
                    "logs",
                    "run",
                    "set",
                    "top"
                  ]
                },
                "useConfigurationFile": {
                  "type": "boolean",
                  "description": "Use configuration"
                },
                "configurationType": {
                  "description": "Configuration type",
                  "enum": [
                    "configuration",
                    "inline"
                  ]
                },
                "configuration": {
                  "type": "string",
                  "description": "File path"
                },
                "inline": {
                  "type": "string",
                  "description": "Inline configuration"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "secretType": {
                  "description": "Type of secret",
                  "enum": [
                    "dockerRegistry",
                    "generic"
                  ]
                },
                "secretArguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "containerRegistryType": {
                  "description": "Container registry type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ]
                },
                "dockerRegistryEndpoint": {
                  "type": "string",
                  "description": "Docker registry service connection"
                },
                "azureSubscriptionEndpointForSecrets": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "azureContainerRegistry": {
                  "type": "string",
                  "description": "Azure container registry"
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret name"
                },
                "forceUpdate": {
                  "type": "boolean",
                  "description": "Force update secret"
                },
                "configMapName": {
                  "type": "string",
                  "description": "ConfigMap name"
                },
                "forceUpdateConfigMap": {
                  "type": "boolean",
                  "description": "Force update configmap"
                },
                "useConfigMapFile": {
                  "type": "boolean",
                  "description": "Use file"
                },
                "configMapFile": {
                  "type": "string",
                  "description": "ConfigMap file"
                },
                "configMapArguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "versionOrLocation": {
                  "description": "Kubectl",
                  "enum": [
                    "version",
                    "location"
                  ]
                },
                "versionSpec": {
                  "type": "string",
                  "description": "Version spec"
                },
                "checkLatest": {
                  "type": "boolean",
                  "description": "Check for latest version"
                },
                "specifyLocation": {
                  "type": "string",
                  "description": "Path to kubectl"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "outputFormat": {
                  "description": "Output format",
                  "enum": [
                    "json",
                    "yaml",
                    "none"
                  ]
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Kubectl\n\nDeploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
              
              "pattern": "^Kubernetes@0$"
            },
            "inputs": {
              "description": "Kubectl inputs",
              "properties": {
                "kubernetesServiceConnection": {
                  "type": "string",
                  "description": "Kubernetes service connection"
                },
                "namespace": {
                  "type": "string",
                  "description": "Namespace"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "apply",
                    "create",
                    "delete",
                    "exec",
                    "expose",
                    "get",
                    "logs",
                    "run",
                    "set",
                    "top"
                  ]
                },
                "useConfigurationFile": {
                  "type": "boolean",
                  "description": "Use Configuration files"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration file"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "secretType": {
                  "description": "Type of secret",
                  "enum": [
                    "dockerRegistry",
                    "generic"
                  ]
                },
                "secretArguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "containerRegistryType": {
                  "description": "Container Registry type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ]
                },
                "dockerRegistryConnection": {
                  "type": "string",
                  "description": "Docker Registry service connection"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "azureContainerRegistry": {
                  "type": "string",
                  "description": "Azure Container Registry"
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret name"
                },
                "forceUpdate": {
                  "type": "boolean",
                  "description": "Force update secret"
                },
                "configMapName": {
                  "type": "string",
                  "description": "ConfigMap name"
                },
                "forceUpdateConfigMap": {
                  "type": "boolean",
                  "description": "Force update configmap"
                },
                "useConfigMapFile": {
                  "type": "boolean",
                  "description": "Use file"
                },
                "configMapFile": {
                  "type": "string",
                  "description": "ConfigMap file"
                },
                "configMapArguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "versionOrLocation": {
                  "description": "Kubectl",
                  "enum": [
                    "version",
                    "location"
                  ]
                },
                "versionSpec": {
                  "type": "string",
                  "description": "Version spec"
                },
                "checkLatest": {
                  "type": "boolean",
                  "description": "Check for latest version"
                },
                "specifyLocation": {
                  "type": "string",
                  "description": "Path to Kubectl"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "outputFormat": {
                  "description": "Output format",
                  "enum": [
                    "json",
                    "yaml"
                  ]
                },
                "kubectlOutput": {
                  "type": "string",
                  "description": "Output variable name"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure IoT Edge\n\nBuild and deploy an Azure IoT Edge image",
              
              "pattern": "^AzureIoTEdge@2$"
            },
            "inputs": {
              "description": "Azure IoT Edge inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "Build module images",
                    "Push module images",
                    "Generate deployment manifest",
                    "Deploy to IoT Edge devices"
                  ]
                },
                "deploymentFilePath": {
                  "type": "string",
                  "description": "Deployment file"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription contains IoT Hub"
                },
                "iothubname": {
                  "type": "string",
                  "description": "IoT Hub name"
                },
                "deploymentid": {
                  "type": "string",
                  "description": "IoT Edge deployment ID"
                },
                "priority": {
                  "type": "string",
                  "description": "IoT Edge deployment priority"
                },
                "deviceOption": {
                  "description": "Choose single/multiple device",
                  "enum": [
                    "Single Device",
                    "Multiple Devices"
                  ]
                },
                "deviceId": {
                  "type": "string",
                  "description": "IoT Edge device ID"
                },
                "targetcondition": {
                  "type": "string",
                  "description": "IoT Edge device target condition"
                },
                "containerregistrytype": {
                  "description": "Container registry type",
                  "enum": [
                    "Azure Container Registry",
                    "Generic Container Registry"
                  ]
                },
                "dockerRegistryConnection": {
                  "type": "string",
                  "description": "Docker Registry Connection"
                },
                "azureSubscriptionEndpoint": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "azureContainerRegistry": {
                  "type": "string",
                  "description": "Azure Container Registry"
                },
                "templateFilePath": {
                  "type": "string",
                  "description": ".template.json file"
                },
                "defaultPlatform": {
                  "description": "Default platform",
                  "enum": [
                    "amd64",
                    "windows-amd64",
                    "arm32v7",
                    "arm64v8"
                  ]
                },
                "fillRegistryCredential": {
                  "description": "Add registry credential to deployment manifest",
                  "enum": [
                    "true",
                    "false"
                  ]
                },
                "deploymentManifestOutputPath": {
                  "type": "string",
                  "description": "Output path"
                },
                "validateGeneratedDeploymentManifest": {
                  "description": "Validate the schema of generated deployment manifest",
                  "enum": [
                    "true",
                    "false"
                  ]
                },
                "bypassModules": {
                  "type": "string",
                  "description": "Bypass module(s)"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Service Fabric Compose deploy\n\nDeploy a Docker Compose application to an Azure Service Fabric cluster",
              
              "pattern": "^ServiceFabricComposeDeploy@0$"
            },
            "inputs": {
              "description": "Service Fabric Compose deploy inputs",
              "properties": {
                "clusterConnection": {
                  "type": "string",
                  "description": "Cluster Service Connection"
                },
                "composeFilePath": {
                  "type": "string",
                  "description": "Compose File Path"
                },
                "applicationName": {
                  "type": "string",
                  "description": "Application Name"
                },
                "registryCredentials": {
                  "description": "Registry Credentials Source",
                  "enum": [
                    "AzureResourceManagerEndpoint",
                    "ContainerRegistryEndpoint",
                    "UsernamePassword",
                    "None"
                  ]
                },
                "dockerRegistryConnection": {
                  "type": "string",
                  "description": "Docker Registry Service Connection"
                },
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "registryUserName": {
                  "type": "string",
                  "description": "Registry User Name"
                },
                "registryPassword": {
                  "type": "string",
                  "description": "Registry Password"
                },
                "passwordEncrypted": {
                  "type": "boolean",
                  "description": "Password Encrypted"
                },
                "upgrade": {
                  "type": "boolean",
                  "description": "Upgrade"
                },
                "deployTimeoutSec": {
                  "type": "string",
                  "description": "Deploy Timeout (s)"
                },
                "removeTimeoutSec": {
                  "type": "string",
                  "description": "Remove Timeout (s)"
                },
                "getStatusTimeoutSec": {
                  "type": "string",
                  "description": "Get Status Timeout (s)"
                }
              },
              "additionalProperties": false,
              "required": [
                "clusterConnection"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Android signing\n\nSign and align Android APK files",
              
              "pattern": "^AndroidSigning@2$"
            },
            "inputs": {
              "description": "Android signing inputs",
              "properties": {
                "apkFiles": {
                  "type": "string",
                  "description": "APK files"
                },
                "jarsign": {
                  "type": "boolean",
                  "description": "Sign the APK"
                },
                "jarsignerKeystoreFile": {
                  "type": "string",
                  "description": "Keystore file"
                },
                "jarsignerKeystorePassword": {
                  "type": "string",
                  "description": "Keystore password"
                },
                "jarsignerKeystoreAlias": {
                  "type": "string",
                  "description": "Alias"
                },
                "jarsignerKeyPassword": {
                  "type": "string",
                  "description": "Key password"
                },
                "jarsignerArguments": {
                  "type": "string",
                  "description": "Jarsigner arguments"
                },
                "zipalign": {
                  "type": "boolean",
                  "description": "Zipalign"
                },
                "zipalignFile": {
                  "type": "string",
                  "description": "Zipalign location"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Android signing\n\nSign and align Android APK files",
              
              "pattern": "^AndroidSigning@3$"
            },
            "inputs": {
              "description": "Android signing inputs",
              "properties": {
                "apkFiles": {
                  "type": "string",
                  "description": "APK files"
                },
                "apksign": {
                  "type": "boolean",
                  "description": "Sign the APK"
                },
                "apksignerKeystoreFile": {
                  "type": "string",
                  "description": "Keystore file"
                },
                "apksignerKeystorePassword": {
                  "type": "string",
                  "description": "Keystore password"
                },
                "apksignerKeystoreAlias": {
                  "type": "string",
                  "description": "Alias"
                },
                "apksignerKeyPassword": {
                  "type": "string",
                  "description": "Key password"
                },
                "apksignerVersion": {
                  "type": "string",
                  "description": "apksigner version"
                },
                "apksignerArguments": {
                  "type": "string",
                  "description": "apksigner arguments"
                },
                "apksignerFile": {
                  "type": "string",
                  "description": "apksigner location"
                },
                "zipalign": {
                  "type": "boolean",
                  "description": "Zipalign"
                },
                "zipalignVersion": {
                  "type": "string",
                  "description": "Zipalign version"
                },
                "zipalignFile": {
                  "type": "string",
                  "description": "Zipalign location"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Android Signing\n\nSign and align Android APK files",
              
              "pattern": "^AndroidSigning@1$"
            },
            "inputs": {
              "description": "Android Signing inputs",
              "properties": {
                "files": {
                  "type": "string",
                  "description": "APK Files"
                },
                "jarsign": {
                  "type": "boolean",
                  "description": "Sign the APK"
                },
                "keystoreFile": {
                  "type": "string",
                  "description": "Keystore File"
                },
                "keystorePass": {
                  "type": "string",
                  "description": "Keystore Password"
                },
                "keystoreAlias": {
                  "type": "string",
                  "description": "Alias"
                },
                "keyPass": {
                  "type": "string",
                  "description": "Key Password"
                },
                "jarsignerArguments": {
                  "type": "string",
                  "description": "Jarsigner Arguments"
                },
                "zipalign": {
                  "type": "boolean",
                  "description": "Zipalign"
                },
                "zipalignLocation": {
                  "type": "string",
                  "description": "Zipalign Location"
                }
              },
              "additionalProperties": false,
              "required": [
                "files"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download pipeline artifact\n\nDownload a named artifact from a pipeline to a local path",
              
              "pattern": "^DownloadPipelineArtifact@1$"
            },
            "inputs": {
              "description": "Download pipeline artifact inputs",
              "properties": {
                "buildType": {
                  "description": "Download artifacts produced by",
                  "enum": [
                    "current",
                    "specific"
                  ]
                },
                "project": {
                  "type": "string",
                  "description": "Project"
                },
                "pipeline": {
                  "type": "string",
                  "description": "Build pipeline"
                },
                "specificBuildWithTriggering": {
                  "type": "boolean",
                  "description": "When appropriate, download artifacts from the triggering build."
                },
                "buildVersionToDownload": {
                  "description": "Build version to download",
                  "enum": [
                    "latest",
                    "latestFromBranch",
                    "specific"
                  ]
                },
                "branchName": {
                  "type": "string",
                  "description": "Branch name"
                },
                "pipelineId": {
                  "type": "string",
                  "description": "Build"
                },
                "tags": {
                  "type": "string",
                  "description": "Build Tags"
                },
                "artifactName": {
                  "type": "string",
                  "description": "Artifact name"
                },
                "itemPattern": {
                  "type": "string",
                  "description": "Matching pattern"
                },
                "targetPath": {
                  "type": "string",
                  "description": "Destination directory"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "DownloadPipelineArtifact is deprecated - Download a named artifact from a pipeline to a local path",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download pipeline artifact\n\nDownloads an artifact associated with a pipeline",
              
              "pattern": "^DownloadPipelineArtifact@0$"
            },
            "inputs": {
              "description": "Download pipeline artifact inputs",
              "properties": {
                "pipelineId": {
                  "type": "string",
                  "description": "The specific pipeline to download from"
                },
                "artifactName": {
                  "type": "string",
                  "description": "The name of artifact to download."
                },
                "targetPath": {
                  "type": "string",
                  "description": "Path to download to"
                }
              },
              "additionalProperties": false,
              "required": [
                "targetPath"
              ]
            }
          },
          "$comment": "DownloadPipelineArtifact is deprecated - Downloads an artifact associated with a pipeline",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download Pipeline Artifacts\n\nDownload build and pipeline artifacts",
              
              "pattern": "^DownloadPipelineArtifact@2$"
            },
            "inputs": {
              "description": "Download Pipeline Artifacts inputs",
              "properties": {
                "buildType": {
                  "description": "Download artifacts produced by",
                  "enum": [
                    "current",
                    "specific"
                  ]
                },
                "project": {
                  "type": "string",
                  "description": "Project"
                },
                "definition": {
                  "type": "string",
                  "description": "Build pipeline"
                },
                "specificBuildWithTriggering": {
                  "type": "boolean",
                  "description": "When appropriate, download artifacts from the triggering build."
                },
                "buildVersionToDownload": {
                  "description": "Build version to download",
                  "enum": [
                    "latest",
                    "latestFromBranch",
                    "specific"
                  ]
                },
                "branchName": {
                  "type": "string",
                  "description": "Branch name"
                },
                "pipelineId": {
                  "type": "string",
                  "description": "Build"
                },
                "tags": {
                  "type": "string",
                  "description": "Build Tags"
                },
                "allowPartiallySucceededBuilds": {
                  "type": "boolean",
                  "description": "Download artifacts from partially succeeded builds."
                },
                "allowFailedBuilds": {
                  "type": "boolean",
                  "description": "Download artifacts from failed builds."
                },
                "artifactName": {
                  "type": "string",
                  "description": "Artifact name"
                },
                "itemPattern": {
                  "type": "string",
                  "description": "Matching patterns"
                },
                "targetPath": {
                  "type": "string",
                  "description": "Destination directory"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Use Python version\n\nUse the specified version of Python from the tool cache, optionally adding it to the PATH",
              
              "pattern": "^UsePythonVersion@0$"
            },
            "inputs": {
              "description": "Use Python version inputs",
              "properties": {
                "versionSpec": {
                  "type": "string",
                  "description": "Version spec"
                },
                "disableDownloadFromRegistry": {
                  "type": "boolean",
                  "description": "Disable downloading releases from the GitHub registry"
                },
                "allowUnstable": {
                  "type": "boolean",
                  "description": "Allow downloading unstable releases"
                },
                "githubToken": {
                  "type": "string",
                  "description": "GitHub token for GitHub Actions python registry"
                },
                "addToPath": {
                  "type": "boolean",
                  "description": "Add to PATH"
                },
                "architecture": {
                  "description": "Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Service Fabric PowerShell\n\nRun a PowerShell script in the context of an Azure Service Fabric cluster connection",
              
              "pattern": "^ServiceFabricPowerShell@1$"
            },
            "inputs": {
              "description": "Service Fabric PowerShell inputs",
              "properties": {
                "clusterConnection": {
                  "type": "string",
                  "description": "Cluster Service Connection"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ]
                },
                "ScriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "Inline": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "ScriptArguments": {
                  "type": "string",
                  "description": "Script Arguments"
                }
              },
              "additionalProperties": false,
              "required": [
                "clusterConnection"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Visual Studio Test\n\nRun unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2).",
              
              "pattern": "^VSTest@2$"
            },
            "inputs": {
              "description": "Visual Studio Test inputs",
              "properties": {
                "testSelector": {
                  "description": "Select tests using",
                  "enum": [
                    "testAssemblies",
                    "testPlan",
                    "testRun"
                  ]
                },
                "testAssemblyVer2": {
                  "type": "string",
                  "description": "Test files"
                },
                "testPlan": {
                  "type": "string",
                  "description": "Test plan"
                },
                "testSuite": {
                  "type": "string",
                  "description": "Test suite"
                },
                "testConfiguration": {
                  "type": "string",
                  "description": "Test configuration"
                },
                "tcmTestRun": {
                  "type": "string",
                  "description": "Test Run"
                },
                "searchFolder": {
                  "type": "string",
                  "description": "Search folder"
                },
                "resultsFolder": {
                  "type": "string",
                  "description": "Test results folder"
                },
                "testFiltercriteria": {
                  "type": "string",
                  "description": "Test filter criteria"
                },
                "runOnlyImpactedTests": {
                  "type": "boolean",
                  "description": "Run only impacted tests"
                },
                "runAllTestsAfterXBuilds": {
                  "type": "string",
                  "description": "Number of builds after which all tests should be run"
                },
                "uiTests": {
                  "type": "boolean",
                  "description": "Test mix contains UI tests"
                },
                "vstestLocationMethod": {
                  "description": "Select test platform using",
                  "enum": [
                    "version",
                    "location"
                  ]
                },
                "vsTestVersion": {
                  "description": "Test platform version",
                  "enum": [
                    "latest",
                    "16.0",
                    "15.0",
                    "14.0",
                    "toolsInstaller"
                  ]
                },
                "vstestLocation": {
                  "type": "string",
                  "description": "Path to vstest.console.exe"
                },
                "runSettingsFile": {
                  "type": "string",
                  "description": "Settings file"
                },
                "overrideTestrunParameters": {
                  "type": "string",
                  "description": "Override test run parameters"
                },
                "pathtoCustomTestAdapters": {
                  "type": "string",
                  "description": "Path to custom test adapters"
                },
                "runInParallel": {
                  "type": "boolean",
                  "description": "Run tests in parallel on multi-core machines"
                },
                "runTestsInIsolation": {
                  "type": "boolean",
                  "description": "Run tests in isolation"
                },
                "codeCoverageEnabled": {
                  "type": "boolean",
                  "description": "Code coverage enabled"
                },
                "otherConsoleOptions": {
                  "type": "string",
                  "description": "Other console options"
                },
                "distributionBatchType": {
                  "description": "Batch tests",
                  "enum": [
                    "basedOnTestCases",
                    "basedOnExecutionTime",
                    "basedOnAssembly"
                  ]
                },
                "batchingBasedOnAgentsOption": {
                  "description": "Batch options",
                  "enum": [
                    "autoBatchSize",
                    "customBatchSize"
                  ]
                },
                "customBatchSizeValue": {
                  "type": "string",
                  "description": "Number of tests per batch"
                },
                "batchingBasedOnExecutionTimeOption": {
                  "description": "Batch options",
                  "enum": [
                    "autoBatchSize",
                    "customTimeBatchSize"
                  ]
                },
                "customRunTimePerBatchValue": {
                  "type": "string",
                  "description": "Running time (sec) per batch"
                },
                "dontDistribute": {
                  "type": "boolean",
                  "description": "Replicate tests instead of distributing when multiple agents are used in the job"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                },
                "platform": {
                  "type": "string",
                  "description": "Build platform"
                },
                "configuration": {
                  "type": "string",
                  "description": "Build configuration"
                },
                "publishRunAttachments": {
                  "type": "boolean",
                  "description": "Upload test attachments"
                },
                "failOnMinTestsNotRun": {
                  "type": "boolean",
                  "description": "Fail the task if a minimum number of tests are not run."
                },
                "minimumExpectedTests": {
                  "type": "string",
                  "description": "Minimum # of tests"
                },
                "diagnosticsEnabled": {
                  "type": "boolean",
                  "description": "Collect advanced diagnostics in case of catastrophic failures"
                },
                "collectDumpOn": {
                  "description": "Collect process dump and attach to test run report",
                  "enum": [
                    "onAbortOnly",
                    "always",
                    "never"
                  ]
                },
                "rerunFailedTests": {
                  "type": "boolean",
                  "description": "Rerun failed tests"
                },
                "rerunType": {
                  "description": "Do not rerun if test failures exceed specified threshold",
                  "enum": [
                    "basedOnTestFailurePercentage",
                    "basedOnTestFailureCount"
                  ]
                },
                "rerunFailedThreshold": {
                  "type": "string",
                  "description": "% failure"
                },
                "rerunFailedTestCasesMaxLimit": {
                  "type": "string",
                  "description": "# of failed tests"
                },
                "rerunMaxAttempts": {
                  "type": "string",
                  "description": "Maximum # of attempts"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Visual Studio Test\n\nRun tests with Visual Studio test runner",
              
              "pattern": "^VSTest@1$"
            },
            "inputs": {
              "description": "Visual Studio Test inputs",
              "properties": {
                "testAssembly": {
                  "type": "string",
                  "description": "Test Assembly"
                },
                "testFiltercriteria": {
                  "type": "string",
                  "description": "Test Filter criteria"
                },
                "runSettingsFile": {
                  "type": "string",
                  "description": "Run Settings File"
                },
                "overrideTestrunParameters": {
                  "type": "string",
                  "description": "Override TestRun Parameters"
                },
                "codeCoverageEnabled": {
                  "type": "boolean",
                  "description": "Code Coverage Enabled"
                },
                "runInParallel": {
                  "type": "boolean",
                  "description": "Run In Parallel"
                },
                "vstestLocationMethod": {
                  "description": "VSTest",
                  "enum": [
                    "version",
                    "location"
                  ]
                },
                "vsTestVersion": {
                  "description": "VSTest version",
                  "enum": [
                    "latest",
                    "14.0",
                    "12.0"
                  ]
                },
                "vstestLocation": {
                  "type": "string",
                  "description": "Path to vstest.console.exe"
                },
                "pathtoCustomTestAdapters": {
                  "type": "string",
                  "description": "Path to Custom Test Adapters"
                },
                "otherConsoleOptions": {
                  "type": "string",
                  "description": "Other console options"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test Run Title"
                },
                "platform": {
                  "type": "string",
                  "description": "Platform"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "publishRunAttachments": {
                  "type": "boolean",
                  "description": "Upload Test Attachments"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Manual validation\n\n[PREVIEW] Pause a pipeline run to wait for manual interaction. Works only with YAML pipelines.",
              
              "pattern": "^ManualValidation@0$"
            },
            "inputs": {
              "description": "Manual validation inputs",
              "properties": {
                "notifyUsers": {
                  "type": "string",
                  "description": "Notify users"
                },
                "instructions": {
                  "type": "string",
                  "description": "Instructions"
                },
                "onTimeout": {
                  "description": "On timeout",
                  "enum": [
                    "reject",
                    "resume"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "notifyUsers"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Ant\n\nBuild with Apache Ant",
              
              "pattern": "^Ant@1$"
            },
            "inputs": {
              "description": "Ant inputs",
              "properties": {
                "buildFile": {
                  "type": "string",
                  "description": "Ant build file"
                },
                "options": {
                  "type": "string",
                  "description": "Options"
                },
                "targets": {
                  "type": "string",
                  "description": "Target(s)"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to Azure Pipelines"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test results files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test run title"
                },
                "codeCoverageToolOptions": {
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ]
                },
                "codeCoverageClassFilesDirectories": {
                  "type": "string",
                  "description": "Class files directories"
                },
                "codeCoverageClassFilter": {
                  "type": "string",
                  "description": "Class inclusion/exclusion filters"
                },
                "codeCoverageSourceDirectories": {
                  "type": "string",
                  "description": "Source files directories"
                },
                "codeCoverageFailIfEmpty": {
                  "type": "boolean",
                  "description": "Fail when code coverage results are missing"
                },
                "antHomeDirectory": {
                  "type": "string",
                  "description": "Set ANT_HOME path"
                },
                "javaHomeOption": {
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ]
                },
                "jdkVersionOption": {
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ]
                },
                "jdkUserInputDirectory": {
                  "type": "string",
                  "description": "JDK path"
                },
                "jdkArchitectureOption": {
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Visual Studio test agent deployment\n\nDeprecated: Instead, use the 'Visual Studio Test' task to run unit and functional tests",
              
              "pattern": "^DeployVisualStudioTestAgent@2$"
            },
            "inputs": {
              "description": "Visual Studio test agent deployment inputs",
              "properties": {
                "testMachines": {
                  "type": "string",
                  "description": "Machines"
                },
                "adminUserName": {
                  "type": "string",
                  "description": "Admin login"
                },
                "adminPassword": {
                  "type": "string",
                  "description": "Admin password"
                },
                "winRmProtocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ]
                },
                "testCertificate": {
                  "type": "boolean",
                  "description": "Test Certificate"
                },
                "machineUserName": {
                  "type": "string",
                  "description": "Username"
                },
                "machinePassword": {
                  "type": "string",
                  "description": "Password"
                },
                "runAsProcess": {
                  "type": "boolean",
                  "description": "Run UI tests"
                },
                "isDataCollectionOnly": {
                  "type": "boolean",
                  "description": "Enable data collection only"
                },
                "testPlatform": {
                  "description": "Test agent version",
                  "enum": [
                    "15.0",
                    "14.0"
                  ]
                },
                "agentLocation": {
                  "type": "string",
                  "description": "Test agent location"
                },
                "updateTestAgent": {
                  "type": "boolean",
                  "description": "Update test agent"
                }
              },
              "additionalProperties": false,
              "required": [
                "testMachines",
                "adminUserName",
                "adminPassword",
                "machineUserName",
                "machinePassword"
              ]
            }
          },
          "$comment": "DeployVisualStudioTestAgent is deprecated - Deprecated: Instead, use the 'Visual Studio Test' task to run unit and functional tests",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Visual Studio Test Agent Deployment\n\nDeploy and configure Test Agent to run tests on a set of machines",
              
              "pattern": "^DeployVisualStudioTestAgent@1$"
            },
            "inputs": {
              "description": "Visual Studio Test Agent Deployment inputs",
              "properties": {
                "testMachineGroup": {
                  "type": "string",
                  "description": "Machines"
                },
                "adminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "adminPassword": {
                  "type": "string",
                  "description": "Admin Password"
                },
                "winRmProtocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ]
                },
                "testCertificate": {
                  "type": "boolean",
                  "description": "Test Certificate"
                },
                "resourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "testMachines": {
                  "type": "string",
                  "description": "Filter Criteria"
                },
                "machineUserName": {
                  "type": "string",
                  "description": "Username"
                },
                "machinePassword": {
                  "type": "string",
                  "description": "Password"
                },
                "runAsProcess": {
                  "type": "boolean",
                  "description": "Interactive Process"
                },
                "agentLocation": {
                  "type": "string",
                  "description": "Test Agent Location"
                },
                "updateTestAgent": {
                  "type": "boolean",
                  "description": "Update Test Agent"
                },
                "isDataCollectionOnly": {
                  "type": "boolean",
                  "description": "Enable Data Collection Only"
                }
              },
              "additionalProperties": false,
              "required": [
                "testMachineGroup",
                "machineUserName",
                "machinePassword"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Conda environment\n\nCreate and activate a Conda environment",
              
              "pattern": "^CondaEnvironment@0$"
            },
            "inputs": {
              "description": "Conda environment inputs",
              "properties": {
                "environmentName": {
                  "type": "string",
                  "description": "Environment name"
                },
                "packageSpecs": {
                  "type": "string",
                  "description": "Package specs"
                },
                "updateConda": {
                  "type": "boolean",
                  "description": "Update to the latest Conda"
                },
                "createOptions": {
                  "type": "string",
                  "description": "Environment creation options"
                },
                "cleanEnvironment": {
                  "type": "boolean",
                  "description": "Clean the environment"
                }
              },
              "additionalProperties": false,
              "required": [
                "environmentName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Conda environment\n\nThis task is deprecated. Use `conda` directly in script to work with Anaconda environments.",
              
              "pattern": "^CondaEnvironment@1$"
            },
            "inputs": {
              "description": "Conda environment inputs",
              "properties": {
                "createCustomEnvironment": {
                  "type": "boolean",
                  "description": "Create a custom environment"
                },
                "environmentName": {
                  "type": "string",
                  "description": "Environment name"
                },
                "packageSpecs": {
                  "type": "string",
                  "description": "Package specs"
                },
                "updateConda": {
                  "type": "boolean",
                  "description": "Update to the latest Conda"
                },
                "installOptions": {
                  "type": "string",
                  "description": "Other options for `conda install`"
                },
                "createOptions": {
                  "type": "string",
                  "description": "Other options for `conda create`"
                },
                "cleanEnvironment": {
                  "type": "boolean",
                  "description": "Clean the environment"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "CondaEnvironment is deprecated - This task is deprecated. Use `conda` directly in script to work with Anaconda environments.",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Batch script\n\nRun a Windows command or batch script and optionally allow it to change the environment",
              
              "pattern": "^BatchScript@1$"
            },
            "inputs": {
              "description": "Batch script inputs",
              "properties": {
                "filename": {
                  "type": "string",
                  "description": "Path"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "modifyEnvironment": {
                  "type": "boolean",
                  "description": "Modify Environment"
                },
                "workingFolder": {
                  "type": "string",
                  "description": "Working folder"
                },
                "failOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                }
              },
              "additionalProperties": false,
              "required": [
                "filename"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download Github Npm Package\n\nInstall npm packages from GitHub.",
              
              "pattern": "^DownloadGithubNpmPackage@1$"
            },
            "inputs": {
              "description": "Download Github Npm Package inputs",
              "properties": {
                "packageName": {
                  "type": "string",
                  "description": "Package Name"
                },
                "version": {
                  "type": "string",
                  "description": "Package Version"
                },
                "externalRegistryCredentials": {
                  "type": "string",
                  "description": "Credentials for registry from GitHub"
                },
                "installDirectory": {
                  "type": "string",
                  "description": "Destination directory"
                }
              },
              "additionalProperties": false,
              "required": [
                "packageName",
                "version",
                "externalRegistryCredentials"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Visual Studio build\n\nBuild with MSBuild and set the Visual Studio version property",
              
              "pattern": "^VSBuild@1$"
            },
            "inputs": {
              "description": "Visual Studio build inputs",
              "properties": {
                "solution": {
                  "type": "string",
                  "description": "Solution"
                },
                "vsVersion": {
                  "description": "Visual Studio Version",
                  "enum": [
                    "latest",
                    "17.0",
                    "16.0",
                    "15.0",
                    "14.0",
                    "12.0",
                    "11.0"
                  ]
                },
                "msbuildArgs": {
                  "type": "string",
                  "description": "MSBuild Arguments"
                },
                "platform": {
                  "type": "string",
                  "description": "Platform"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "clean": {
                  "type": "boolean",
                  "description": "Clean"
                },
                "maximumCpuCount": {
                  "type": "boolean",
                  "description": "Build in Parallel"
                },
                "restoreNugetPackages": {
                  "type": "boolean",
                  "description": "Restore NuGet Packages"
                },
                "msbuildArchitecture": {
                  "description": "MSBuild Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                },
                "logProjectEvents": {
                  "type": "boolean",
                  "description": "Record Project Details"
                },
                "createLogFile": {
                  "type": "boolean",
                  "description": "Create Log File"
                },
                "logFileVerbosity": {
                  "description": "Log File Verbosity",
                  "enum": [
                    "quiet",
                    "minimal",
                    "normal",
                    "detailed",
                    "diagnostic"
                  ]
                },
                "enableDefaultLogger": {
                  "type": "boolean",
                  "description": "Enable Default Logger"
                },
                "customVersion": {
                  "type": "string",
                  "description": "Custom Version"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Key Vault\n\nDownload Azure Key Vault secrets",
              
              "pattern": "^AzureKeyVault@2$"
            },
            "inputs": {
              "description": "Azure Key Vault inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "KeyVaultName": {
                  "type": "string",
                  "description": "Key vault"
                },
                "SecretsFilter": {
                  "type": "string",
                  "description": "Secrets filter"
                },
                "RunAsPreJob": {
                  "type": "boolean",
                  "description": "Make secrets available to whole job"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "KeyVaultName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Key Vault\n\nDownload Azure Key Vault secrets",
              
              "pattern": "^AzureKeyVault@1$"
            },
            "inputs": {
              "description": "Azure Key Vault inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "KeyVaultName": {
                  "type": "string",
                  "description": "Key vault"
                },
                "SecretsFilter": {
                  "type": "string",
                  "description": "Secrets filter"
                },
                "RunAsPreJob": {
                  "type": "boolean",
                  "description": "Make secrets available to whole job"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "KeyVaultName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": ".NET Core SDK/runtime installer\n\nAcquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              
              "pattern": "^DotNetCoreInstaller@0$"
            },
            "inputs": {
              "description": ".NET Core SDK/runtime installer inputs",
              "properties": {
                "packageType": {
                  "description": "Package to install",
                  "enum": [
                    "runtime",
                    "sdk"
                  ]
                },
                "version": {
                  "type": "string",
                  "description": "Version"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": ".NET Core sdk/runtime installer\n\nAcquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              
              "pattern": "^DotNetCoreInstaller@1$"
            },
            "inputs": {
              "description": ".NET Core sdk/runtime installer inputs",
              "properties": {
                "packageType": {
                  "description": "Package to install",
                  "enum": [
                    "runtime",
                    "sdk"
                  ]
                },
                "version": {
                  "type": "string",
                  "description": "Version"
                },
                "includePreviewVersions": {
                  "type": "boolean",
                  "description": "Include Preview Versions"
                },
                "installationPath": {
                  "type": "string",
                  "description": "Path To Install .Net Core"
                },
                "performMultiLevelLookup": {
                  "type": "boolean",
                  "description": "Perform Multi Level Lookup"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "DotNetCoreInstaller is deprecated - Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Use .NET Core\n\nAcquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.",
              
              "pattern": "^UseDotNet@2$"
            },
            "inputs": {
              "description": "Use .NET Core inputs",
              "properties": {
                "packageType": {
                  "description": "Package to install",
                  "enum": [
                    "runtime",
                    "sdk"
                  ]
                },
                "useGlobalJson": {
                  "type": "boolean",
                  "description": "Use global json"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "version": {
                  "type": "string",
                  "description": "Version"
                },
                "vsVersion": {
                  "type": "string",
                  "description": "Compatible Visual Studio version"
                },
                "includePreviewVersions": {
                  "type": "boolean",
                  "description": "Include Preview Versions"
                },
                "installationPath": {
                  "type": "string",
                  "description": "Path To Install .Net Core"
                },
                "performMultiLevelLookup": {
                  "type": "boolean",
                  "description": "Perform Multi Level Lookup"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure App Service manage\n\nStart, stop, restart, slot swap, slot delete, install site extensions or enable continuous monitoring for an Azure App Service",
              
              "pattern": "^AzureAppServiceManage@0$"
            },
            "inputs": {
              "description": "Azure App Service manage inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "Action": {
                  "description": "Action",
                  "enum": [
                    "Swap Slots",
                    "Start Azure App Service",
                    "Stop Azure App Service",
                    "Restart Azure App Service",
                    "Start Swap With Preview",
                    "Complete Swap",
                    "Cancel Swap",
                    "Delete Slot",
                    "Install Extensions",
                    "Enable Continuous Monitoring",
                    "Start all continuous webjobs",
                    "Stop all continuous webjobs"
                  ]
                },
                "WebAppName": {
                  "type": "string",
                  "description": "App Service name"
                },
                "SpecifySlotOrASE": {
                  "type": "boolean",
                  "description": "Specify Slot or App Service Environment"
                },
                "ResourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "SourceSlot": {
                  "type": "string",
                  "description": "Source Slot"
                },
                "SwapWithProduction": {
                  "type": "boolean",
                  "description": "Swap with Production"
                },
                "TargetSlot": {
                  "type": "string",
                  "description": "Target Slot"
                },
                "PreserveVnet": {
                  "type": "boolean",
                  "description": "Preserve Vnet"
                },
                "Slot": {
                  "type": "string",
                  "description": "Slot"
                },
                "ExtensionsList": {
                  "type": "string",
                  "description": "Install Extensions"
                },
                "OutputVariable": {
                  "type": "string",
                  "description": "Output variable"
                },
                "AppInsightsResourceGroupName": {
                  "type": "string",
                  "description": "Resource Group name for Application Insights"
                },
                "ApplicationInsightsResourceName": {
                  "type": "string",
                  "description": "Application Insights resource name"
                },
                "ApplicationInsightsWebTestName": {
                  "type": "string",
                  "description": "Application Insights web test name"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "WebAppName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Install Azure Func Core Tools\n\nInstall Azure Func Core Tools",
              
              "pattern": "^FuncToolsInstaller@0$"
            },
            "inputs": {
              "description": "Install Azure Func Core Tools inputs",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "Version"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "File transform\n\nReplace tokens with variable values in XML or JSON configuration files",
              
              "pattern": "^FileTransform@1$"
            },
            "inputs": {
              "description": "File transform inputs",
              "properties": {
                "folderPath": {
                  "type": "string",
                  "description": "Package or folder"
                },
                "enableXmlTransform": {
                  "type": "boolean",
                  "description": "XML transformation"
                },
                "xmlTransformationRules": {
                  "type": "string",
                  "description": "Transformation rules"
                },
                "fileType": {
                  "description": "File format",
                  "enum": [
                    "xml",
                    "json"
                  ]
                },
                "targetFiles": {
                  "type": "string",
                  "description": "Target files"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "File transform\n\nReplace tokens with variable values in XML or JSON configuration files",
              
              "pattern": "^FileTransform@2$"
            },
            "inputs": {
              "description": "File transform inputs",
              "properties": {
                "folderPath": {
                  "type": "string",
                  "description": "Package or folder"
                },
                "xmlTransformationRules": {
                  "type": "string",
                  "description": "XML Transformation rules"
                },
                "jsonTargetFiles": {
                  "type": "string",
                  "description": "JSON target files"
                },
                "xmlTargetFiles": {
                  "type": "string",
                  "description": "XML target files"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Extract files\n\nExtract a variety of archive and compression files such as .7z, .rar, .tar.gz, and .zip",
              
              "pattern": "^ExtractFiles@1$"
            },
            "inputs": {
              "description": "Extract files inputs",
              "properties": {
                "archiveFilePatterns": {
                  "type": "string",
                  "description": "Archive file patterns"
                },
                "destinationFolder": {
                  "type": "string",
                  "description": "Destination folder"
                },
                "cleanDestinationFolder": {
                  "type": "boolean",
                  "description": "Clean destination folder before extracting"
                },
                "overwriteExistingFiles": {
                  "type": "boolean",
                  "description": "Overwrite existing files"
                },
                "pathToSevenZipTool": {
                  "type": "string",
                  "description": "Path to 7z utility"
                }
              },
              "additionalProperties": false,
              "required": [
                "destinationFolder"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Xamarin.Android\n\nBuild an Android app with Xamarin",
              
              "pattern": "^XamarinAndroid@1$"
            },
            "inputs": {
              "description": "Xamarin.Android inputs",
              "properties": {
                "projectFile": {
                  "type": "string",
                  "description": "Project"
                },
                "target": {
                  "type": "string",
                  "description": "Target"
                },
                "outputDirectory": {
                  "type": "string",
                  "description": "Output directory"
                },
                "configuration": {
                  "type": "string",
                  "description": "Configuration"
                },
                "createAppPackage": {
                  "type": "boolean",
                  "description": "Create app package"
                },
                "clean": {
                  "type": "boolean",
                  "description": "Clean"
                },
                "msbuildLocationOption": {
                  "description": "MSBuild",
                  "enum": [
                    "version",
                    "location"
                  ]
                },
                "msbuildVersionOption": {
                  "description": "MSBuild version",
                  "enum": [
                    "latest",
                    "17.0",
                    "16.0",
                    "15.0",
                    "14.0",
                    "12.0",
                    "4.0"
                  ]
                },
                "msbuildFile": {
                  "type": "string",
                  "description": "MSBuild location"
                },
                "msbuildArchitectureOption": {
                  "description": "MSBuild architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                },
                "msbuildArguments": {
                  "type": "string",
                  "description": "Additional arguments"
                },
                "jdkOption": {
                  "description": "Select JDK to use for the build",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ]
                },
                "jdkVersionOption": {
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ]
                },
                "jdkDirectory": {
                  "type": "string",
                  "description": "JDK path"
                },
                "jdkArchitectureOption": {
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ]
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Copy and Publish Build Artifacts\n\n[DEPRECATED] Use the Copy Files task and the Publish Build Artifacts task instead",
              
              "pattern": "^CopyPublishBuildArtifacts@1$"
            },
            "inputs": {
              "description": "Copy and Publish Build Artifacts inputs",
              "properties": {
                "CopyRoot": {
                  "type": "string",
                  "description": "Copy Root"
                },
                "Contents": {
                  "type": "string",
                  "description": "Contents"
                },
                "ArtifactName": {
                  "type": "string",
                  "description": "Artifact Name"
                },
                "ArtifactType": {
                  "description": "Artifact Type",
                  "enum": [
                    "Container",
                    "FilePath"
                  ]
                },
                "TargetPath": {
                  "type": "string",
                  "description": "Path"
                }
              },
              "additionalProperties": false,
              "required": [
                "Contents",
                "ArtifactName",
                "ArtifactType"
              ]
            }
          },
          "$comment": "CopyPublishBuildArtifacts is deprecated - [DEPRECATED] Use the Copy Files task and the Publish Build Artifacts task instead",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download package\n\nDownload a package from a package management feed in Azure Artifacts",
              
              "pattern": "^DownloadPackage@1$"
            },
            "inputs": {
              "description": "Download package inputs",
              "properties": {
                "packageType": {
                  "description": "Package Type",
                  "enum": [
                    "maven",
                    "npm",
                    "nuget",
                    "pypi",
                    "upack"
                  ]
                },
                "feed": {
                  "type": "string",
                  "description": "Feed"
                },
                "view": {
                  "type": "string",
                  "description": "View"
                },
                "definition": {
                  "type": "string",
                  "description": "Package"
                },
                "version": {
                  "type": "string",
                  "description": "Version"
                },
                "files": {
                  "type": "string",
                  "description": "Files"
                },
                "extract": {
                  "type": "boolean",
                  "description": "Extract package contents"
                },
                "downloadPath": {
                  "type": "string",
                  "description": "Destination directory"
                }
              },
              "additionalProperties": false,
              "required": [
                "feed",
                "definition",
                "version"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download package\n\nDownload a package from a package management feed in Azure Artifacts",
              
              "pattern": "^DownloadPackage@0$"
            },
            "inputs": {
              "description": "Download package inputs",
              "properties": {
                "feed": {
                  "type": "string",
                  "description": "Feed"
                },
                "definition": {
                  "type": "string",
                  "description": "Package"
                },
                "version": {
                  "type": "string",
                  "description": "Version"
                },
                "downloadPath": {
                  "type": "string",
                  "description": "Destination directory"
                }
              },
              "additionalProperties": false,
              "required": [
                "feed",
                "definition",
                "version"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure resource group deployment\n\nDeploy an Azure Resource Manager (ARM) template to a resource group and manage virtual machines",
              
              "pattern": "^AzureResourceGroupDeployment@2$"
            },
            "inputs": {
              "description": "Azure resource group deployment inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "Create Or Update Resource Group",
                    "Select Resource Group",
                    "Start",
                    "Stop",
                    "StopWithDeallocate",
                    "Restart",
                    "Delete",
                    "DeleteRG"
                  ]
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "location": {
                  "type": "string",
                  "description": "Location"
                },
                "templateLocation": {
                  "description": "Template location",
                  "enum": [
                    "Linked artifact",
                    "URL of the file"
                  ]
                },
                "csmFileLink": {
                  "type": "string",
                  "description": "Template link"
                },
                "csmParametersFileLink": {
                  "type": "string",
                  "description": "Template parameters link"
                },
                "csmFile": {
                  "type": "string",
                  "description": "Template"
                },
                "csmParametersFile": {
                  "type": "string",
                  "description": "Template parameters"
                },
                "overrideParameters": {
                  "type": "string",
                  "description": "Override template parameters"
                },
                "deploymentMode": {
                  "description": "Deployment mode",
                  "enum": [
                    "Incremental",
                    "Complete",
                    "Validation"
                  ]
                },
                "enableDeploymentPrerequisites": {
                  "description": "Enable prerequisites",
                  "enum": [
                    "None",
                    "ConfigureVMwithWinRM",
                    "ConfigureVMWithDGAgent"
                  ]
                },
                "teamServicesConnection": {
                  "type": "string",
                  "description": "Azure Pipelines service connection"
                },
                "teamProject": {
                  "type": "string",
                  "description": "Team project"
                },
                "deploymentGroupName": {
                  "type": "string",
                  "description": "Deployment Group"
                },
                "copyAzureVMTags": {
                  "type": "boolean",
                  "description": "Copy Azure VM tags to agents"
                },
                "runAgentServiceAsUser": {
                  "type": "boolean",
                  "description": "Run agent service as a user"
                },
                "userName": {
                  "type": "string",
                  "description": "User name"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                },
                "outputVariable": {
                  "type": "string",
                  "description": "VM details for WinRM"
                },
                "deploymentName": {
                  "type": "string",
                  "description": "Deployment name"
                },
                "deploymentOutputs": {
                  "type": "string",
                  "description": "Deployment outputs"
                },
                "addSpnToEnvironment": {
                  "type": "boolean",
                  "description": "Access service principal details in override parameters"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "resourceGroupName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "ARM template deployment\n\nDeploy an Azure Resource Manager (ARM) template to all the deployment scopes",
              
              "pattern": "^AzureResourceManagerTemplateDeployment@3$"
            },
            "inputs": {
              "description": "ARM template deployment inputs",
              "properties": {
                "deploymentScope": {
                  "description": "Deployment scope",
                  "enum": [
                    "Management Group",
                    "Subscription",
                    "Resource Group"
                  ]
                },
                "azureResourceManagerConnection": {
                  "type": "string",
                  "description": "Azure Resource Manager connection"
                },
                "subscriptionId": {
                  "type": "string",
                  "description": "Subscription"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "Create Or Update Resource Group",
                    "DeleteRG"
                  ]
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "location": {
                  "type": "string",
                  "description": "Location"
                },
                "templateLocation": {
                  "description": "Template location",
                  "enum": [
                    "Linked artifact",
                    "URL of the file"
                  ]
                },
                "csmFileLink": {
                  "type": "string",
                  "description": "Template link"
                },
                "csmParametersFileLink": {
                  "type": "string",
                  "description": "Template parameters link"
                },
                "csmFile": {
                  "type": "string",
                  "description": "Template"
                },
                "csmParametersFile": {
                  "type": "string",
                  "description": "Template parameters"
                },
                "overrideParameters": {
                  "type": "string",
                  "description": "Override template parameters"
                },
                "deploymentMode": {
                  "description": "Deployment mode",
                  "enum": [
                    "Incremental",
                    "Complete",
                    "Validation"
                  ]
                },
                "deploymentName": {
                  "type": "string",
                  "description": "Deployment name"
                },
                "deploymentOutputs": {
                  "type": "string",
                  "description": "Deployment outputs"
                },
                "addSpnToEnvironment": {
                  "type": "boolean",
                  "description": "Access service principal details in override parameters"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureResourceManagerConnection"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Resource Group Deployment\n\nDeploy, start, stop, delete Azure Resource Groups",
              
              "pattern": "^AzureResourceGroupDeployment@1$"
            },
            "inputs": {
              "description": "Azure Resource Group Deployment inputs",
              "properties": {
                "ConnectedServiceNameSelector": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameClassic"
                  ]
                },
                "ConnectedServiceName": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "ConnectedServiceNameClassic": {
                  "type": "string",
                  "description": "Azure Classic Subscription"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "Create Or Update Resource Group",
                    "Select Resource Group",
                    "Start",
                    "Stop",
                    "Restart",
                    "Delete",
                    "DeleteRG"
                  ]
                },
                "actionClassic": {
                  "description": "Action",
                  "enum": [
                    "Select Resource Group"
                  ]
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource Group"
                },
                "cloudService": {
                  "type": "string",
                  "description": "Cloud Service"
                },
                "location": {
                  "description": "Location",
                  "enum": [
                    "Australia East",
                    "Australia Southeast",
                    "Brazil South",
                    "Canada Central",
                    "Canada East",
                    "Central India",
                    "Central US",
                    "East Asia",
                    "East US",
                    "East US 2 ",
                    "Japan East",
                    "Japan West",
                    "North Central US",
                    "North Europe",
                    "South Central US",
                    "South India",
                    "Southeast Asia",
                    "UK South",
                    "UK West",
                    "West Central US",
                    "West Europe",
                    "West India",
                    "West US",
                    "West US 2"
                  ]
                },
                "csmFile": {
                  "type": "string",
                  "description": "Template"
                },
                "csmParametersFile": {
                  "type": "string",
                  "description": "Template Parameters"
                },
                "overrideParameters": {
                  "type": "string",
                  "description": "Override Template Parameters"
                },
                "deploymentMode": {
                  "description": "Deployment Mode",
                  "enum": [
                    "Validation",
                    "Incremental",
                    "Complete"
                  ]
                },
                "enableDeploymentPrerequisitesForCreate": {
                  "type": "boolean",
                  "description": "Enable Deployment Prerequisites"
                },
                "enableDeploymentPrerequisitesForSelect": {
                  "type": "boolean",
                  "description": "Enable Deployment Prerequisites"
                },
                "outputVariable": {
                  "type": "string",
                  "description": "Resource Group"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "$comment": "AzureResourceGroupDeployment is deprecated - Deploy, start, stop, delete Azure Resource Groups",
          "doNotSuggest": true,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Invoke REST API\n\nInvoke REST API as a part of your process.",
              
              "pattern": "^InvokeRESTAPI@0$"
            },
            "inputs": {
              "description": "Invoke REST API inputs",
              "properties": {
                "serviceConnection": {
                  "type": "string",
                  "description": "Generic endpoint"
                },
                "method": {
                  "description": "Method",
                  "enum": [
                    "OPTIONS",
                    "GET",
                    "HEAD",
                    "POST",
                    "PUT",
                    "DELETE",
                    "TRACE",
                    "PATCH"
                  ]
                },
                "headers": {
                  "type": "string",
                  "description": "Headers"
                },
                "body": {
                  "type": "string",
                  "description": "Body"
                },
                "urlSuffix": {
                  "type": "string",
                  "description": "Url suffix string"
                },
                "waitForCompletion": {
                  "description": "Complete based on",
                  "enum": [
                    "true",
                    "false"
                  ]
                },
                "successCriteria": {
                  "type": "string",
                  "description": "Success criteria"
                }
              },
              "additionalProperties": false,
              "required": [
                "serviceConnection"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Invoke REST API\n\nInvoke a REST API as a part of your pipeline.",
              
              "pattern": "^InvokeRESTAPI@1$"
            },
            "inputs": {
              "description": "Invoke REST API inputs",
              "properties": {
                "connectionType": {
                  "description": "Connection type",
                  "enum": [
                    "connectedServiceName",
                    "connectedServiceNameARM"
                  ]
                },
                "serviceConnection": {
                  "type": "string",
                  "description": "Generic service connection"
                },
                "azureServiceConnection": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "method": {
                  "description": "Method",
                  "enum": [
                    "OPTIONS",
                    "GET",
                    "HEAD",
                    "POST",
                    "PUT",
                    "DELETE",
                    "TRACE",
                    "PATCH"
                  ]
                },
                "headers": {
                  "type": "string",
                  "description": "Headers"
                },
                "body": {
                  "type": "string",
                  "description": "Body"
                },
                "urlSuffix": {
                  "type": "string",
                  "description": "URL suffix and parameters"
                },
                "waitForCompletion": {
                  "description": "Completion event",
                  "enum": [
                    "true",
                    "false"
                  ]
                },
                "successCriteria": {
                  "type": "string",
                  "description": "Success criteria"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Archive files\n\nCompress files into .7z, .tar.gz, or .zip",
              
              "pattern": "^ArchiveFiles@2$"
            },
            "inputs": {
              "description": "Archive files inputs",
              "properties": {
                "rootFolderOrFile": {
                  "type": "string",
                  "description": "Root folder or file to archive"
                },
                "includeRootFolder": {
                  "type": "boolean",
                  "description": "Prepend root folder name to archive paths"
                },
                "archiveType": {
                  "description": "Archive type",
                  "enum": [
                    "zip",
                    "7z",
                    "tar",
                    "wim"
                  ]
                },
                "sevenZipCompression": {
                  "description": "7z compression",
                  "enum": [
                    "ultra",
                    "maximum",
                    "normal",
                    "fast",
                    "fastest",
                    "none"
                  ]
                },
                "tarCompression": {
                  "description": "Tar compression",
                  "enum": [
                    "gz",
                    "bz2",
                    "xz",
                    "none"
                  ]
                },
                "archiveFile": {
                  "type": "string",
                  "description": "Archive file to create"
                },
                "replaceExistingArchive": {
                  "type": "boolean",
                  "description": "Replace existing archive"
                },
                "verbose": {
                  "type": "boolean",
                  "description": "Force verbose output"
                },
                "quiet": {
                  "type": "boolean",
                  "description": "Force quiet output"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Archive Files\n\nArchive files using compression formats such as .7z, .rar, .tar.gz, and .zip.",
              
              "pattern": "^ArchiveFiles@1$"
            },
            "inputs": {
              "description": "Archive Files inputs",
              "properties": {
                "rootFolder": {
                  "type": "string",
                  "description": "Root folder (or file) to archive"
                },
                "includeRootFolder": {
                  "type": "boolean",
                  "description": "Prefix root folder name to archive paths"
                },
                "archiveType": {
                  "description": "Archive type",
                  "enum": [
                    "default",
                    "7z",
                    "tar",
                    "wim"
                  ]
                },
                "tarCompression": {
                  "description": "Tar compression",
                  "enum": [
                    "gz",
                    "bz2",
                    "xz",
                    "none"
                  ]
                },
                "archiveFile": {
                  "type": "string",
                  "description": "Archive file to create"
                },
                "replaceExistingArchive": {
                  "type": "boolean",
                  "description": "Replace existing archive"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "GitHub Comment\n\nWrite a comment to your Github entity i.e. issue or a Pull Request (PR)",
              
              "pattern": "^GitHubComment@0$"
            },
            "inputs": {
              "description": "GitHub Comment inputs",
              "properties": {
                "gitHubConnection": {
                  "type": "string",
                  "description": "GitHub connection (OAuth or PAT)"
                },
                "repositoryName": {
                  "type": "string",
                  "description": "Repository"
                },
                "id": {
                  "type": "string",
                  "description": "ID of the github pr/issue"
                },
                "comment": {
                  "type": "string",
                  "description": "Comment"
                }
              },
              "additionalProperties": false,
              "required": [
                "gitHubConnection"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Copy files\n\nCopy files from a source folder to a target folder using patterns matching file paths (not folder paths)",
              
              "pattern": "^CopyFiles@2$"
            },
            "inputs": {
              "description": "Copy files inputs",
              "properties": {
                "SourceFolder": {
                  "type": "string",
                  "description": "Source Folder"
                },
                "Contents": {
                  "type": "string",
                  "description": "Contents"
                },
                "TargetFolder": {
                  "type": "string",
                  "description": "Target Folder"
                },
                "CleanTargetFolder": {
                  "type": "boolean",
                  "description": "Clean Target Folder"
                },
                "OverWrite": {
                  "type": "boolean",
                  "description": "Overwrite"
                },
                "flattenFolders": {
                  "type": "boolean",
                  "description": "Flatten Folders"
                },
                "preserveTimestamp": {
                  "type": "boolean",
                  "description": "Preserve Target Timestamp"
                },
                "retryCount": {
                  "type": "string",
                  "description": "Retry count to copy the file"
                },
                "delayBetweenRetries": {
                  "type": "string",
                  "description": "Delay between two retries."
                },
                "ignoreMakeDirErrors": {
                  "type": "boolean",
                  "description": "Ignore errors during creation of target folder."
                }
              },
              "additionalProperties": false,
              "required": [
                "TargetFolder"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Copy Files\n\nCopy files from source folder to target folder using minimatch patterns (The minimatch patterns will only match file paths, not folder paths)",
              
              "pattern": "^CopyFiles@1$"
            },
            "inputs": {
              "description": "Copy Files inputs",
              "properties": {
                "SourceFolder": {
                  "type": "string",
                  "description": "Source Folder"
                },
                "Contents": {
                  "type": "string",
                  "description": "Contents"
                },
                "TargetFolder": {
                  "type": "string",
                  "description": "Target Folder"
                },
                "CleanTargetFolder": {
                  "type": "boolean",
                  "description": "Clean Target Folder"
                },
                "OverWrite": {
                  "type": "boolean",
                  "description": "Overwrite"
                },
                "flattenFolders": {
                  "type": "boolean",
                  "description": "Flatten Folders"
                }
              },
              "additionalProperties": false,
              "required": [
                "TargetFolder"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Database for MySQL deployment\n\nRun your scripts and make changes to your Azure Database for MySQL",
              
              "pattern": "^AzureMysqlDeployment@1$"
            },
            "inputs": {
              "description": "Azure Database for MySQL deployment inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Subscription"
                },
                "ServerName": {
                  "type": "string",
                  "description": "Host Name"
                },
                "DatabaseName": {
                  "type": "string",
                  "description": "Database Name"
                },
                "SqlUsername": {
                  "type": "string",
                  "description": "Server Admin Login"
                },
                "SqlPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "TaskNameSelector": {
                  "description": "Type",
                  "enum": [
                    "SqlTaskFile",
                    "InlineSqlTask"
                  ]
                },
                "SqlFile": {
                  "type": "string",
                  "description": "MySQL Script"
                },
                "SqlInline": {
                  "type": "string",
                  "description": "Inline MySQL Script"
                },
                "SqlAdditionalArguments": {
                  "type": "string",
                  "description": "Additional MySQL Arguments"
                },
                "IpDetectionMethod": {
                  "description": "Specify Firewall Rules Using",
                  "enum": [
                    "AutoDetect",
                    "IPAddressRange"
                  ]
                },
                "StartIpAddress": {
                  "type": "string",
                  "description": "Start IP Address"
                },
                "EndIpAddress": {
                  "type": "string",
                  "description": "End IP Address"
                },
                "DeleteFirewallRule": {
                  "type": "boolean",
                  "description": "Delete Rule After Task Ends"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "ServerName",
                "SqlUsername",
                "SqlPassword"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "npm\n\nInstall and publish npm packages, or run an npm command. Supports npmjs.com and authenticated registries like Azure Artifacts.",
              
              "pattern": "^Npm@1$"
            },
            "inputs": {
              "description": "npm inputs",
              "properties": {
                "command": {
                  "description": "Command",
                  "enum": [
                    "ci",
                    "install",
                    "publish",
                    "custom"
                  ]
                },
                "workingDir": {
                  "type": "string",
                  "description": "Working folder that contains package.json"
                },
                "verbose": {
                  "type": "boolean",
                  "description": "Verbose logging"
                },
                "customCommand": {
                  "type": "string",
                  "description": "Command and arguments"
                },
                "customRegistry": {
                  "description": "Registries to use",
                  "enum": [
                    "useNpmrc",
                    "useFeed"
                  ]
                },
                "customFeed": {
                  "type": "string",
                  "description": "Use packages from this Azure Artifacts/TFS registry"
                },
                "customEndpoint": {
                  "type": "string",
                  "description": "Credentials for registries outside this organization/collection"
                },
                "publishRegistry": {
                  "description": "Registry location",
                  "enum": [
                    "useExternalRegistry",
                    "useFeed"
                  ]
                },
                "publishFeed": {
                  "type": "string",
                  "description": "Target registry"
                },
                "publishPackageMetadata": {
                  "type": "boolean",
                  "description": "Publish pipeline metadata"
                },
                "publishEndpoint": {
                  "type": "string",
                  "description": "External Registry"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "npm\n\nRun an npm command. Use NpmAuthenticate@0 task for latest capabilities.",
              
              "pattern": "^Npm@0$"
            },
            "inputs": {
              "description": "npm inputs",
              "properties": {
                "cwd": {
                  "type": "string",
                  "description": "working folder"
                },
                "command": {
                  "type": "string",
                  "description": "npm command"
                },
                "arguments": {
                  "type": "string",
                  "description": "arguments"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Deploy Azure Static Web App\n\n[PREVIEW] Build and deploy an Azure Static Web App",
              
              "pattern": "^AzureStaticWebApp@0$"
            },
            "inputs": {
              "description": "Deploy Azure Static Web App inputs",
              "properties": {
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "app_location": {
                  "type": "string",
                  "description": "App location"
                },
                "app_build_command": {
                  "type": "string",
                  "description": "App build command"
                },
                "output_location": {
                  "type": "string",
                  "description": "Output location"
                },
                "api_location": {
                  "type": "string",
                  "description": "Api location"
                },
                "api_build_command": {
                  "type": "string",
                  "description": "Api build command"
                },
                "routes_location": {
                  "type": "string",
                  "description": "Routes location"
                },
                "config_file_location": {
                  "type": "string",
                  "description": "Config file location"
                },
                "skip_app_build": {
                  "type": "boolean",
                  "description": "Skip app build"
                },
                "skip_api_build": {
                  "type": "boolean",
                  "description": "Skip api build"
                },
                "is_static_export": {
                  "type": "boolean",
                  "description": "Set static export"
                },
                "verbose": {
                  "type": "boolean",
                  "description": "Verbose"
                },
                "build_timeout_in_minutes": {
                  "type": "integer",
                  "description": "Build timeout in minutes"
                },
                "azure_static_web_apps_api_token": {
                  "type": "string",
                  "description": "Azure Static Web Apps api token"
                },
                "deployment_environment": {
                  "type": "string",
                  "description": "Deployment Environment"
                },
                "production_branch": {
                  "type": "string",
                  "description": "Production Branch"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Use Node.js ecosystem\n\nSet up a Node.js environment and add it to the PATH, additionally providing proxy support",
              
              "pattern": "^UseNode@1$"
            },
            "inputs": {
              "description": "Use Node.js ecosystem inputs",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "Version"
                },
                "checkLatest": {
                  "type": "boolean",
                  "description": "Check for Latest Version"
                },
                "force32bit": {
                  "type": "boolean",
                  "description": "Use 32 bit version on x64 agents"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Node.js tool installer\n\nFinds or downloads and caches the specified version spec of Node.js and adds it to the PATH",
              
              "pattern": "^NodeTool@0$"
            },
            "inputs": {
              "description": "Node.js tool installer inputs",
              "properties": {
                "versionSpec": {
                  "type": "string",
                  "description": "Version Spec"
                },
                "checkLatest": {
                  "type": "boolean",
                  "description": "Check for Latest Version"
                },
                "force32bit": {
                  "type": "boolean",
                  "description": "Use 32 bit version on x64 agents"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "[Deprecated] SQL Server database deploy\n\nDeploy a SQL Server database using DACPAC",
              
              "pattern": "^SqlServerDacpacDeployment@1$"
            },
            "inputs": {
              "description": "[Deprecated] SQL Server database deploy inputs",
              "properties": {
                "EnvironmentName": {
                  "type": "string",
                  "description": "Machines"
                },
                "AdminUserName": {
                  "type": "string",
                  "description": "Admin Login"
                },
                "AdminPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ]
                },
                "TestCertificate": {
                  "type": "boolean",
                  "description": "Test Certificate"
                },
                "DacpacFile": {
                  "type": "string",
                  "description": "DACPAC File"
                },
                "TargetMethod": {
                  "description": "Specify SQL Using",
                  "enum": [
                    "server",
                    "connectionString",
                    "publishProfile"
                  ]
                },
                "ServerName": {
                  "type": "string",
                  "description": "Server Name"
                },
                "DatabaseName": {
                  "type": "string",
                  "description": "Database Name"
                },
                "SqlUsername": {
                  "type": "string",
                  "description": "SQL Username"
                },
                "SqlPassword": {
                  "type": "string",
                  "description": "SQL Password"
                },
                "ConnectionString": {
                  "type": "string",
                  "description": "Connection String"
                },
                "PublishProfile": {
                  "type": "string",
                  "description": "Publish Profile"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional Arguments"
                },
                "DeployInParallel": {
                  "type": "boolean",
                  "description": "Deploy in Parallel"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ]
                },
                "MachineFilter": {
                  "type": "string",
                  "description": "Deploy to Machines"
                }
              },
              "additionalProperties": false,
              "required": [
                "EnvironmentName",
                "DacpacFile"
              ]
            }
          },
          "$comment": "SqlServerDacpacDeployment is deprecated - Deploy a SQL Server database using DACPAC",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Visual Studio test platform installer\n\nAcquire the test platform from nuget.org or the tool cache. Satisfies the ‘vstest’ demand and can be used for running tests and collecting diagnostic data using the Visual Studio Test task.",
              
              "pattern": "^VisualStudioTestPlatformInstaller@1$"
            },
            "inputs": {
              "description": "Visual Studio test platform installer inputs",
              "properties": {
                "packageFeedSelector": {
                  "description": "Package Feed",
                  "enum": [
                    "nugetOrg",
                    "customFeed",
                    "netShare"
                  ]
                },
                "versionSelector": {
                  "description": "Version",
                  "enum": [
                    "latestPreRelease",
                    "latestStable",
                    "specificVersion"
                  ]
                },
                "testPlatformVersion": {
                  "type": "string",
                  "description": "Test Platform Version"
                },
                "customFeed": {
                  "type": "string",
                  "description": "Package Source"
                },
                "username": {
                  "type": "string",
                  "description": "User Name"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                },
                "netShare": {
                  "type": "string",
                  "description": "UNC Path"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Publish To Azure Service Bus\n\nSends a message to Azure Service Bus using a service connection (no agent is required)",
              
              "pattern": "^PublishToAzureServiceBus@1$"
            },
            "inputs": {
              "description": "Publish To Azure Service Bus inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Service Bus service connection"
                },
                "messageBody": {
                  "type": "string",
                  "description": "Message body"
                },
                "sessionId": {
                  "type": "string",
                  "description": "Session Id"
                },
                "signPayload": {
                  "type": "boolean",
                  "description": "Sign the Message"
                },
                "certificateString": {
                  "type": "string",
                  "description": "Certificate Variable"
                },
                "signatureKey": {
                  "type": "string",
                  "description": "Signature Property Key"
                },
                "waitForCompletion": {
                  "type": "boolean",
                  "description": "Wait for task completion"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Publish To Azure Service Bus\n\nSends a message to azure service bus using a service connection (no agent required).",
              
              "pattern": "^PublishToAzureServiceBus@0$"
            },
            "inputs": {
              "description": "Publish To Azure Service Bus inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure service bus connection"
                },
                "messageBody": {
                  "type": "string",
                  "description": "Message body"
                },
                "waitForCompletion": {
                  "type": "boolean",
                  "description": "Wait for task completion"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Deploy to Kubernetes\n\nUse Kubernetes manifest files to deploy to clusters or even bake the manifest files to be used for deployments using Helm charts",
              
              "pattern": "^KubernetesManifest@0$"
            },
            "inputs": {
              "description": "Deploy to Kubernetes inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "bake",
                    "createSecret",
                    "delete",
                    "deploy",
                    "patch",
                    "promote",
                    "scale",
                    "reject"
                  ]
                },
                "kubernetesServiceConnection": {
                  "type": "string",
                  "description": "Kubernetes service connection"
                },
                "namespace": {
                  "type": "string",
                  "description": "Namespace"
                },
                "strategy": {
                  "description": "Strategy",
                  "enum": [
                    "canary",
                    "none"
                  ]
                },
                "trafficSplitMethod": {
                  "description": "Traffic split method",
                  "enum": [
                    "pod",
                    "smi"
                  ]
                },
                "percentage": {
                  "type": "string",
                  "description": "Percentage"
                },
                "baselineAndCanaryReplicas": {
                  "type": "string",
                  "description": "Baseline and canary replicas"
                },
                "manifests": {
                  "type": "string",
                  "description": "Manifests"
                },
                "containers": {
                  "type": "string",
                  "description": "Containers"
                },
                "imagePullSecrets": {
                  "type": "string",
                  "description": "ImagePullSecrets"
                },
                "renderType": {
                  "description": "Render Engine",
                  "enum": [
                    "helm",
                    "kompose",
                    "kustomize"
                  ]
                },
                "dockerComposeFile": {
                  "type": "string",
                  "description": "Path to docker compose file"
                },
                "helmChart": {
                  "type": "string",
                  "description": "Helm Chart"
                },
                "releaseName": {
                  "type": "string",
                  "description": "Helm Release Name"
                },
                "overrideFiles": {
                  "type": "string",
                  "description": "Override Files"
                },
                "overrides": {
                  "type": "string",
                  "description": "Overrides"
                },
                "kustomizationPath": {
                  "type": "string",
                  "description": "Kustomization Path"
                },
                "resourceToPatch": {
                  "description": "Resource to patch",
                  "enum": [
                    "file",
                    "name"
                  ]
                },
                "resourceFileToPatch": {
                  "type": "string",
                  "description": "File path"
                },
                "kind": {
                  "description": "Kind",
                  "enum": [
                    "deployment",
                    "replicaset",
                    "statefulset"
                  ]
                },
                "name": {
                  "type": "string",
                  "description": "Name"
                },
                "replicas": {
                  "type": "string",
                  "description": "Replica count"
                },
                "mergeStrategy": {
                  "description": "Merge Strategy",
                  "enum": [
                    "json",
                    "merge",
                    "strategic"
                  ]
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "patch": {
                  "type": "string",
                  "description": "Patch"
                },
                "secretType": {
                  "description": "Type of secret",
                  "enum": [
                    "dockerRegistry",
                    "generic"
                  ]
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret name"
                },
                "secretArguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "dockerRegistryEndpoint": {
                  "type": "string",
                  "description": "Docker registry service connection"
                },
                "rolloutStatusTimeout": {
                  "type": "string",
                  "description": "Timeout for rollout status"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download build artifacts\n\nDownload files that were saved as artifacts of a completed build",
              
              "pattern": "^DownloadBuildArtifacts@1$"
            },
            "inputs": {
              "description": "Download build artifacts inputs",
              "properties": {
                "buildType": {
                  "description": "Download artifacts produced by",
                  "enum": [
                    "current",
                    "specific"
                  ]
                },
                "project": {
                  "type": "string",
                  "description": "Project"
                },
                "pipeline": {
                  "type": "string",
                  "description": "Build pipeline"
                },
                "specificBuildWithTriggering": {
                  "type": "boolean",
                  "description": "When appropriate, download artifacts from the triggering build."
                },
                "buildVersionToDownload": {
                  "description": "Build version to download",
                  "enum": [
                    "latest",
                    "latestFromBranch",
                    "specific"
                  ]
                },
                "allowPartiallySucceededBuilds": {
                  "type": "boolean",
                  "description": "Download artifacts even from partially succeeded builds."
                },
                "branchName": {
                  "type": "string",
                  "description": "Branch name"
                },
                "buildId": {
                  "type": "string",
                  "description": "Build"
                },
                "tags": {
                  "type": "string",
                  "description": "Build Tags"
                },
                "downloadType": {
                  "description": "Download type",
                  "enum": [
                    "single",
                    "specific"
                  ]
                },
                "artifactName": {
                  "type": "string",
                  "description": "Artifact name"
                },
                "itemPattern": {
                  "type": "string",
                  "description": "Matching pattern"
                },
                "downloadPath": {
                  "type": "string",
                  "description": "Destination directory"
                },
                "parallelizationLimit": {
                  "type": "string",
                  "description": "Parallelization limit"
                },
                "checkDownloadedFiles": {
                  "type": "boolean",
                  "description": "Check downloaded files"
                },
                "retryDownloadCount": {
                  "type": "string",
                  "description": "Retry count"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Download build artifacts\n\nDownload files that were saved as artifacts of a completed build",
              
              "pattern": "^DownloadBuildArtifacts@0$"
            },
            "inputs": {
              "description": "Download build artifacts inputs",
              "properties": {
                "buildType": {
                  "description": "Download artifacts produced by",
                  "enum": [
                    "current",
                    "specific"
                  ]
                },
                "project": {
                  "type": "string",
                  "description": "Project"
                },
                "pipeline": {
                  "type": "string",
                  "description": "Build pipeline"
                },
                "specificBuildWithTriggering": {
                  "type": "boolean",
                  "description": "When appropriate, download artifacts from the triggering build."
                },
                "buildVersionToDownload": {
                  "description": "Build version to download",
                  "enum": [
                    "latest",
                    "latestFromBranch",
                    "specific"
                  ]
                },
                "allowPartiallySucceededBuilds": {
                  "type": "boolean",
                  "description": "Download artifacts even from partially succeeded builds."
                },
                "branchName": {
                  "type": "string",
                  "description": "Branch name"
                },
                "buildId": {
                  "type": "string",
                  "description": "Build"
                },
                "tags": {
                  "type": "string",
                  "description": "Build Tags"
                },
                "downloadType": {
                  "description": "Download type",
                  "enum": [
                    "single",
                    "specific"
                  ]
                },
                "artifactName": {
                  "type": "string",
                  "description": "Artifact name"
                },
                "itemPattern": {
                  "type": "string",
                  "description": "Matching pattern"
                },
                "downloadPath": {
                  "type": "string",
                  "description": "Destination directory"
                },
                "cleanDestinationFolder": {
                  "type": "boolean",
                  "description": "Clean destination folder"
                },
                "parallelizationLimit": {
                  "type": "string",
                  "description": "Parallelization limit"
                },
                "checkDownloadedFiles": {
                  "type": "boolean",
                  "description": "Check downloaded files"
                },
                "retryDownloadCount": {
                  "type": "string",
                  "description": "Retry count"
                },
                "extractTars": {
                  "type": "boolean",
                  "description": "Extract all files that are stored inside tar archives"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "CocoaPods\n\nInstall CocoaPods dependencies for Swift and Objective-C Cocoa projects",
              
              "pattern": "^CocoaPods@0$"
            },
            "inputs": {
              "description": "CocoaPods inputs",
              "properties": {
                "workingDirectory": {
                  "type": "string",
                  "description": "Working directory"
                },
                "forceRepoUpdate": {
                  "type": "boolean",
                  "description": "Force repo update"
                },
                "projectDirectory": {
                  "type": "string",
                  "description": "Project directory"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Spring Cloud\n\nDeploy applications to Azure Spring Cloud and manage deployments.",
              
              "pattern": "^AzureSpringCloud@0$"
            },
            "inputs": {
              "description": "Azure Spring Cloud inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "Action": {
                  "description": "Action",
                  "enum": [
                    "Deploy",
                    "Set Production",
                    "Delete Staging Deployment"
                  ]
                },
                "AzureSpringCloud": {
                  "type": "string",
                  "description": "Azure Spring Cloud Name"
                },
                "AppName": {
                  "type": "string",
                  "description": "App"
                },
                "UseStagingDeployment": {
                  "type": "boolean",
                  "description": "Use Staging Deployment"
                },
                "CreateNewDeployment": {
                  "type": "boolean",
                  "description": "Create a new staging deployment if one does not exist."
                },
                "DeploymentName": {
                  "type": "string",
                  "description": "Deployment"
                },
                "Package": {
                  "type": "string",
                  "description": "Package or folder"
                },
                "EnvironmentVariables": {
                  "type": "string",
                  "description": "Environment Variables"
                },
                "JvmOptions": {
                  "type": "string",
                  "description": "JVM Options"
                },
                "RuntimeVersion": {
                  "description": "Runtime Version",
                  "enum": [
                    "Java_8",
                    "Java_11",
                    "NetCore_31"
                  ]
                },
                "DotNetCoreMainEntryPath": {
                  "type": "string",
                  "description": "Main Entry Path"
                },
                "Version": {
                  "type": "string",
                  "description": "Version"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "AzureSpringCloud",
                "AppName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Web App\n\nDeploy an Azure Web App for Linux or Windows",
              
              "pattern": "^AzureWebApp@1$"
            },
            "inputs": {
              "description": "Azure Web App inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "appType": {
                  "description": "App type",
                  "enum": [
                    "webApp",
                    "webAppLinux"
                  ]
                },
                "appName": {
                  "type": "string",
                  "description": "App name"
                },
                "deployToSlotOrASE": {
                  "type": "boolean",
                  "description": "Deploy to Slot or App Service Environment"
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "slotName": {
                  "type": "string",
                  "description": "Slot"
                },
                "package": {
                  "type": "string",
                  "description": "Package or folder"
                },
                "customDeployFolder": {
                  "type": "string",
                  "description": "Custom Deploy Folder"
                },
                "runtimeStack": {
                  "type": "string",
                  "description": "Runtime stack"
                },
                "startUpCommand": {
                  "type": "string",
                  "description": "Startup command "
                },
                "customWebConfig": {
                  "type": "string",
                  "description": "Generate web.config parameters for Python, Node.js, Go and Java apps"
                },
                "appSettings": {
                  "type": "string",
                  "description": "App settings"
                },
                "configurationStrings": {
                  "type": "string",
                  "description": "Configuration settings"
                },
                "deploymentMethod": {
                  "description": "Deployment method",
                  "enum": [
                    "auto",
                    "zipDeploy",
                    "runFromPackage"
                  ]
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "appType",
                "appName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure CLI\n\nRun Azure CLI commands against an Azure subscription in a Shell script when running on Linux agent or Batch script when running on Windows agent.",
              
              "pattern": "^AzureCLI@1$"
            },
            "inputs": {
              "description": "Azure CLI inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "scriptLocation": {
                  "description": "Script Location",
                  "enum": [
                    "inlineScript",
                    "scriptPath"
                  ]
                },
                "scriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "inlineScript": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "addSpnToEnvironment": {
                  "type": "boolean",
                  "description": "Access service principal details in script"
                },
                "useGlobalConfig": {
                  "type": "boolean",
                  "description": "Use global Azure CLI configuration"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "failOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure CLI\n\nRun Azure CLI commands against an Azure subscription in a PowerShell Core/Shell script when running on Linux agent or PowerShell/PowerShell Core/Batch script when running on Windows agent.",
              
              "pattern": "^AzureCLI@2$"
            },
            "inputs": {
              "description": "Azure CLI inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure Resource Manager connection"
                },
                "scriptType": {
                  "description": "Script Type",
                  "enum": [
                    "ps",
                    "pscore",
                    "batch",
                    "bash"
                  ]
                },
                "scriptLocation": {
                  "description": "Script Location",
                  "enum": [
                    "inlineScript",
                    "scriptPath"
                  ]
                },
                "scriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "inlineScript": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "arguments": {
                  "type": "string",
                  "description": "Script Arguments"
                },
                "powerShellErrorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ]
                },
                "addSpnToEnvironment": {
                  "type": "boolean",
                  "description": "Access service principal details in script"
                },
                "useGlobalConfig": {
                  "type": "boolean",
                  "description": "Use global Azure CLI configuration"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "failOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                },
                "powerShellIgnoreLASTEXITCODE": {
                  "type": "boolean",
                  "description": "Ignore $LASTEXITCODE"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "scriptType"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure CLI Preview\n\nRun a Shell or Batch script with Azure CLI commands against an azure subscription",
              
              "pattern": "^AzureCLI@0$"
            },
            "inputs": {
              "description": "Azure CLI Preview inputs",
              "properties": {
                "connectedServiceNameSelector": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "connectedServiceName",
                    "connectedServiceNameARM"
                  ]
                },
                "connectedServiceNameARM": {
                  "type": "string",
                  "description": "AzureRM Subscription"
                },
                "connectedServiceName": {
                  "type": "string",
                  "description": "Azure Classic Subscription"
                },
                "scriptLocation": {
                  "description": "Script Location",
                  "enum": [
                    "inlineScript",
                    "scriptPath"
                  ]
                },
                "scriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "inlineScript": {
                  "type": "string",
                  "description": "Inline Script"
                },
                "args": {
                  "type": "string",
                  "description": "Arguments"
                },
                "cwd": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "failOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "GitHub Release\n\nCreate, edit, or delete a GitHub release",
              
              "pattern": "^GitHubRelease@1$"
            },
            "inputs": {
              "description": "GitHub Release inputs",
              "properties": {
                "gitHubConnection": {
                  "type": "string",
                  "description": "GitHub connection (OAuth or PAT)"
                },
                "repositoryName": {
                  "type": "string",
                  "description": "Repository"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "create",
                    "edit",
                    "delete"
                  ]
                },
                "target": {
                  "type": "string",
                  "description": "Target"
                },
                "tagSource": {
                  "description": "Tag source",
                  "enum": [
                    "gitTag",
                    "userSpecifiedTag"
                  ]
                },
                "tagPattern": {
                  "type": "string",
                  "description": "Tag Pattern"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag"
                },
                "title": {
                  "type": "string",
                  "description": "Release title"
                },
                "releaseNotesSource": {
                  "description": "Release notes source",
                  "enum": [
                    "filePath",
                    "inline"
                  ]
                },
                "releaseNotesFilePath": {
                  "type": "string",
                  "description": "Release notes file path"
                },
                "releaseNotesInline": {
                  "type": "string",
                  "description": "Release notes"
                },
                "assets": {
                  "type": "string",
                  "description": "Assets"
                },
                "assetUploadMode": {
                  "description": "Asset upload mode",
                  "enum": [
                    "delete",
                    "replace"
                  ]
                },
                "isDraft": {
                  "type": "boolean",
                  "description": "Draft release"
                },
                "isPreRelease": {
                  "type": "boolean",
                  "description": "Pre-release"
                },
                "addChangeLog": {
                  "type": "boolean",
                  "description": "Add changelog"
                },
                "changeLogCompareToRelease": {
                  "description": "Compare to",
                  "enum": [
                    "lastFullRelease",
                    "lastNonDraftRelease",
                    "lastNonDraftReleaseByTag"
                  ]
                },
                "changeLogCompareToReleaseTag": {
                  "type": "string",
                  "description": "Release Tag"
                },
                "changeLogType": {
                  "description": "Changelog type",
                  "enum": [
                    "commitBased",
                    "issueBased"
                  ]
                },
                "changeLogLabels": {
                  "type": "string",
                  "description": "Categories"
                }
              },
              "additionalProperties": false,
              "required": [
                "gitHubConnection"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "GitHub Release\n\nCreate, edit, or delete a GitHub release",
              
              "pattern": "^GitHubRelease@0$"
            },
            "inputs": {
              "description": "GitHub Release inputs",
              "properties": {
                "gitHubConnection": {
                  "type": "string",
                  "description": "GitHub connection (OAuth or PAT)"
                },
                "repositoryName": {
                  "type": "string",
                  "description": "Repository"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "create",
                    "edit",
                    "delete"
                  ]
                },
                "target": {
                  "type": "string",
                  "description": "Target"
                },
                "tagSource": {
                  "description": "Tag source",
                  "enum": [
                    "auto",
                    "manual"
                  ]
                },
                "tagPattern": {
                  "type": "string",
                  "description": "Tag Pattern"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag"
                },
                "title": {
                  "type": "string",
                  "description": "Release title"
                },
                "releaseNotesSource": {
                  "description": "Release notes source",
                  "enum": [
                    "file",
                    "input"
                  ]
                },
                "releaseNotesFile": {
                  "type": "string",
                  "description": "Release notes file path"
                },
                "releaseNotes": {
                  "type": "string",
                  "description": "Release notes"
                },
                "assets": {
                  "type": "string",
                  "description": "Assets"
                },
                "assetUploadMode": {
                  "description": "Asset upload mode",
                  "enum": [
                    "delete",
                    "replace"
                  ]
                },
                "isDraft": {
                  "type": "boolean",
                  "description": "Draft release"
                },
                "isPreRelease": {
                  "type": "boolean",
                  "description": "Pre-release"
                },
                "addChangeLog": {
                  "type": "boolean",
                  "description": "Add changelog"
                },
                "changeLogCompareToRelease": {
                  "description": "Compare to",
                  "enum": [
                    "lastFullRelease",
                    "lastNonDraftRelease",
                    "lastNonDraftReleaseByTag"
                  ]
                },
                "changeLogCompareToReleaseTag": {
                  "type": "string",
                  "description": "Release Tag"
                },
                "changeLogType": {
                  "description": "Changelog type",
                  "enum": [
                    "commitBased",
                    "issueBased"
                  ]
                },
                "changeLogLabels": {
                  "type": "string",
                  "description": "Categories"
                }
              },
              "additionalProperties": false,
              "required": [
                "gitHubConnection"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "cURL Upload Files\n\nUse cURL to upload files with FTP, FTPS, SFTP, HTTP, and more.",
              
              "pattern": "^cURLUploader@1$"
            },
            "inputs": {
              "description": "cURL Upload Files inputs",
              "properties": {
                "files": {
                  "type": "string",
                  "description": "Files"
                },
                "username": {
                  "type": "string",
                  "description": "Username"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                },
                "url": {
                  "type": "string",
                  "description": "URL"
                },
                "options": {
                  "type": "string",
                  "description": "Optional Arguments"
                },
                "redirectStderr": {
                  "type": "boolean",
                  "description": "Redirect Standard Error to Standard Out"
                }
              },
              "additionalProperties": false,
              "required": [
                "files",
                "url"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "cURL upload files\n\nUse cURL's supported protocols to upload files",
              
              "pattern": "^cURLUploader@2$"
            },
            "inputs": {
              "description": "cURL upload files inputs",
              "properties": {
                "files": {
                  "type": "string",
                  "description": "Files"
                },
                "authType": {
                  "description": "Authentication Method",
                  "enum": [
                    "ServiceEndpoint",
                    "UserAndPass"
                  ]
                },
                "serviceEndpoint": {
                  "type": "string",
                  "description": "Service Connection"
                },
                "username": {
                  "type": "string",
                  "description": "Username"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                },
                "url": {
                  "type": "string",
                  "description": "URL"
                },
                "remotePath": {
                  "type": "string",
                  "description": "Remote Directory"
                },
                "options": {
                  "type": "string",
                  "description": "Optional Arguments"
                },
                "redirectStderr": {
                  "type": "boolean",
                  "description": "Redirect Standard Error to Standard Out"
                }
              },
              "additionalProperties": false,
              "required": [
                "files"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure App Service Settings\n\nUpdate/Add App settings an Azure Web App for Linux or Windows",
              
              "pattern": "^AzureAppServiceSettings@1$"
            },
            "inputs": {
              "description": "Azure App Service Settings inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "appName": {
                  "type": "string",
                  "description": "App Service name"
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "slotName": {
                  "type": "string",
                  "description": "Slot"
                },
                "appSettings": {
                  "type": "string",
                  "description": "App settings"
                },
                "generalSettings": {
                  "type": "string",
                  "description": "General settings"
                },
                "connectionStrings": {
                  "type": "string",
                  "description": "Connection Strings"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "appName",
                "resourceGroupName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Universal packages\n\nDownload or publish Universal Packages",
              
              "pattern": "^UniversalPackages@0$"
            },
            "inputs": {
              "description": "Universal packages inputs",
              "properties": {
                "command": {
                  "description": "Command",
                  "enum": [
                    "download",
                    "publish"
                  ]
                },
                "downloadDirectory": {
                  "type": "string",
                  "description": "Destination directory"
                },
                "feedsToUse": {
                  "description": "Feed location",
                  "enum": [
                    "internal",
                    "external"
                  ]
                },
                "externalFeedCredentials": {
                  "type": "string",
                  "description": "organization/collection connection"
                },
                "vstsFeed": {
                  "type": "string",
                  "description": "Feed"
                },
                "vstsFeedPackage": {
                  "type": "string",
                  "description": "Package name"
                },
                "vstsPackageVersion": {
                  "type": "string",
                  "description": "Version"
                },
                "feedDownloadExternal": {
                  "type": "string",
                  "description": "Feed (or Project/Feed if the feed was created in a project)"
                },
                "packageDownloadExternal": {
                  "type": "string",
                  "description": "Package name"
                },
                "versionDownloadExternal": {
                  "type": "string",
                  "description": "Version"
                },
                "publishDirectory": {
                  "type": "string",
                  "description": "Path to file(s) to publish"
                },
                "feedsToUsePublish": {
                  "description": "Feed location",
                  "enum": [
                    "internal",
                    "external"
                  ]
                },
                "publishFeedCredentials": {
                  "type": "string",
                  "description": "organization/collection connection"
                },
                "vstsFeedPublish": {
                  "type": "string",
                  "description": "Destination Feed"
                },
                "publishPackageMetadata": {
                  "type": "boolean",
                  "description": "Publish pipeline metadata"
                },
                "vstsFeedPackagePublish": {
                  "type": "string",
                  "description": "Package name"
                },
                "feedPublishExternal": {
                  "type": "string",
                  "description": "Feed (or Project/Feed if the feed was created in a project)"
                },
                "packagePublishExternal": {
                  "type": "string",
                  "description": "Package name"
                },
                "versionOption": {
                  "description": "Version",
                  "enum": [
                    "major",
                    "minor",
                    "patch",
                    "custom"
                  ]
                },
                "versionPublish": {
                  "type": "string",
                  "description": "Custom version"
                },
                "packagePublishDescription": {
                  "type": "string",
                  "description": "Description"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "None",
                    "Trace",
                    "Debug",
                    "Information",
                    "Warning",
                    "Error",
                    "Critical"
                  ]
                },
                "publishedPackageVar": {
                  "type": "string",
                  "description": "Package Output Variable"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Check Azure Policy compliance\n\nSecurity and compliance assessment for Azure Policy",
              
              "pattern": "^AzurePolicyCheckGate@0$"
            },
            "inputs": {
              "description": "Check Azure Policy compliance inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "ResourceGroupName": {
                  "type": "string",
                  "description": "Resource group"
                },
                "Resources": {
                  "type": "string",
                  "description": "Resource name"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Function on Kubernetes\n\nDeploy Azure function to Kubernetes cluster.",
              
              "pattern": "^AzureFunctionOnKubernetes@0$"
            },
            "inputs": {
              "description": "Azure Function on Kubernetes inputs",
              "properties": {
                "dockerRegistryServiceConnection": {
                  "type": "string",
                  "description": "Docker registry service connection"
                },
                "kubernetesServiceConnection": {
                  "type": "string",
                  "description": "Kubernetes service connection"
                },
                "namespace": {
                  "type": "string",
                  "description": "Kubernetes namespace"
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret Name"
                },
                "dockerHubNamespace": {
                  "type": "string",
                  "description": "Docker Hub namespace"
                },
                "appName": {
                  "type": "string",
                  "description": "Application Name"
                },
                "functionRootDirectory": {
                  "type": "string",
                  "description": "Function root directory"
                },
                "waitForStability": {
                  "type": "boolean",
                  "description": "Wait for stability"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                }
              },
              "additionalProperties": false,
              "required": [
                "dockerRegistryServiceConnection",
                "kubernetesServiceConnection",
                "appName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Shell script\n\nRun a shell script using Bash",
              
              "pattern": "^ShellScript@2$"
            },
            "inputs": {
              "description": "Shell script inputs",
              "properties": {
                "scriptPath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "args": {
                  "type": "string",
                  "description": "Arguments"
                },
                "disableAutoCwd": {
                  "type": "boolean",
                  "description": "Specify Working Directory"
                },
                "cwd": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "failOnStandardError": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                }
              },
              "additionalProperties": false,
              "required": [
                "scriptPath"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Bash\n\nRun a Bash script on macOS, Linux, or Windows",
              
              "pattern": "^Bash@3$"
            },
            "inputs": {
              "description": "Bash inputs",
              "properties": {
                "targetType": {
                  "description": "Type",
                  "enum": [
                    "filePath",
                    "inline"
                  ]
                },
                "filePath": {
                  "type": "string",
                  "description": "Script Path"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "script": {
                  "type": "string",
                  "description": "Script"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "failOnStderr": {
                  "type": "boolean",
                  "description": "Fail on Standard Error"
                },
                "bashEnvValue": {
                  "type": "string",
                  "description": "Set value for BASH_ENV environment variable"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Publish build artifacts\n\nPublish build artifacts to Azure Pipelines or a Windows file share",
              
              "pattern": "^PublishBuildArtifacts@1$"
            },
            "inputs": {
              "description": "Publish build artifacts inputs",
              "properties": {
                "PathtoPublish": {
                  "type": "string",
                  "description": "Path to publish"
                },
                "ArtifactName": {
                  "type": "string",
                  "description": "Artifact name"
                },
                "publishLocation": {
                  "description": "Artifact publish location",
                  "enum": [
                    "Container",
                    "FilePath"
                  ]
                },
                "TargetPath": {
                  "type": "string",
                  "description": "File share path"
                },
                "Parallel": {
                  "type": "boolean",
                  "description": "Parallel copy"
                },
                "ParallelCount": {
                  "type": "integer",
                  "description": "Parallel count"
                },
                "FileCopyOptions": {
                  "type": "string",
                  "description": "File copy options"
                },
                "StoreAsTar": {
                  "type": "boolean",
                  "description": "Tar the artifact before uploading"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Install SSH key\n\nInstall an SSH key prior to a build or deployment",
              
              "pattern": "^InstallSSHKey@0$"
            },
            "inputs": {
              "description": "Install SSH key inputs",
              "properties": {
                "knownHostsEntry": {
                  "type": "string",
                  "description": "Known Hosts Entry"
                },
                "sshPublicKey": {
                  "type": "string",
                  "description": "SSH Public Key"
                },
                "sshPassphrase": {
                  "type": "string",
                  "description": "SSH Passphrase"
                },
                "sshKeySecureFile": {
                  "type": "string",
                  "description": "SSH Key"
                },
                "addEntryToConfig": {
                  "type": "boolean",
                  "description": "Add entry to SSH config"
                },
                "configHostAlias": {
                  "type": "string",
                  "description": "Alias"
                },
                "configHostname": {
                  "type": "string",
                  "description": "Host name"
                },
                "configUser": {
                  "type": "string",
                  "description": "User"
                },
                "configPort": {
                  "type": "string",
                  "description": "Port"
                }
              },
              "additionalProperties": false,
              "required": [
                "knownHostsEntry",
                "sshKeySecureFile"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure VM scale set deployment\n\nDeploy a virtual machine scale set image",
              
              "pattern": "^AzureVmssDeployment@0$"
            },
            "inputs": {
              "description": "Azure VM scale set deployment inputs",
              "properties": {
                "azureSubscription": {
                  "type": "string",
                  "description": "Azure subscription"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "Update image",
                    "Configure application startup"
                  ]
                },
                "vmssName": {
                  "type": "string",
                  "description": "Virtual Machine scale set name"
                },
                "vmssOsType": {
                  "description": "OS type",
                  "enum": [
                    "Windows",
                    "Linux"
                  ]
                },
                "imageUrl": {
                  "type": "string",
                  "description": "Image URL"
                },
                "customScriptsDirectory": {
                  "type": "string",
                  "description": "Custom script directory"
                },
                "customScript": {
                  "type": "string",
                  "description": "Command"
                },
                "customScriptArguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "customScriptsStorageAccount": {
                  "type": "string",
                  "description": "Azure storage account where custom scripts will be uploaded"
                },
                "skipArchivingCustomScripts": {
                  "type": "boolean",
                  "description": "Skip Archiving custom scripts"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureSubscription",
                "vmssName",
                "vmssOsType",
                "imageUrl"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure App Service: Classic (Deprecated)\n\nCreate or update Azure App Service using Azure PowerShell",
              
              "pattern": "^AzureWebPowerShellDeployment@1$"
            },
            "inputs": {
              "description": "Azure App Service: Classic (Deprecated) inputs",
              "properties": {
                "ConnectedServiceName": {
                  "type": "string",
                  "description": "Azure Subscription (Classic)"
                },
                "WebSiteLocation": {
                  "type": "string",
                  "description": "Web App Location"
                },
                "WebSiteName": {
                  "type": "string",
                  "description": "Web App Name"
                },
                "Slot": {
                  "type": "string",
                  "description": "Slot"
                },
                "Package": {
                  "type": "string",
                  "description": "Web Deploy Package"
                },
                "doNotDelete": {
                  "type": "boolean",
                  "description": "Set DoNotDelete flag"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "description": "Additional Arguments"
                }
              },
              "additionalProperties": false,
              "required": [
                "ConnectedServiceName",
                "WebSiteLocation",
                "WebSiteName",
                "Package"
              ]
            }
          },
          "$comment": "AzureWebPowerShellDeployment is deprecated - Create or update Azure App Service using Azure PowerShell",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Azure Cloud Service deployment\n\nDeploy an Azure Cloud Service",
              
              "pattern": "^AzureCloudPowerShellDeployment@1$"
            },
            "inputs": {
              "description": "Azure Cloud Service deployment inputs",
              "properties": {
                "azureClassicSubscription": {
                  "type": "string",
                  "description": "Azure subscription (Classic)"
                },
                "EnableAdvancedStorageOptions": {
                  "type": "boolean",
                  "description": "Enable ARM storage support"
                },
                "StorageAccount": {
                  "type": "string",
                  "description": "Storage account (Classic)"
                },
                "ARMConnectedServiceName": {
                  "type": "string",
                  "description": "Azure subscription (ARM)"
                },
                "ARMStorageAccount": {
                  "type": "string",
                  "description": "Storage account (ARM)"
                },
                "ServiceName": {
                  "type": "string",
                  "description": "Service name"
                },
                "ServiceLocation": {
                  "type": "string",
                  "description": "Service location"
                },
                "CsPkg": {
                  "type": "string",
                  "description": "CsPkg"
                },
                "CsCfg": {
                  "type": "string",
                  "description": "CsCfg"
                },
                "slotName": {
                  "type": "string",
                  "description": "Environment (Slot)"
                },
                "DeploymentLabel": {
                  "type": "string",
                  "description": "Deployment label"
                },
                "AppendDateTimeToLabel": {
                  "type": "boolean",
                  "description": "Append current date and time"
                },
                "AllowUpgrade": {
                  "type": "boolean",
                  "description": "Allow upgrade"
                },
                "SimultaneousUpgrade": {
                  "type": "boolean",
                  "description": "Simultaneous upgrade"
                },
                "ForceUpgrade": {
                  "type": "boolean",
                  "description": "Force upgrade"
                },
                "VerifyRoleInstanceStatus": {
                  "type": "boolean",
                  "description": "Verify role instance status"
                },
                "DiagnosticStorageAccountKeys": {
                  "type": "string",
                  "description": "Diagnostic storage account keys"
                },
                "NewServiceCustomCertificates": {
                  "type": "string",
                  "description": "Custom certificates to import"
                },
                "NewServiceAdditionalArguments": {
                  "type": "string",
                  "description": "Additional arguments"
                },
                "NewServiceAffinityGroup": {
                  "type": "string",
                  "description": "Affinity group"
                }
              },
              "additionalProperties": false,
              "required": [
                "azureClassicSubscription",
                "ServiceName",
                "ServiceLocation",
                "CsPkg",
                "CsCfg"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Delete files\n\nDelete folders, or files matching a pattern",
              
              "pattern": "^DeleteFiles@1$"
            },
            "inputs": {
              "description": "Delete files inputs",
              "properties": {
                "SourceFolder": {
                  "type": "string",
                  "description": "Source Folder"
                },
                "Contents": {
                  "type": "string",
                  "description": "Contents"
                },
                "RemoveSourceFolder": {
                  "type": "boolean",
                  "description": "Remove SourceFolder"
                },
                "RemoveDotFiles": {
                  "type": "boolean",
                  "description": "Remove files starting with a dot"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "gulp\n\nRun the gulp Node.js streaming task-based build system",
              
              "pattern": "^gulp@1$"
            },
            "inputs": {
              "description": "gulp inputs",
              "properties": {
                "gulpFile": {
                  "type": "string",
                  "description": "gulp File Path"
                },
                "targets": {
                  "type": "string",
                  "description": "gulp Task(s)"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "gulpjs": {
                  "type": "string",
                  "description": "gulp.js location"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to Azure Pipelines"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test Results Files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test Run Title"
                },
                "enableCodeCoverage": {
                  "type": "boolean",
                  "description": "Enable code Coverage"
                },
                "testFramework": {
                  "description": "Test Framework",
                  "enum": [
                    "Mocha",
                    "Jasmine"
                  ]
                },
                "srcFiles": {
                  "type": "string",
                  "description": "Source Files"
                },
                "testFiles": {
                  "type": "string",
                  "description": "Test Script Files"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "gulp\n\nRun the gulp Node.js streaming task-based build system",
              
              "pattern": "^gulp@0$"
            },
            "inputs": {
              "description": "gulp inputs",
              "properties": {
                "gulpFile": {
                  "type": "string",
                  "description": "gulp File Path"
                },
                "targets": {
                  "type": "string",
                  "description": "gulp Task(s)"
                },
                "arguments": {
                  "type": "string",
                  "description": "Arguments"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Working Directory"
                },
                "gulpjs": {
                  "type": "string",
                  "description": "gulp.js location"
                },
                "publishJUnitResults": {
                  "type": "boolean",
                  "description": "Publish to Azure Pipelines"
                },
                "testResultsFiles": {
                  "type": "string",
                  "description": "Test Results Files"
                },
                "testRunTitle": {
                  "type": "string",
                  "description": "Test Run Title"
                },
                "enableCodeCoverage": {
                  "type": "boolean",
                  "description": "Enable code Coverage"
                },
                "testFramework": {
                  "description": "Test Framework",
                  "enum": [
                    "Mocha",
                    "Jasmine"
                  ]
                },
                "srcFiles": {
                  "type": "string",
                  "description": "Source Files"
                },
                "testFiles": {
                  "type": "string",
                  "description": "Test Script Files"
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Cloud-based web performance test\n\nRun a quick web performance test in the cloud with Azure Pipelines",
              
              "pattern": "^QuickPerfTest@1$"
            },
            "inputs": {
              "description": "Cloud-based web performance test inputs",
              "properties": {
                "connectedServiceName": {
                  "type": "string",
                  "description": "Azure Pipelines Connection"
                },
                "websiteUrl": {
                  "type": "string",
                  "description": "Website URL"
                },
                "testName": {
                  "type": "string",
                  "description": "Test Name"
                },
                "vuLoad": {
                  "description": "User Load",
                  "enum": [
                    "25",
                    "50",
                    "100",
                    "250"
                  ]
                },
                "runDuration": {
                  "description": "Run Duration (sec)",
                  "enum": [
                    "60",
                    "120",
                    "180",
                    "240",
                    "300"
                  ]
                },
                "geoLocation": {
                  "description": "Load Location",
                  "enum": [
                    "Default",
                    "Australia East",
                    "Australia Southeast",
                    "Brazil South",
                    "Central India",
                    "Central US",
                    "East Asia",
                    "East US 2",
                    "East US",
                    "Japan East",
                    "Japan West",
                    "North Central US",
                    "North Europe",
                    "South Central US",
                    "South India",
                    "Southeast Asia",
                    "West Europe",
                    "West US"
                  ]
                },
                "machineType": {
                  "description": "Run load test using",
                  "enum": [
                    "0",
                    "2"
                  ]
                },
                "resourceGroupName": {
                  "type": "string",
                  "description": "Resource group rig"
                },
                "numOfSelfProvisionedAgents": {
                  "type": "integer",
                  "description": "No. of agents to use"
                },
                "avgResponseTimeThreshold": {
                  "type": "string",
                  "description": "Fail test if Avg.Response Time(ms) exceeds"
                }
              },
              "additionalProperties": false,
              "required": [
                "websiteUrl",
                "testName"
              ]
            }
          },
          "$comment": "QuickPerfTest is deprecated - Run a quick web performance test in the cloud with Azure Pipelines",
          "doNotSuggest": true,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "IIS web app manage\n\nCreate or update websites, web apps, virtual directories, or application pools",
              
              "pattern": "^IISWebAppManagementOnMachineGroup@0$"
            },
            "inputs": {
              "description": "IIS web app manage inputs",
              "properties": {
                "EnableIIS": {
                  "type": "boolean",
                  "description": "Enable IIS"
                },
                "IISDeploymentType": {
                  "description": "Configuration type",
                  "enum": [
                    "IISWebsite",
                    "IISWebApplication",
                    "IISVirtualDirectory",
                    "IISApplicationPool"
                  ]
                },
                "ActionIISWebsite": {
                  "description": "Action",
                  "enum": [
                    "CreateOrUpdateWebsite",
                    "StartWebsite",
                    "StopWebsite"
                  ]
                },
                "ActionIISApplicationPool": {
                  "description": "Action",
                  "enum": [
                    "CreateOrUpdateAppPool",
                    "StartAppPool",
                    "StopAppPool",
                    "RecycleAppPool"
                  ]
                },
                "StartStopWebsiteName": {
                  "type": "string",
                  "description": "Website name"
                },
                "WebsiteName": {
                  "type": "string",
                  "description": "Website name"
                },
                "WebsitePhysicalPath": {
                  "type": "string",
                  "description": "Physical path"
                },
                "WebsitePhysicalPathAuth": {
                  "description": "Physical path authentication",
                  "enum": [
                    "WebsiteUserPassThrough",
                    "WebsiteWindowsAuth"
                  ]
                },
                "WebsiteAuthUserName": {
                  "type": "string",
                  "description": "Username"
                },
                "WebsiteAuthUserPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "AddBinding": {
                  "type": "boolean",
                  "description": "Add binding"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "https",
                    "http"
                  ]
                },
                "IPAddress": {
                  "type": "string",
                  "description": "IP address"
                },
                "Port": {
                  "type": "string",
                  "description": "Port"
                },
                "ServerNameIndication": {
                  "type": "boolean",
                  "description": "Server Name Indication required"
                },
                "HostNameWithOutSNI": {
                  "type": "string",
                  "description": "Host name"
                },
                "HostNameWithHttp": {
                  "type": "string",
                  "description": "Host name"
                },
                "HostNameWithSNI": {
                  "type": "string",
                  "description": "Host name"
                },
                "SSLCertThumbPrint": {
                  "type": "string",
                  "description": "SSL certificate thumbprint"
                },
                "Bindings": {
                  "type": "string",
                  "description": "Add bindings"
                },
                "CreateOrUpdateAppPoolForWebsite": {
                  "type": "boolean",
                  "description": "Create or update app pool"
                },
                "ConfigureAuthenticationForWebsite": {
                  "type": "boolean",
                  "description": "Configure authentication"
                },
                "AppPoolNameForWebsite": {
                  "type": "string",
                  "description": "Name"
                },
                "DotNetVersionForWebsite": {
                  "description": ".NET version",
                  "enum": [
                    "v4.0",
                    "v2.0",
                    "No Managed Code"
                  ]
                },
                "PipeLineModeForWebsite": {
                  "description": "Managed pipeline mode",
                  "enum": [
                    "Integrated",
                    "Classic"
                  ]
                },
                "AppPoolIdentityForWebsite": {
                  "description": "Identity",
                  "enum": [
                    "ApplicationPoolIdentity",
                    "LocalService",
                    "LocalSystem",
                    "NetworkService",
                    "SpecificUser"
                  ]
                },
                "AppPoolUsernameForWebsite": {
                  "type": "string",
                  "description": "Username"
                },
                "AppPoolPasswordForWebsite": {
                  "type": "string",
                  "description": "Password"
                },
                "AnonymousAuthenticationForWebsite": {
                  "type": "boolean",
                  "description": "Anonymous authentication"
                },
                "BasicAuthenticationForWebsite": {
                  "type": "boolean",
                  "description": "Basic authentication"
                },
                "WindowsAuthenticationForWebsite": {
                  "type": "boolean",
                  "description": "Windows authentication"
                },
                "ParentWebsiteNameForVD": {
                  "type": "string",
                  "description": "Parent website name"
                },
                "VirtualPathForVD": {
                  "type": "string",
                  "description": "Virtual path"
                },
                "PhysicalPathForVD": {
                  "type": "string",
                  "description": "Physical path"
                },
                "VDPhysicalPathAuth": {
                  "description": "Physical path authentication",
                  "enum": [
                    "VDUserPassThrough",
                    "VDWindowsAuth"
                  ]
                },
                "VDAuthUserName": {
                  "type": "string",
                  "description": "Username"
                },
                "VDAuthUserPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "ParentWebsiteNameForApplication": {
                  "type": "string",
                  "description": "Parent website name"
                },
                "VirtualPathForApplication": {
                  "type": "string",
                  "description": "Virtual path"
                },
                "PhysicalPathForApplication": {
                  "type": "string",
                  "description": "Physical path"
                },
                "ApplicationPhysicalPathAuth": {
                  "description": "Physical path authentication",
                  "enum": [
                    "ApplicationUserPassThrough",
                    "ApplicationWindowsAuth"
                  ]
                },
                "ApplicationAuthUserName": {
                  "type": "string",
                  "description": "Username"
                },
                "ApplicationAuthUserPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "CreateOrUpdateAppPoolForApplication": {
                  "type": "boolean",
                  "description": "Create or update app pool"
                },
                "AppPoolNameForApplication": {
                  "type": "string",
                  "description": "Name"
                },
                "DotNetVersionForApplication": {
                  "description": ".NET version",
                  "enum": [
                    "v4.0",
                    "v2.0",
                    "No Managed Code"
                  ]
                },
                "PipeLineModeForApplication": {
                  "description": "Managed pipeline mode",
                  "enum": [
                    "Integrated",
                    "Classic"
                  ]
                },
                "AppPoolIdentityForApplication": {
                  "description": "Identity",
                  "enum": [
                    "ApplicationPoolIdentity",
                    "LocalService",
                    "LocalSystem",
                    "NetworkService",
                    "SpecificUser"
                  ]
                },
                "AppPoolUsernameForApplication": {
                  "type": "string",
                  "description": "Username"
                },
                "AppPoolPasswordForApplication": {
                  "type": "string",
                  "description": "Password"
                },
                "AppPoolName": {
                  "type": "string",
                  "description": "Name"
                },
                "DotNetVersion": {
                  "description": ".NET version",
                  "enum": [
                    "v4.0",
                    "v2.0",
                    "No Managed Code"
                  ]
                },
                "PipeLineMode": {
                  "description": "Managed pipeline mode",
                  "enum": [
                    "Integrated",
                    "Classic"
                  ]
                },
                "AppPoolIdentity": {
                  "description": "Identity",
                  "enum": [
                    "ApplicationPoolIdentity",
                    "LocalService",
                    "LocalSystem",
                    "NetworkService",
                    "SpecificUser"
                  ]
                },
                "AppPoolUsername": {
                  "type": "string",
                  "description": "Username"
                },
                "AppPoolPassword": {
                  "type": "string",
                  "description": "Password"
                },
                "StartStopRecycleAppPoolName": {
                  "type": "string",
                  "description": "Application pool name"
                },
                "AppCmdCommands": {
                  "type": "string",
                  "description": "Additional appcmd.exe commands"
                }
              },
              "additionalProperties": false,
              "required": [
                "WebsiteName",
                "Bindings",
                "AppPoolNameForWebsite",
                "ParentWebsiteNameForVD",
                "VirtualPathForVD",
                "ParentWebsiteNameForApplication",
                "VirtualPathForApplication",
                "AppPoolNameForApplication",
                "AppPoolName"
              ]
            }
          },
          "doNotSuggest": false,
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "properties": {
            "task": {
              "description": "Docker CLI installer\n\nInstall Docker CLI on agent machine.",
              
              "pattern": "^DockerInstaller@0$"
            },
            "inputs": {
              "description": "Docker CLI installer inputs",
              "properties": {
                "dockerVersion": {
                  "type": "string",
                  "description": "Docker Version"
                },
                "releaseType": {
                  "description": "Release type",
                  "enum": [
                    "stable",
                    "edge",
                    "test",
                    "nightly"
                  ]
                }
              },
              "additionalProperties": false,
              "required": []
            }
          },
          "doNotSuggest": false,
          "required": [
            "task"
          ]
        }
      ]
    }
  }
}