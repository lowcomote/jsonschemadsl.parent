/*
 * generated by Xtext 2.23.0
 */
package at.jku.bise.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.common.util.URI
import jsonschemadsl2ecore.trafo.opt.utils.JsonSchemaToEcoreUtils
import org.eclipse.core.runtime.Path
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.resources.IFile
import org.eclipse.core.runtime.NullProgressMonitor

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JsonSchemaDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var URI resourceURI = fsa.getURI('/').trimSegments(1).appendSegment('model')
					.appendSegment(resource.URI.trimFileExtension.lastSegment + '.ecore');
		
		var URI resourceOptURI = fsa.getURI('/').trimSegments(1).appendSegment('model')
//					.appendSegment(resource.URI.trimFileExtension.lastSegment + '-opt.ecore');
					.appendSegment(resource.URI.trimFileExtension.lastSegment + 'Opt.ecore');
					
		var URI grammarResourceURI = fsa.getURI('/').trimSegments(1).appendSegment('model')
					.appendSegment(resource.URI.trimFileExtension.lastSegment + '.jsongrammar');
					
		var URI relatedSchemasResourceURI = fsa.getURI('/').trimSegments(1).appendSegment('model')
					.appendSegment(resource.URI.trimFileExtension.lastSegment + '.relatedSchemas');			
					
		var URI traceResourceURI = fsa.getURI('/').trimSegments(1).appendSegment('model')
					.appendSegment(resource.URI.trimFileExtension.lastSegment + '.xmi');
		removeFilesIfExist(resourceURI);
		removeFilesIfExist(resourceOptURI);
		removeFilesIfExist(grammarResourceURI);
		removeFilesIfExist(relatedSchemasResourceURI);
		removeFilesIfExist(traceResourceURI);
		// Not optimized Ecore
		/**
		 * descomment this line to enable conceptual mapping
		 */
//		new SchemaToEcoreGenerator(resource.URI.toString, resourceURI.toString).generateJsonSchema	
		
		//Optimize Trafo Ecore
		JsonSchemaToEcoreUtils.performTrafoEMFTVMJsonSchemaToEcore(resource.URI.toString, 
			resourceOptURI.toString, grammarResourceURI.toString, relatedSchemasResourceURI.toString(), traceResourceURI.toString);	
	}
	
	def removeFilesIfExist(URI uri) {
		val IFile file = ResourcesPlugin.workspace.root.getFile(new Path(uri.toPlatformString(true)));
		file.delete(true, new NullProgressMonitor);
	}
	
}
