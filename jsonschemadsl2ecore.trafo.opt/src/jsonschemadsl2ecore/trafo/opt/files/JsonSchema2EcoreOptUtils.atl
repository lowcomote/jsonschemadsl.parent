-- @atlcompiler emftvm

library JsonSchema2EcoreOptUtils;

--Keywords
helper def: keywords : Sequence(Ecore!EStructuralFeature) = Sequence{};

--Curly Braces EReferences
helper def: curlyBracesEReferences : Sequence(Ecore!EReferece) = Sequence{};

--Brackets EReferences
helper def: bracketsEReferences : Sequence(Ecore!EReferece) = Sequence{JSchemaMM!ArrayValue.getEStructuralFeature('value')};

--Brackets EReferences
helper def: keyValues : Sequence(Ecore!EAttribute) = Sequence{JSchemaMM!KeyValuePair.getEStructuralFeature('key')};

--Curly Braces EClass
helper def: curlyBracesEClass : Sequence(Ecore!EClass) = Sequence{JSchemaMM!ObjectValue};

--Curly Braces EClass
helper def: bracketsEClass : Sequence(Ecore!EClass) = Sequence{};

--Return Package Objects
helper def: packageEObjects() : Sequence(Ecore!EPackage) = Ecore!EPackage.allInstancesFrom('ecoreM');

--Return Package Objects
helper def: allEClass() : Sequence(Ecore!EClass) = Ecore!EClass.allInstancesFrom('ecoreM');

--Return the root Package Object
helper def: packageRoot(): Ecore!EPackage = if (thisModule.packageEObjects().size() > 0) then
												thisModule.packageEObjects()->first()
											 else
											 	OclUndefined
											 endif;

--Return JsonGrammar Objects
helper def: jsonGrammarObjects() : Sequence(JsonGrammarMM!JsonGrammar) = JsonGrammarMM!JsonGrammar.allInstancesFrom('jsonGrammar');

--Return the root JsonGrammar Object
helper def: jsonGrammarRoot(): JsonGrammarMM!JsonGrammar = if (thisModule.jsonGrammarObjects().size() > 0) then
																thisModule.jsonGrammarObjects()->first()
															 else
															 	OclUndefined
															 endif;


--helper def: keywordDefinitionMap : Map (String, OclAny) = ------ TODO should it be OclType????
--	Map{
--		('additionalItems',JSchemaMM!AdditionalItemsSchemaDefinition), 
--		('items',JSchemaMM!ItemsSchemaDefinition),
--		('additionalProperties',JSchemaMM!AdditionalPropertiesSchemaDefinition),
--		('contains',JSchemaMM!ContainsSchemaDefinition),
--		('definitions',JSchemaMM!DefinitionsSchemaDefinition),
--		('properties',JSchemaMM!PropertiesSchemaDefinition),
--		('patternProperties',JSchemaMM!PatternPropertiesSchemaDefinition),
--		('propertyNames',JSchemaMM!PropertyNamesSchemaDefinition),
--		('if',JSchemaMM!IfSchemaDefinition),
--		('then',JSchemaMM!ThenSchemaDefinition),
--		('else',JSchemaMM!ElseSchemaDefinition),
--		('allOf',JSchemaMM!AllOfSchemaDefinition),
--		('anyOf',JSchemaMM!AnyOfSchemaDefinition),
--		('oneOf',JSchemaMM!OneOfSchemaDefinition),
--		('not',JSchemaMM!NotSchemaDefinition)
--	};
	
	
helper def : scalarTypeMapping : Map(String, Ecore!EDataType) =
	Map{
		(#"\"string\"", Ecore!EString),
		(#"\"integer\"", Ecore!EInt),
		(#"\"number\"", Ecore!EDouble),
		(#"\"boolean\"", Ecore!EBoolean)
	};


helper def: getRootName() : String = 
	thisModule.retrieveRootSchema().eResource().getURI().trimFileExtension().lastSegment();

helper def: retrieveRootSchema() : JSchemaMM!Schema=
	JSchemaMM!JsonSchema.allInstancesFrom('jschema').first().schema;	

---------- NEWW
--- This is similar to the inv UnsolvableReference in fullvalidation.ocl
helper context JSchemaMM!RefSchemaDefinition def: findSchemaByJsonPointer() : JSchemaMM!Schema=
	if true =  self.isOnlyFragment() then
		let jsonPointer : Sequence(String) = self.getJsonPointerAsList() in
		if  jsonPointer.oclIsUndefined() then OclUndefined
		else
			JSchemaMM!JsonSchema.allInstancesFrom('jschema').first().findSchemaByJsonPointer(jsonPointer)
		endif
	else OclUndefined
	endif;
-----------NEWW


--helper context JSchemaMM!Schema def:findSchemaByJsonPointerFromRoot(jsonPointer:String):  JSchemaMM!Schema=
--	self.findSchemaByJsonPointer(jsonPointer.split('/'));

--  the initial input will be JsonSchema.schema
--helper context OclAny def: findSchemaByJsonPointer(jsonPointer:Sequence(String)): OclAny =	
--	if jsonPointer ->notEmpty() 
--	then
--		if jsonPointer.first() = '#' -- OclAny is MM!JsonSchema.schema
--			then
--				self.findSchemaByJsonPointer(thisModule.popFirst(jsonPointer))
--			else
--				let keywordDefinitionType : OclAny = thisModule.keywordDefinitionMap.get(jsonPointer.first())
--				in
--					if not keywordDefinitionType.oclIsUndefined()
--					then --In the jsonPointer navigation we are on a keywordDefinition and self is an objectschema
--						let foundKeywordDefinition : JSchemaMM!KeywordDefinition = 
--							self.keywordDefinition->select(
--								keywordDefinition | keywordDefinition.oclIsTypeOf(keywordDefinitionType)
--							)
--						in 
--							if foundKeywordDefinition.isEmpty()	
--							then OclUndefined
--							else
--								foundKeywordDefinition.first().findSchemaByJsonPointer(thisModule.popFirst(jsonPointer))
--							endif
--
--					else -- In the jsonPointer navigation we are on a key , we look for a KeySchema with that key
--						 ------ TODO (we could be on an array index, not supported yet)
--						 ------ TODO it could also be a keyValue pair , not supported yet to hold definitions
--						let foundKeySchemaPair : JSchemaMM!KeySchemaPair =
--							self.keySchemaPairs->select(keySchemaPair | keySchemaPair.key.stripFirstAndLast()=jsonPointer.first())
--						in 
--							if foundKeySchemaPair.isEmpty()
--							then OclUndefined	
--							else
--								foundKeySchemaPair.first().value.findSchemaByJsonPointer(thisModule.popFirst(jsonPointer))
--							endif
--						 
--					endif
--			endif
--		else
--		self
--	endif
--;

helper  def: popFirst(jsonPointer:Sequence(String)): Sequence(String)=
	if jsonPointer.size() = 0
		then jsonPointer
		else
			if jsonPointer.size() = 1
				then Sequence{}
				else jsonPointer.subSequence(2, jsonPointer.size())
			endif		
	endif;	


helper context JSchemaMM!KeySchemaPair  def : isEnclosedInDefinitions() : Boolean = 
self.refImmediateComposite().oclIsTypeOf(JSchemaMM!DefinitionsSchemaDefinition);

helper context JSchemaMM!Schema  def : isRootOrDefinitionOrSchemaObjectAdditionalProperties() : Boolean =
	let parent : OclAny = self.refImmediateComposite() in
	if parent.oclIsTypeOf(JSchemaMM!JsonSchema) or parent.oclIsTypeOf(JSchemaMM!SchemaObjectAdditionalProperties) then true
	else if parent.oclIsTypeOf(JSchemaMM!KeySchemaPair) then parent.isEnclosedInDefinitions() else false endif	
	endif;

helper context JSchemaMM!Schema  def : isKeySchemaPairInProperties() : Boolean =
	let parent : OclAny = self.refImmediateComposite() in
	if parent.oclIsTypeOf(JSchemaMM!KeySchemaPair)  then 
--		if parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!PropertiesSchemaDefinition) then true else false endif
		parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!PropertiesSchemaDefinition) 
	else false
	endif;

helper context JSchemaMM!Schema  def : isKeySchemaPairInPatternProperties() : Boolean =
	let parent : OclAny = self.refImmediateComposite() in
	if parent.oclIsTypeOf(JSchemaMM!KeySchemaPair)  then 
		parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!PatternPropertiesSchemaDefinition) 
	else false
	endif;
	
	 
helper context JSchemaMM!Schema def: getKey() : String=
let parent : OclAny = self.refImmediateComposite() in
if parent.oclIsTypeOf(JSchemaMM!JsonSchema) then thisModule.getRootName() + 'Root'  
else
	if parent.oclIsTypeOf(JSchemaMM!KeySchemaPair) then 
		if parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!PatternPropertiesSchemaDefinition) then 'patternProperties'.concat(parent.refImmediateComposite().keySchemaPairs.indexOf(parent).toString())
		else
			parent.key.stripFirstAndLast()
		endif	
		
	else
		if parent.oclIsTypeOf(JSchemaMM!SchemaObjectAdditionalProperties) then parent.key
		else
			if parent.oclIsTypeOf(JSchemaMM!AdditionalPropertiesSchemaDefinition) then 'additionalProperties'
			else
--				if parent.oclIsTypeOf(JSchemaMM!PatternPropertiesSchemaDefinition) then 'patternProperties'.concat(parent.keySchemaPairs.indexOf(self).toString())
--				else
					if parent.oclIsTypeOf(JSchemaMM!AdditionalItemsSchemaDefinition) then 'additionalItems'
					else 
--						if parent.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition) then 'items'
						if parent.oclIsTypeOf(JSchemaMM!ItemsAnyOf1) then 'items'
						else 
							if parent.oclIsTypeOf(JSchemaMM!SchemaArray) then
							    ---- TODO change when refactoring ItemsSchemaDefinition
--								if parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition) then 'items'.concat(parent.items.indexOf(self).toString())
								if parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!ItemsAnyOf2) then 'items'.concat(parent.items.indexOf(self).toString())
								else 
									if parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!AllOfSchemaDefinition) then 'allOf'.concat(parent.items.indexOf(self).toString())
									else
										if  parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!AnyOfSchemaDefinition) then 'anyOf'.concat(parent.items.indexOf(self).toString())
										else
											if parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!OneOfSchemaDefinition) then 'oneOf'.concat(parent.items.indexOf(self).toString())
											else  OclUndefined --- This case should not exist
											endif
										endif 
									endif	
									
								endif	
							else
								if parent.oclIsTypeOf(JSchemaMM!NotSchemaDefinition) then 'not'
								else
									if parent.oclIsTypeOf(JSchemaMM!IfSchemaDefinition) then 'if'
									else
										if parent.oclIsTypeOf(JSchemaMM!ThenSchemaDefinition) then 'then'
										else 
											if parent.oclIsTypeOf(JSchemaMM!ElseSchemaDefinition) then 'else'
											else 
												if parent.oclIsTypeOf(JSchemaMM!PropertyNamesSchemaDefinition) then 'propertyNames'
												else 
													if parent.oclIsTypeOf(JSchemaMM!ContainsSchemaDefinition) then 'contains'
													else 
														if parent.oclIsTypeOf(JSchemaMM!SchemaObjectDependenciesAdditionalPropertiesAnyOf1) then 'dependencies'.concat(parent.refImmediateComposite().refImmediateComposite().properties.indexOf(parent.refImmediateComposite()).toString())
														else OclUndefined ---- TODO  add other keywords pointing to Schema (check if are already all)
														endif 
													endif 
												endif
											endif
										endif
									endif
								endif
							endif
						endif
					endif
--				endif		
			endif
		endif 
	endif
endif;



-- TODO complete with all the containment pointing to Schema
helper context JSchemaMM!Schema def: getParentNode(): JSchemaMM!Schema=
let parent : OclAny = self.refImmediateComposite() in
if parent.oclIsTypeOf(JSchemaMM!JsonSchema) then OclUndefined --root
else
	if parent.oclIsTypeOf(JSchemaMM!KeySchemaPair) then
		if parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!DefinitionsSchemaDefinition) then OclUndefined -- other roots
		else
			--- parent.refImmediateComposite() is PropertiesSchemaDefinition or PatternPropertiesSchemaDefinition
			--- we return the enclosing schema of the PropertiesSchemaDefinition
			parent.refImmediateComposite().refImmediateComposite()
		endif
	else
		if parent.oclIsTypeOf(JSchemaMM!SchemaObjectAdditionalProperties) then OclUndefined -- other roots
		else
			if parent.oclIsTypeOf(JSchemaMM!AdditionalPropertiesSchemaDefinition) then parent.refImmediateComposite() -- we return the schema enclosing the AdditionalPropertiesSchemaDefinition
	        else 
	        	if parent.oclIsTypeOf(JSchemaMM!AdditionalItemsSchemaDefinition) then parent.refImmediateComposite() -- we return the schema enclosing the AdditionalItemsSchemaDefinition
	        	else 
--	        		if parent.oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition) then  parent.refImmediateComposite() -- we return the schema enclosing the ItemsSchemaDefinition
					if parent.oclIsTypeOf(JSchemaMM!ItemsAnyOf1) then  parent.refImmediateComposite().refImmediateComposite() -- we return the schema enclosing the ItemsSchemaDefinition 
	        		else 
	        			if parent.oclIsTypeOf(JSchemaMM!SchemaArray) then
--							if parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!ItemsSchemaDefinition) then parent.refImmediateComposite().refImmediateComposite() --we return the schema enclosing the ItemsSchemaDefinition that encloses the schema array
							if parent.refImmediateComposite().oclIsTypeOf(JSchemaMM!ItemsAnyOf2) then parent.refImmediateComposite().refImmediateComposite().refImmediateComposite()  --we return the schema enclosing the ItemsSchemaDefinition that encloses the schema array
							else OclUndefined --add AllOfSchemaDefinition,  AnyOfSchemaDefinition, OneOfSchemaDefinition 
							endif	
						else OclUndefined -- -- TODO to be completed with the containmentes pointing to Schema
						endif
					endif
				endif
			endif
		endif
	endif	
endif;
	
helper context JSchemaMM!Schema def: buildEClassname(): String=
let localName : String = self.getKey().toCamelCase() in
let parentNode: JSchemaMM!Schema = self.getParentNode() in
if not parentNode.oclIsUndefined() then parentNode.buildEClassname().concat(localName)
else localName
endif; 

--- TODO verify the refactor with the new anyOf
helper context JSchemaMM!TypeSchemaDefinition def: findSimpleType() :String=
	if not self.anyOf.oclIsTypeOf(JSchemaMM!TypeAnyOf1)
	then self.anyOf.type
	else OclUndefined
	endif;
--	if not self.typeAnyOf1.oclIsUndefined()
--	then self.typeAnyOf1
--	else OclUndefined
--	endif;


--- NEW 

helper context JSchemaMM!Schema def: buildPropertiesAbstractClassName(): String=
	self.buildEClassname().concat('Properties'); 

----"type" is present and it is a simple type (not an array of types)
helper context JSchemaMM!ObjectSchema def: hasSimpleType: Boolean=
	if not self.type.oclIsUndefined()
	then  self.type.oclIsTypeOf(JSchemaMM!TypeAnyOf1) 
	else false
	endif;

----"type" is present and ( "type": "integer" or "type": "number" or "type": "boolean" or "type": "string")
helper context JSchemaMM!ObjectSchema def: hasSimpleTypeScalar: Boolean=
	if not self.type.oclIsUndefined()
	then if self.type.oclIsTypeOf(JSchemaMM!TypeAnyOf1) 
		then self.type.type = #"\"string\"" or self.type.type = #"\"integer\"" or self.type.type = #"\"number\"" or self.type.type= #"\"boolean\""
		else false
		endif
	else false
	endif;

----"type" is present and  "type": "object"  
helper context JSchemaMM!ObjectSchema def: hasSimpleTypeObject: Boolean=
	if not self.type.oclIsUndefined()
	then if self.type.oclIsTypeOf(JSchemaMM!TypeAnyOf1) 
		then self.type.type = #"\"object\"" 
		else false
		endif
	else false
	endif;

----"type" is present and  "type": "array"  
helper context JSchemaMM!ObjectSchema def: hasSimpleTypeArray: Boolean=
	if not self.type.oclIsUndefined()
	then if self.type.oclIsTypeOf(JSchemaMM!TypeAnyOf1) 
		then self.type.type = #"\"array\"" 
		else false
		endif
	else false
	endif;


----"type" is present and  "type": "null"  
helper context JSchemaMM!ObjectSchema def: hasSimpleTypeNull: Boolean=
	if not self.type.oclIsUndefined()
	then if self.type.oclIsTypeOf(JSchemaMM!TypeAnyOf1) 
		then self.type.type = #"\"null\"" 
		else false
		endif
	else false
	endif;

----"type" is present and  is and array of types : "type":[...]
helper context JSchemaMM!ObjectSchema def: hasArrayOfTypes: Boolean=
	if not self.type.oclIsUndefined()
	then self.type.oclIsTypeOf(JSchemaMM!TypeAnyOf2) 
	else false
	endif;

helper def: isScalar(simpleType:String) : Boolean =
	simpleType = #"\"string\"" or simpleType = #"\"integer\"" or simpleType = #"\"number\"" or  simpleType = #"\"boolean\"";
------------




 


helper context JSchemaMM!TypeSchemaDefinition def: getEDataType() : Ecore!EDataType=
	let simpleType : String = self.findSimpleType()
	in
		if simpleType.oclIsUndefined()
		then OclUndefined
		else thisModule.scalarTypeMapping.get(simpleType)
		endif;






helper context String def: stripFirstAndLast() : String=
self.substring(2, self.size()-1);	

helper context String def : toCamelCase() : String=
	self.substring(1, 1).toUpperCase() + self.substring(2,self.size());	



---------- OCL helpers

helper def : createOclFile() : OclAny=
	"#native"!"at::jku::bise::oclgenerator::OclGenerator".refInvokeStaticOperation('createOcl',Sequence{thisModule.oclFileUri, thisModule.nsURI, thisModule.packageName});

helper def : appendMinimumConstraint(packageName: String, contextClass: String, inv:String, minimum: Real, propertyName : String ) : OclAny=
	"#native"!"at::jku::bise::oclgenerator::OclGenerator".refInvokeStaticOperation('appendMinimumConstraint',Sequence{thisModule.oclFileUri, packageName, contextClass, inv, minimum, propertyName});

helper def : appendRequiredInPropertiesConstraint(packageName: String, contextClass: String, inv:String, requiredProperty: String,   requiredClassType : String, propertyName : String) : OclAny=
	"#native"!"at::jku::bise::oclgenerator::OclGenerator".refInvokeStaticOperation('appendRequiredInPropertiesConstraint',Sequence{thisModule.oclFileUri, packageName, contextClass, inv, requiredProperty, requiredClassType, propertyName});
	
	
helper def : appendRegexInPatternPropertiesConstraint(packageName: String, contextClass: String, inv:String, regex : String,  propertyName : String): OclAny=
	"#native"!"at::jku::bise::oclgenerator::OclGenerator".refInvokeStaticOperation('appendRegexInPatternPropertiesConstraint',Sequence{thisModule.oclFileUri, packageName, contextClass, inv, regex, propertyName});
	
helper  def : endPackage() : OclAny=
	"#native"!"at::jku::bise::oclgenerator::OclGenerator".refInvokeStaticOperation('endPackage',Sequence{thisModule.oclFileUri});
	
