-- @atlcompiler emftvm
-- @nsURI JSchemaMM=http://at.jku.bise/jsonMetaschemaMM
-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
-- @nsURI JsonGrammarMM=http://at.jku.bise/jsongrammar/1.0
-- @nsURI RelatedSchemasMM=http://at.jku.bise/relatedSchemas
-- @nsURI CompleteOclMM=http://www.eclipse.org/ocl/2015/CompleteOCLCS


module JsonSchema2EcoreOpt;
--create ecoreM : Ecore, jsonGrammar : JsonGrammarMM, jschemaOut: JSchemaMM from jschema : JSchemaMM;
create ecoreM : Ecore, jsonGrammar : JsonGrammarMM, relatedSchemas : RelatedSchemasMM   from jschema : JSchemaMM ;


uses JsonSchema2EcoreOptUtils;

helper def: rootEPackage : Ecore!EPackage = OclUndefined;
helper def: jsonDocumentStarter:String='jsonDocumentStarter';
helper def: packageName : String = thisModule.retrieveRootSchema().eResource().getURI().trimFileExtension().lastSegment();
helper def: nsURI : String = 'http://jku.bise.at/' + thisModule.packageName;

--helper def: oclFileName:String  =thisModule.retrieveRootSchema().eResource().getURI().trimFileExtension().path().concat('-opt');
helper def: oclFileUri: OclAny = thisModule.retrieveRootSchema().eResource().getURI().trimFileExtension();

rule JsonSchemaToEPackage {
	from
		jsonSchema : JSchemaMM!JsonSchema
	to 
		ePackage : Ecore!EPackage (
			name <- thisModule.packageName,
			nsPrefix <- thisModule.packageName,
			nsURI <- thisModule.nsURI
		),
		jsonGrammar : JsonGrammarMM!JsonGrammar (
			nsURI <- thisModule.nsURI,
			detailedGrammar <- detailedGrammar
		), 
		detailedGrammar : JsonGrammarMM!DetailedGrammar (),
		relatedSchemas : RelatedSchemasMM!RelatedSchemas()
	do {
		---------- Create ocl file -----
		thisModule.createOclFile();
	}
}

---------TODO Map case when the root is a boolean schema
--rule mapRootBooleanSchemaTrueToJsonDocument{
--	from booleanSchema: JSchemaMM!BooleanSchema(booleanSchema.refImmediateComposite().oclIsTypeOf(JSchemaMM!JsonSchema) and booleanSchema.value=true)
--	to jsonDocument: JSchemaMM!JsonDocument
--}

abstract rule mapSchemaToEClass{ 
	from schema : JSchemaMM!Schema
	using {
		eClassName:String = schema.buildEClassname(); ---we don't need to concat 'Items' because the class is being generated from the schema inside items. So the buildEClassname has alredy 'Items' concatenated
	}
	to 
		eClass : Ecore!EClass (
			name<- eClassName,
			eStructuralFeatures <- eClass.eStructuralFeatures 
				-> union (	if schema.isInAdditionalProperties()  or schema.isKeySchemaPairInPatternProperties()
							then Sequence{thisModule.createKeyEAttribute('key')}
							else Sequence{}
							endif)
		)
	do{
		if(schema.isKeySchemaPairInProperties() or schema.isKeySchemaPairInPatternProperties() ){
			eClass.eSuperTypes <-  Sequence{thisModule.createAbstractEClass(schema.refImmediateComposite().refImmediateComposite().refImmediateComposite().buildPropertiesAbstractClassName())};
			if(schema.isKeySchemaPairInPatternProperties()){
				eClass.eAnnotations <- Sequence{thisModule.createPatternPropertiesAnnotation(schema.refImmediateComposite().key)};
				eClass.eOperations <- Sequence{thisModule.createPatternPropertiesMatcher(schema.refImmediateComposite().key), 
												thisModule.createKeyPatternPropertiesMatcher(schema.refImmediateComposite().key),
												thisModule.createValidatorOnPatternProperties(schema.refImmediateComposite().refImmediateComposite().findPatternPropertiesKeysOtherThen(schema.refImmediateComposite().key)),
												thisModule.createValidatorOnProperties(schema.refImmediateComposite().refImmediateComposite().refImmediateComposite().findPropertiesKeys())
										};
				thisModule.appendValidatorOnProperties(thisModule.packageName, eClassName, eClassName);
				thisModule.appendValidatorOnPatternProperties(thisModule.packageName, eClassName, eClassName);
--				eClass.eOperations <- Sequence{thisModule.createPatternPropertiesMatcher(schema.refImmediateComposite().key)};
			}	
		}else if(schema.refImmediateComposite().oclIsTypeOf(JSchemaMM!AdditionalPropertiesSchemaDefinition)){ ----- schema is in AdditionalProperties
			eClass.eSuperTypes <-  Sequence{thisModule.createAbstractEClass(schema.refImmediateComposite().refImmediateComposite().buildPropertiesAbstractClassName() )};
			eClass.eAnnotations <- Sequence{thisModule.createAdditionalPropertiesAnnotation()};
			eClass.eOperations <- Sequence{thisModule.createValidatorOnPatternProperties(schema.refImmediateComposite().refImmediateComposite().findPatternPropertiesKeys()),
											thisModule.createValidatorOnProperties(schema.refImmediateComposite().refImmediateComposite().findPropertiesKeys())};
			
			thisModule.appendValidatorOnProperties(thisModule.packageName, eClassName, eClassName);
			thisModule.appendValidatorOnPatternProperties(thisModule.packageName, eClassName, eClassName);								
			
		}
		if(schema.isRoot()){
			thisModule.jsonGrammarRoot().detailedGrammar.rootEClass <- schema;
		}	
	}	
} 

--rule createAdditionalPropertiesValidatorOnPatternProperties(properties : Sequence(String), patterns: Sequence(String)){
	
rule createValidatorOnProperties(properties: Sequence(String)){
	to
		eOperation:Ecore!EOperation(
			name<- 'validateKeyOnDefinedProperties',
			ordered <- false,
			unique <-false,
			lowerBound <- 1,
			upperBound <- 1,
			eType <- Ecore!EString, --- the additional property key can not be equals to the defined property
			eAnnotations <- Sequence{eAnnotation}
		),
		eAnnotation: Ecore!EAnnotation(
			source <- 'http://www.eclipse.org/emf/2002/GenModel',
			details <- Sequence{entrySet}
		),
		entrySet:Ecore!EStringToStringMapEntry(
			key <- 'body',
			value <-  thisModule.createBodyForValidateKeyOnDefinedProperties(properties)
		)
	do{
		eOperation;
	}
		
}	
	
	
rule createValidatorOnPatternProperties(patterns: Sequence(String)){
	to
		eOperation:Ecore!EOperation(
			name<- 'validateKeyOnDefinedPatternProperties',
			ordered <- false,
			unique <-false,
			lowerBound <- 1,
			upperBound <- 1,
			eType <- Ecore!EString, --- the additional property key can not match the defined pattern property
			eAnnotations <- Sequence{eAnnotation}
		),
		eAnnotation: Ecore!EAnnotation(
			source <- 'http://www.eclipse.org/emf/2002/GenModel',
			details <- Sequence{entrySet}
		),
		entrySet:Ecore!EStringToStringMapEntry(
			key <- 'body',
			value <-  thisModule.createBodyForValidateKeyOnDefinedPatternProperties(patterns)
		)
	do{
		eOperation;
	}
}

rule createAdditionalPropertiesAnnotation(){
	to
		eAnnotation: Ecore!EAnnotation(
			details <- Sequence{entrySet}
		),
		entrySet:Ecore!EStringToStringMapEntry(
			key <- 'AdditionalProperties',
			value <- 'true'
		)
	do{
		eAnnotation;
	}	
}

rule createKeyPatternPropertiesMatcher(pattern : String){
	to
		eOperation:Ecore!EOperation(
			name<- 'find',
			ordered <- false,
			unique <-false,
			lowerBound <- 1,
			upperBound <- 1,
			eType <- Ecore!EBoolean,
			eAnnotations <- Sequence{eAnnotation}
		),
		eAnnotation: Ecore!EAnnotation(
			source <- 'http://www.eclipse.org/emf/2002/GenModel',
			details <- Sequence{entrySet}
		),
		entrySet:Ecore!EStringToStringMapEntry(
			key <- 'body',
			value <- 'java.util.regex.Pattern  p = java.util.regex.Pattern.compile('+pattern+');\njava.util.regex.Matcher m = p.matcher(this.key);\nreturn m.find();'
		)
		
	do{
		eOperation;
	}	
}

rule createPatternPropertiesMatcher(pattern : String){
	to
		eOperation:Ecore!EOperation(
			name<- 'find',
			ordered <- false,
			unique <-false,
			lowerBound <- 1,
			upperBound <- 1,
			eType <- Ecore!EBoolean,
			eParameters <- Sequence{eParameter},
			eAnnotations <- Sequence{eAnnotation}
		),
		eParameter:Ecore!EParameter(
			name<-'toBeEvaluated',
			eType <- Ecore!EString,
			lowerBound <- 1,
			upperBound <- 1
		),
		eAnnotation: Ecore!EAnnotation(
			source <- 'http://www.eclipse.org/emf/2002/GenModel',
			details <- Sequence{entrySet}
		),
		entrySet:Ecore!EStringToStringMapEntry(
			key <- 'body',
			value <- 'java.util.regex.Pattern  p = java.util.regex.Pattern.compile('+pattern+');\njava.util.regex.Matcher m = p.matcher(toBeEvaluated);\nreturn m.find();'
		)
		
	do{
		eOperation;
	}	
}

rule createPatternPropertiesAnnotation(pattern : String){
	to
		eAnnotation: Ecore!EAnnotation(
			details <- Sequence{entrySet1, entrySet2}
		),
		entrySet1:Ecore!EStringToStringMapEntry(
			key <- 'PatternProperties',
			value <- 'true'
		),
		entrySet2:Ecore!EStringToStringMapEntry(
			key <- 'pattern',
			value <- pattern
		)
		
	do{
		eAnnotation;
	}	
}

rule mapBooleanSchemaToEClass extends mapSchemaToEClass{
--	from schema: JSchemaMM!BooleanSchema(not schema.refImmediateComposite().oclIsTypeOf(JSchemaMM!JsonSchema) and schema.value=true)
	from schema: JSchemaMM!BooleanSchema( schema.value=true)
	to 
		eClass : Ecore!EClass
	do{ --- we have to assign eStructuralFeatures in the imperative block, because the union wouldn't work, if a part if different features are added from the two targets of the abstract and concrete rule
--		eClass.eStructuralFeatures <- eClass.eStructuralFeatures -> union(Sequence{thisModule.createContainmentToJsonDocument(schema.getKey(), schema.isKeySchemaPairInProperties())});
		eClass.eStructuralFeatures <- eClass.eStructuralFeatures -> union(Sequence{thisModule.createContainmentToJsonDocument(schema.getKey(), schema.needsKeyword())});
	}
}
			
rule mapObjectSchemaToEClass extends mapSchemaToEClass{
	from schema : JSchemaMM!ObjectSchema
	to 
		eClass : Ecore!EClass
	do{ 
		if(not schema.ref.oclIsUndefined()){ --- "$ref" is present
			eClass.eStructuralFeatures <- eClass.eStructuralFeatures -> union(Sequence{schema.ref});
		}else if (not schema.enum.oclIsUndefined()){ --- "enum" is present
			
			----- TODO implement
			
		}else if (schema.type.oclIsUndefined()){  ---- "type" is missing
			eClass.eStructuralFeatures <- eClass.eStructuralFeatures -> union(Sequence{thisModule.createContainmentForArrayOfTypes(schema, eClass, Sequence{#"\"string\"", #"\"integer\"", #"\"number\"", #"\"boolean\"", #"\"object\"", #"\"array\"", #"\"null\""} )});
		}else if(schema.hasSimpleType()){
			thisModule.mapSimpleTypeToEStructuralFeatures(schema, eClass , schema.type.anyOf.type, eClass.name); 
		}else if(schema.hasArrayOfTypes){ ----"type" is present and  is and array of "types" : "type":[...]
			eClass.eStructuralFeatures <- eClass.eStructuralFeatures -> union(Sequence{thisModule.createContainmentForArrayOfTypes(schema, eClass, schema.type.anyOf.items )});
		}
	}
}



---- schema objectSchema having the "type" keyword
---- eClass  -----  EClass that is mapped to objectSchema having the "type" keyword
---- simpleType:JSchemaMM!SimpleTypes, ----- the simple type we are mapping to the eStructuralFeature
----- eClassName eClass.name. It could be thant eClass.name is not set yet
rule mapSimpleTypeToEStructuralFeatures(schema : JSchemaMM!ObjectSchema, eClass : Ecore!EClass, simpleType:JSchemaMM!SimpleTypes, eClassName:String)  {
	
	do{
		if (simpleType = #"\"string\"" or simpleType = #"\"integer\"" or simpleType = #"\"number\"" or  simpleType = #"\"boolean\""){ 
--			eClass.eStructuralFeatures  <- eClass.eStructuralFeatures -> union(Sequence{thisModule.mapScalarTypeToEAttribute(schema.getKey(),thisModule.scalarTypeMapping.get(simpleType), schema.isKeySchemaPairInProperties())});
			eClass.eStructuralFeatures  <- eClass.eStructuralFeatures -> union(Sequence{thisModule.mapScalarTypeToEAttribute(schema.getKey(),thisModule.scalarTypeMapping.get(simpleType), schema.needsKeyword())});
		}else if(simpleType = #"\"object\"" ){
--			eClass.eStructuralFeatures <- eClass.eStructuralFeatures-> union(Sequence{thisModule.createPropertiesContainment(schema.getKey(), schema.buildPropertiesAbstractClassName(), schema.isKeySchemaPairInProperties())});
			eClass.eStructuralFeatures <- eClass.eStructuralFeatures-> union(Sequence{thisModule.createPropertiesContainment(schema.getKey(), schema.buildPropertiesAbstractClassName(), schema.needsKeyword())});
			if(schema.additionalProperties.oclIsUndefined()){ ------ the keyword "additionalProperties" is missing
--				thisModule.createDefaultAdditionalPropertiesEClass(schema.buildEClassname());
				thisModule.createDefaultAdditionalPropertiesEClass(schema.buildEClassname(), schema.findPropertiesKeys(),  schema.findPatternPropertiesKeys());
			}
		}else if (simpleType = #"\"array\""){  
			if(schema.items.oclIsUndefined()) {---the keyword "items" is missing
--				eClass.eStructuralFeatures <- eClass.eStructuralFeatures -> union(Sequence{thisModule.createEClassForMissingItems(schema.buildEClassname(), schema.getKey(), schema.isKeySchemaPairInProperties())});
				eClass.eStructuralFeatures <- eClass.eStructuralFeatures -> union(Sequence{thisModule.createEClassForMissingItems(schema.buildEClassname(), schema.getKey(), schema.needsKeyword())});
			}else if(schema.items.anyOf.oclIsTypeOf(JSchemaMM!ItemsAnyOf1)){ ---- the keyword "items" is present and is not a tuple
				eClass.eStructuralFeatures <- eClass.eStructuralFeatures -> union(Sequence{schema.items.anyOf});
			}else{ ---- the keyword "items" is present and is a tuple 
				
				-----TODO Implement
				
			}
		}else if(simpleType = #"\"null\""){ ------- "type" is present and "type": "null"
--			eClass.eStructuralFeatures  <- eClass.eStructuralFeatures -> union(Sequence{thisModule.mapNullTypeToEReference(schema.getKey(), schema.isKeySchemaPairInProperties())});
			eClass.eStructuralFeatures  <- eClass.eStructuralFeatures -> union(Sequence{thisModule.mapNullTypeToEReference(schema.getKey(), schema.needsKeyword())});
		}
	}
}

lazy rule mapNullTypeToEReference{
	from name : String, addToKeywords:Boolean
	to 
		eAttribute : Ecore!EReference (
			name<-name,
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1,
			eType <- JSchemaMM!NullValue
		)
	do{ 
		if(addToKeywords){ 
			thisModule.keywords <- thisModule.keywords->union(Sequence{eAttribute}) ;
		}
		eAttribute;
	}
}

lazy rule mapScalarTypeToEAttribute{
	from name : String, eType:Ecore!EDataType, addToKeywords:Boolean
	to 
		eAttribute : Ecore!EAttribute(
			name<-name,
			lowerBound <-1,
			upperBound <- 1,
			eType <- eType
		)
	do{ 
		if(addToKeywords){ 
			thisModule.keywords <- thisModule.keywords->union(Sequence{eAttribute}) ;
		}
		eAttribute;
	}
}

lazy rule createPropertiesContainment{
	from referenceName:String, propertiesEClassName:String, addToKeywords:Boolean
	to 
		eReference :Ecore!EReference ( 
			name <- referenceName,
			eType <- thisModule.createAbstractEClass(propertiesEClassName),
			containment <- true,
			lowerBound <- 0,
			upperBound <- -1
			
		)
	do {
		thisModule.curlyBracesEReferences <- thisModule.curlyBracesEReferences->union(Sequence{eReference}); 
		if(addToKeywords){ 
			thisModule.keywords <- thisModule.keywords->union(Sequence{eReference}) ;
		}
		eReference;
	}	
}

lazy rule createDefaultAdditionalPropertiesEClass  {
	from schemaBuildedClassName:String, properties : Sequence(String), patterns : Sequence(String)
	using {
		eClassName:String = schemaBuildedClassName.concat('AdditionalProperties');
	}
	to
		eClass : Ecore!EClass (
--		 	name <-	schemaBuildedClassName.concat('AdditionalProperties'),
			name <-	eClassName,
			eStructuralFeatures <- Set{thisModule.createKeyEAttribute('key'), thisModule.createContainmentToJsonDocument('additionalProperties',false)}.flatten(),
			eSuperTypes <-  Set{thisModule.createAbstractEClass(schemaBuildedClassName.concat('Properties'))},
			eAnnotations <- Sequence{thisModule.createAdditionalPropertiesAnnotation()},
			eOperations <- Sequence{thisModule.createValidatorOnPatternProperties(patterns),thisModule.createValidatorOnProperties(properties)}
		)
	do{
		thisModule.appendValidatorOnProperties(thisModule.packageName, eClassName, eClassName);
		thisModule.appendValidatorOnPatternProperties(thisModule.packageName, eClassName, eClassName);
		eClass;
	}	
}

rule mapItemsAnyOf1ToContainment{
	from itemsAnyOf1:JSchemaMM!ItemsAnyOf1
	to 
		eReference :Ecore!EReference ( 
			name <- itemsAnyOf1.refImmediateComposite().refImmediateComposite().getKey(),
			eType <- itemsAnyOf1.anyOf1,
			containment <- true,
			lowerBound <- 0,
			upperBound <- -1
		)
	do{
		thisModule.keywords <- thisModule.keywords->union(Sequence{eReference});
		thisModule.bracketsEReferences <- thisModule.bracketsEReferences->union(Sequence{eReference});
	}
}

lazy rule createEClassForMissingItems{
	from enclosingEClassName:String, referenceName:String, addToKeywords:Boolean
	to 
		eClass:  Ecore!EClass (
			name <- enclosingEClassName.concat('Items'),
			eStructuralFeatures <- Sequence{thisModule.createContainmentToJsonDocument(('items'),false)}
		),
		eReference :Ecore!EReference ( 
			name <- referenceName,
			eType <- eClass,
			containment <- true,
			lowerBound <- 0,
			upperBound <- -1
		)
	do{
		if(addToKeywords){
			thisModule.keywords <- thisModule.keywords->union(Sequence{eReference});
		}
		thisModule.bracketsEReferences <- thisModule.bracketsEReferences->union(Sequence{eReference});
		eReference;
	}
	
}


lazy rule createContainmentForArrayOfTypes {
	from objectSchema : JSchemaMM!ObjectSchema, enclosingEClass : Ecore!EClass ,  sympleTypes:Sequence(JSchemaMM!SimpleTypes)
	to 
		eReference :Ecore!EReference ( 
			name <- objectSchema.getKey(),
			eType <- thisModule.createAbstractEClass(enclosingEClass.name),
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1
		)
	do{
		for (sympleType in sympleTypes){ 
				thisModule.createEClassForTypeInArrayOfTypes(objectSchema, enclosingEClass , sympleType);
			}
		eReference;
	}
}


----- objectSchema: objectSchema having the type keyword as arrya of types.  e.g. "type":["string", "number"]
----- enclosingEClass:  name of the EClass that is mapped to objectSchema
----- simpleType: current simpleType in the array of types which we are creating the EClass for
rule createEClassForTypeInArrayOfTypes(objectSchema : JSchemaMM!ObjectSchema, enclosingEClass : Ecore!EClass , simpleType:JSchemaMM!SimpleTypes){
	using {
		eClassName:String = enclosingEClass.name.concat('Type').concat(thisModule.typeToStringMapping.get(simpleType).toCamelCase());
	}
	to 
		eClass : Ecore!EClass (
			name <- eClassName,
			eAnnotations <- Sequence{thisModule.createArrayOfTypesAnnotation(simpleType)}
		)
	do{
		thisModule.mapSimpleTypeToEStructuralFeatures(objectSchema, eClass , simpleType, eClassName);
--		eClass.eSuperTypes  <- Sequence{enclosingEClass};
		eClass.eSuperTypes  <- Sequence{thisModule.createAbstractEClass(enclosingEClass.name)};
	}
}	

rule createArrayOfTypesAnnotation(simpleType:JSchemaMM!SimpleTypes){
	to
		eAnnotation: Ecore!EAnnotation(
			details <- Sequence{entrySet}
		),
		entrySet:Ecore!EStringToStringMapEntry(
			key <- 'ArrayOfTypes',
			value <- simpleType.toString().substring(2, simpleType.toString().size()).stripFirstAndLast()
		)
	do{
		eAnnotation;
	}	
}

--rule createKeyEAttribute(keyName:String){
lazy rule createKeyEAttribute{
	from keyName:String 
	to 
		key : Ecore!EAttribute(
			name<- keyName,
			lowerBound <- 1,
			upperBound <- 1,
			eType <- Ecore!EString
	) 
	do {
		thisModule.keyValues <- thisModule.keyValues->union(Sequence{key});
		key;
	}
}

lazy rule  createContainmentToJsonDocument{
	from containmentName:String,  addToKeywords:Boolean
	to
		containment: Ecore!EReference(
			name <- containmentName,
			containment <- true,
			lowerBound <- 1,
			upperBound <- 1,
			eType <- JSchemaMM!JsonDocument
		)
	do{ 
		if(addToKeywords){ 
			thisModule.keywords <- thisModule.keywords->union(Sequence{containment});
		}
		containment;
	}
}

---------------------------------------------------------------------
---------------------------------------------------------------------
-----------------------------------------------------------------------

---- TODO manage jsonPointerSchema.hasArrayOfTypes
rule mapRefSchemaToEReference{
	from refSchemaDefinition: JSchemaMM!RefSchemaDefinition 
	using {
        jsonPointerSchema : JSchemaMM!Schema = refSchemaDefinition.findSchemaByJsonPointer();
        isJsonPointerSchemaTypeArray : Boolean = 	if jsonPointerSchema.oclIsTypeOf(JSchemaMM!ObjectSchema) then 
--														if jsonPointerSchema.keywordDefinition->select(keywordDefinition | keywordDefinition.oclIsTypeOf(JSchemaMM!TypeSchemaDefinition)).first().findSimpleType() = #"\"array\""
														if jsonPointerSchema.hasSimpleTypeArray()
														then true else false endif
													else false
													endif ;
	} to		
		eReference :Ecore!EReference ( 
			name <- refSchemaDefinition.refImmediateComposite().getKey(),
--			eType <- refSchemaDefinition.findSchemaByJsonPointer().oclAsType(JSchemaMM!ObjectSchema),
			eType <- refSchemaDefinition.findSchemaByJsonPointer(),
			containment <- true, 
			lowerBound <- 1,
			upperBound <- 1			
		)
	do {
		if (isJsonPointerSchemaTypeArray){ 
			thisModule.bracketsEReferences <- thisModule.bracketsEReferences->union(Sequence{eReference});
--		}if(refSchemaDefinition.refImmediateComposite().isKeySchemaPairInProperties()) { 
		}if(refSchemaDefinition.refImmediateComposite().needsKeyword()) { 
			thisModule.keywords <- thisModule.keywords->union(Sequence{eReference}) ;
		}
	}	
}

--- This is the old :unique lazy rule createPropertiesEClass{ we change the name because we reuse for more 'properties'
unique lazy rule createAbstractEClass{
	from name:String
	to
		eClass : Ecore!EClass (
			name <- name.concat('Abstract'),
			abstract<- true
		)	
}

----------------------- RELATED SCHEMAS

rule mapAllOf{
	from allOfSchemaDefinition:JSchemaMM!AllOfSchemaDefinition
	to 
		allOf:RelatedSchemasMM!AllOf(
			allOfs<-allOfSchemaDefinition.allOf.items
		)
	do	{
		thisModule.createRelatedEnclosingSchema(allOfSchemaDefinition.refImmediateComposite().resolve()).allOf<-allOf;
		allOf;
	}
}

rule mapAnyOf{
	from anyOfSchemaDefinition:JSchemaMM!AnyOfSchemaDefinition
	to 
		anyOf:RelatedSchemasMM!AnyOf(
			anyOfs<-anyOfSchemaDefinition.anyOf.items
		)
	do	{
		thisModule.createRelatedEnclosingSchema(anyOfSchemaDefinition.refImmediateComposite().resolve()).anyOf<-anyOf;
		anyOf;
	}
}

rule mapOneOf{
	from oneOfSchemaDefinition:JSchemaMM!OneOfSchemaDefinition
	to 
		oneOf:RelatedSchemasMM!OneOf(
			oneOfs<-oneOfSchemaDefinition.oneOf.items
		)
	do	{
		thisModule.createRelatedEnclosingSchema(oneOfSchemaDefinition.refImmediateComposite().resolve()).oneOf<-oneOf;
		oneOf;
	}
}

rule mapNot{
	from notSchemaDefinition:JSchemaMM!NotSchemaDefinition
	to 
		notEClass:RelatedSchemasMM!Not(
			not<-notSchemaDefinition.not
		)
	do	{
		thisModule.createRelatedEnclosingSchema(notSchemaDefinition.refImmediateComposite().resolve()).not<-notEClass;
		notEClass;
	}
}

rule mapIf{
	from ifSchemaDefinition:JSchemaMM!IfSchemaDefinition
	do	{
		thisModule.createRelatedIfThenElse(ifSchemaDefinition.refImmediateComposite().resolve()).if<-ifSchemaDefinition.if.resolve();
	}
}

rule mapThen{
	from thenSchemaDefinition:JSchemaMM!ThenSchemaDefinition
	do	{
		thisModule.createRelatedIfThenElse(thenSchemaDefinition.refImmediateComposite().resolve()).then<-thenSchemaDefinition.then.resolve();
	}
}

rule mapElse{
	from elseSchemaDefinition:JSchemaMM!ElseSchemaDefinition
	do	{
		thisModule.createRelatedIfThenElse(elseSchemaDefinition.refImmediateComposite().resolve()).else<-elseSchemaDefinition.else.resolve();
	}
}


unique lazy rule createRelatedIfThenElse{
	from eClass :Ecore!EClass
	to
		ifThenElse:RelatedSchemasMM!IfThenElse(
		)
	do{
		thisModule.createRelatedEnclosingSchema(eClass).ifThenElse<-ifThenElse;
		ifThenElse;
	}	
}

unique lazy rule createRelatedEnclosingSchema{
	from eClass :Ecore!EClass
	to
		enclosingSchema: RelatedSchemasMM!EnclosingSchema(
			enclosingSchema<-eClass
		)  
	do{
--		thisModule.relatedSchemasRoot().enclosingschemas<-thisModule.relatedSchemasRoot().enclosingschemas->union(Sequence{enclosingSchema});
		thisModule.enclosingSchemas <- thisModule.enclosingSchemas ->union(Sequence{enclosingSchema});
		enclosingSchema;
	}	
	
}


-------------------- OCL Generation --------------------------------

lazy rule minimumConstraintToOcl {
	from minimumSchemaDefinition : JSchemaMM!MinimumSchemaDefinition(minimumSchemaDefinition.refImmediateComposite().hasTypeNumeric())
	using {
		enclosingSchema : JSchemaMM!ObjectSchema = minimumSchemaDefinition.refImmediateComposite();
	}
	do {
--		thisModule.appendMinimumConstraint(thisModule.packageName, enclosingSchema.resolve().name, enclosingSchema.resolve().name+'Minimum', minimumSchemaDefinition.minimum, enclosingSchema.getKey());
		if(enclosingSchema.hasSimpleType()){ ---- we are sure it is numeric because of hasTypeNumeric()
			thisModule.appendMinimumConstraint(thisModule.packageName, enclosingSchema.resolve().name, enclosingSchema.resolve().name+'Minimum', minimumSchemaDefinition.minimum, enclosingSchema.getKey());
		}else{ 
			if(enclosingSchema.hasTypeInteger()){ 
				thisModule.appendMinimumConstraint(thisModule.packageName, enclosingSchema.resolve().name.concat('TypeInteger'), enclosingSchema.resolve().name+'Minimum', minimumSchemaDefinition.minimum, enclosingSchema.getKey());
			}
			if(enclosingSchema.hasTypeNumber()){ 
				thisModule.appendMinimumConstraint(thisModule.packageName, enclosingSchema.resolve().name.concat('TypeNumber'), enclosingSchema.resolve().name+'Minimum', minimumSchemaDefinition.minimum, enclosingSchema.getKey());
			}
		}
		
	}	
}


lazy rule requiredInPropertiesToOcl{
	from requiredSchemaDefinition : JSchemaMM!RequiredSchemaDefinition
	using {
		enclosingSchema : JSchemaMM!ObjectSchema = requiredSchemaDefinition.refImmediateComposite();
		required : Sequence(String) = requiredSchemaDefinition.required.values;
		propertyName : String = enclosingSchema.getKey();
		
		inPropertiesRequiredKeySchemaPairs : Sequence(JSchemaMM!KeySchemaPair)= 
			let propertiesSchemaDefinitions : Sequence(JSchemaMM!PropertiesSchemaDefinition) = 
				enclosingSchema.keywordDefinition->select(k|k.oclIsTypeOf(JSchemaMM!PropertiesSchemaDefinition))
			in
				if propertiesSchemaDefinitions.isEmpty() then Sequence{}
				else
					propertiesSchemaDefinitions->first().keySchemaPairs->select(ksp| required->includes(ksp.key.stripFirstAndLast()))
				endif;
				
	
		inPropertiesRequiredSchemas : Sequence(JSchemaMM!Schema)= inPropertiesRequiredKeySchemaPairs->collect(ksp | ksp.value);	
		inPropertiesRequiredKeys : Sequence(String)= inPropertiesRequiredKeySchemaPairs->collect(ksp | ksp.key);	
		requiredNotInProperties:Sequence(String) = required->excludingAll(inPropertiesRequiredKeys);
	}
	do{
		for (p in inPropertiesRequiredKeySchemaPairs) {
--			thisModule.appendRequiredInPropertiesConstraint(thisModule.packageName+'::'+enclosingSchema.buildEClassname(), enclosingSchema.buildEClassname()+'Required', p.key.stripFirstAndLast(), p.value.buildEClassname());
			thisModule.appendRequiredInPropertiesConstraint(thisModule.packageName, enclosingSchema.resolve().name,  enclosingSchema.resolve().name+'Required', p.key.stripFirstAndLast(), p.value.resolve().name, propertyName);
		}
	}
}

lazy rule patternPropertiesRegexToOcl{
	---- keySchemaPair isInPatternProperties
	from keySchemaPair: JSchemaMM!KeySchemaPair(keySchemaPair.refImmediateComposite().oclIsTypeOf(JSchemaMM!PatternPropertiesSchemaDefinition))
	using {
		regex:String = keySchemaPair.key.stripFirstAndLast();
		contextClass:String = keySchemaPair.value.resolve().name ;
		inv : String = contextClass+keySchemaPair.value.getKey();
		propertyName : String = 'key';
	}
	do{
		
		thisModule.appendRegexInPatternPropertiesConstraint(thisModule.packageName,contextClass, inv, regex, propertyName);
	}
}



endpoint rule CompletEPackageAndJsonGrammar() {
	do {
		thisModule.packageRoot().eClassifiers <- thisModule.allEClass();	
		---- Json Grammar
		thisModule.jsonGrammarRoot().detailedGrammar.keywords <- thisModule.keywords;		
		thisModule.jsonGrammarRoot().detailedGrammar.curlyBracesReferences <- thisModule.curlyBracesEReferences;
		thisModule.jsonGrammarRoot().detailedGrammar.bracketsReferences <- thisModule.bracketsEReferences;
		thisModule.jsonGrammarRoot().detailedGrammar.keyValue <- thisModule.keyValues;		
		thisModule.jsonGrammarRoot().detailedGrammar.curlyBracesEClass <- thisModule.curlyBracesEClass;
		thisModule.jsonGrammarRoot().detailedGrammar.bracketsEClass <- thisModule.bracketsEClass;
		
		------ Related Schemas
		thisModule.relatedSchemasRoot().enclosingschemas<-thisModule.enclosingSchemas;
		
		-----  Refine Class names for unicity	-----------
		

					
		for (eClass in thisModule.allEClass()){
			for (eClass2 in thisModule.allEClass()->excluding(eClass)->select(eClass2 | eClass2.name = eClass.name)) {
				eClass2.name <- eClass2.name.
					concat(thisModule.allEClass()->excluding(eClass)->select(eClass2 | eClass2.name = eClass.name)->indexOf(eClass2).toString());
			}
		}
		
		
		---- OCL generation--------
		for (m in JSchemaMM!MinimumSchemaDefinition.allInstancesFrom('jschema')){
			thisModule.minimumConstraintToOcl(m);
		}	

		for (r in JSchemaMM!RequiredSchemaDefinition.allInstancesFrom('jschema')){
			thisModule.requiredInPropertiesToOcl(r);
		}
		
		for(ksp in JSchemaMM!KeySchemaPair.allInstancesFrom('jschema')){
			if(ksp.refImmediateComposite().oclIsTypeOf(JSchemaMM!PatternPropertiesSchemaDefinition)){
				thisModule.patternPropertiesRegexToOcl(ksp);
			}
		}
			
		thisModule.endPackage();
		
	}
}

